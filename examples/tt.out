
#############
# Desugared #
#############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n : Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ : Nat) -> Type.
  
  constructor/1 FZ : (n :I Nat) -> Fin (S n).
  
  constructor/2 FS : (n :I Nat) -> (_ : Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ : Nat) -> (_ : Type) -> Type.
  
  constructor/1 VN : (a :I Type) -> Vect Z a.
  
  constructor/4 VC : (n :I Nat) -> (a :I Type) -> (_ : a) -> (_ : Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT : (_ : Nat) -> Type.
  
  constructor/2 V : (n :I Nat) -> (_ : Fin n) -> TT n.
  
  constructor/2 Lam : (n :I Nat) -> (_ : TT (S n)) -> TT n.
  
  constructor/3 App : (n :I Nat) -> (_ : TT n) -> (_ : TT n) -> TT n.
}

env : (m : Nat) -> (n : Nat) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (x : TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (g : TT m) (x : TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (x : TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (g : TT m) (x : TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm : TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 : TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop : (n : Nat) -> (_ : TT n) -> (_ : Fin (S n)) -> TT n {
  forall (n : Nat) (tm : TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n : Nat) (tm : TT n) (i : Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex : (m : Nat) -> (_ : TT m) -> (_ : TT m) -> TT m {
    forall (m : Nat) (y : TT (S m)) (x : TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m : Nat) (f' : TT m) (x : TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf : (m : Nat) -> (_ : TT m) -> TT m {
    forall (m : Nat) (i : Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m : Nat) (x : TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m : Nat) (f : TT m) (x : TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 : TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor/0 Result : Type.
  
  constructor/2 R : (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main : Result {
  main  ~> R example1 example2
}

###############
# Elaboration #
###############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ :L Nat) -> Type.
  
  constructor/1 FZ : (n :I Nat) -> Fin (S n).
  
  constructor/2 FS : (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN : (a :I Type) -> Vect Z a.
  
  constructor/4 VC : (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT : (_ :L Nat) -> Type.
  
  constructor/2 V : (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam : (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App : (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env : (m : Nat) -> (n : Nat) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (x : TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (g : TT m) (x : TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (x : TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (g : TT m) (x : TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm : TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 : TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop : (n : Nat) -> (_ : TT n) -> (_ : Fin (S n)) -> TT n {
  forall (n : Nat) (tm : TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n : Nat) (tm : TT n) (i : Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex : (m : Nat) -> (_ : TT m) -> (_ : TT m) -> TT m {
    forall (m : Nat) (y : TT (S m)) (x : TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m : Nat) (f' : TT m) (x : TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf : (m : Nat) -> (_ : TT m) -> TT m {
    forall (m : Nat) (i : Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m : Nat) (x : TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m : Nat) (f : TT m) (x : TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 : TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor/0 Result : Type.
  
  constructor/2 R : (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main : Result {
  main  ~> R example1 example2
}

Equalities:


Solved metas: []

##############
# Elaborated #
##############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ :L Nat) -> Type.
  
  constructor/1 FZ : (n :I Nat) -> Fin (S n).
  
  constructor/2 FS : (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN : (a :I Type) -> Vect Z a.
  
  constructor/4 VC : (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT : (_ :L Nat) -> Type.
  
  constructor/2 V : (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam : (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App : (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env : (m : Nat) -> (n : Nat) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (x : TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (g : TT m) (x : TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (x : TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (g : TT m) (x : TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm : TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 : TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop : (n : Nat) -> (_ : TT n) -> (_ : Fin (S n)) -> TT n {
  forall (n : Nat) (tm : TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n : Nat) (tm : TT n) (i : Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex : (m : Nat) -> (_ : TT m) -> (_ : TT m) -> TT m {
    forall (m : Nat) (y : TT (S m)) (x : TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m : Nat) (f' : TT m) (x : TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf : (m : Nat) -> (_ : TT m) -> TT m {
    forall (m : Nat) (i : Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m : Nat) (x : TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m : Nat) (f : TT m) (x : TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 : TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor/0 Result : Type.
  
  constructor/2 R : (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main : Result {
  main  ~> R example1 example2
}

#############
# Evarified #
#############

mutual {
  constructor/0 Nat :16 Type.
  
  constructor/0 Z :37 Nat.
  
  constructor/1 S :22 (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :11 (_ :L Nat) -> Type.
  
  constructor/1 FZ :8 (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :4 (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :36 (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN :33 (a :I Type) -> Vect Z a.
  
  constructor/4 VC :27 (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT :23 (_ :L Nat) -> Type.
  
  constructor/2 V :24 (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam :12 (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App :0 (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :38 (m :39 Nat) -> (n :40 Nat) -> (_ :41 Vect m (TT n)) -> (_ :45 Fin m) -> TT n {
  forall (m :55 Nat) (n :54 Nat) (x :52 TT n) (xs :48 Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :76 Nat) (n :75 Nat) (x :73 TT n) (xs :69 Vect m (TT n)) (i :67 Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :123 (m :124 Nat) -> (n :125 Nat) -> (_ :126 (_ :127 Fin m) -> Fin n) -> (_ :130 Fin (S m)) -> Fin (S n) {
  forall (m :140 Nat) (n :139 Nat) (f :135 (_ :136 Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :154 Nat) (n :153 Nat) (f :149 (_ :150 Fin m) -> Fin n) (i :147 Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :215 (m :216 Nat) -> (n :217 Nat) -> (_ :218 (_ :219 Fin m) -> Fin n) -> (_ :222 TT m) -> TT n {
  forall (m :232 Nat) (n :231 Nat) (f :227 (_ :228 Fin m) -> Fin n) (i :225 Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :250 Nat) (n :249 Nat) (f :245 (_ :246 Fin m) -> Fin n) (x :242 TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :277 Nat) (n :276 Nat) (f :272 (_ :273 Fin m) -> Fin n) (g :270 TT m) (x :268 TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :164 (m :165 Nat) -> (n :166 Nat) -> (_ :167 (_ :168 Fin m) -> TT n) -> (_ :171 Fin (S m)) -> TT (S n) {
  forall (m :181 Nat) (n :180 Nat) (f :176 (_ :177 Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :198 Nat) (n :197 Nat) (f :193 (_ :194 Fin m) -> TT n) (i :191 Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars :405 (m :406 Nat) -> (n :407 Nat) -> (_ :408 (_ :409 Fin m) -> TT n) -> (_ :412 TT m) -> TT n {
  forall (m :422 Nat) (n :421 Nat) (f :417 (_ :418 Fin m) -> TT n) (i :415 Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m :438 Nat) (n :437 Nat) (f :433 (_ :434 Fin m) -> TT n) (x :430 TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m :465 Nat) (n :464 Nat) (f :460 (_ :461 Fin m) -> TT n) (g :458 TT m) (x :456 TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm :484 TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 :93 TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop :378 (n :379 Nat) -> (_ :380 TT n) -> (_ :382 Fin (S n)) -> TT n {
  forall (n :388 Nat) (tm :386 TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n :397 Nat) (tm :395 TT n) (i :393 Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex :336 (m :337 Nat) -> (_ :338 TT m) -> (_ :340 TT m) -> TT m {
    forall (m :348 Nat) (y :345 TT (S m)) (x :343 TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m :369 Nat) (f' :367 TT m) (x :365 TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf :296 (m :297 Nat) -> (_ :298 TT m) -> TT m {
    forall (m :303 Nat) (i :301 Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m :313 Nat) (x :310 TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m :327 Nat) (f :325 TT m) (x :323 TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 :117 TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor/0 Result :21 Type.
  
  constructor/2 R :17 (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main :212 Result {
  main  ~> R example1 example2
}
inferring  mutual {
    constructor/0 Nat :16 Type.
    
    constructor/0 Z :37 Nat.
    
    constructor/1 S :22 (n :L Nat) -> Nat.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Nat :I Type.
    
    constructor/0 Z :I Nat.
    
    constructor/1 S :I (n :L Nat) -> Nat.
  }

inferring  mutual {
    constructor/1 Fin :11 (_ :L Nat) -> Type.
    
    constructor/1 FZ :8 (n :I Nat) -> Fin (S n).
    
    constructor/2 FS :4 (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

  inferred constraints: 
    L ~ 9
    L ~ 10
    L ~ 5
    L ~ 6
    L ~ 7
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/1 Fin :I (_ :L Nat) -> Type.
    
    constructor/1 FZ :I (n :I Nat) -> Fin (S n).
    
    constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

inferring  mutual {
    constructor/2 Vect :36 (_ :L Nat) -> (_ :L Type) -> Type.
    
    constructor/1 VN :33 (a :I Type) -> Vect Z a.
    
    constructor/4 VC :27 (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

  inferred constraints: 
    L ~ 35
    L ~ 34
    L ~ 29
    L ~ 28
    L ~ 31
    L ~ 32
    L ~ 30
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
    
    constructor/1 VN :I (a :I Type) -> Vect Z a.
    
    constructor/4 VC :I (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

inferring  mutual {
    constructor/1 TT :23 (_ :L Nat) -> Type.
    
    constructor/2 V :24 (n :I Nat) -> (_ :L Fin n) -> TT n.
    
    constructor/2 Lam :12 (n :I Nat) -> (_ :L TT (S n)) -> TT n.
    
    constructor/3 App :0 (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
  }

  inferred constraints: 
    L ~ 25
    L ~ 26
    L ~ 13
    L ~ 14
    L ~ 15
    L ~ 1
    L ~ 2
    L ~ 3
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/1 TT :I (_ :L Nat) -> Type.
    
    constructor/2 V :I (n :I Nat) -> (_ :L Fin n) -> TT n.
    
    constructor/2 Lam :I (n :I Nat) -> (_ :L TT (S n)) -> TT n.
    
    constructor/3 App :I (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
  }

inferring  env :38 (m :39 Nat) -> (n :40 Nat) -> (_ :41 Vect m (TT n)) -> (_ :45 Fin m) -> TT n {
    forall (m :55 Nat) (n :54 Nat) (x :52 TT n) (xs :48 Vect m (TT n))
    env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
    
    forall (m :76 Nat) (n :75 Nat) (x :73 TT n) (xs :69 Vect m (TT n)) (i :67 Fin m)
    env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
  }

  inferred constraints: 
    L ~ 43
    L ~ 42
    L ~ 44
    L ~ 46
    L ~ 47
    L ~ 53
    L ~ 50
    L ~ 49
    L ~ 51
    55 ~ product [I, 45]
    54 ~ product [40]
    52 ~ product [L, 41]
    48 ~ product [L, 41]
    39 ~ 56
    L ~ 57
    40 ~ 58
    41 ~ 59
    product [41] ≥ sum
      product [L]
    I ~ 60
    I ~ 61
    L ~ 62
    L ~ 63
    62 ~ 53
    L ~ 64
    L ~ 49
    L ~ 50
    42 ~ L
    43 ~ L
    57 ~ L
    44 ~ 62
    45 ~ 65
    product [45] ≥ sum
      product [L]
    I ~ 66
    46 ~ L
    57 ~ L
    55 ≥ sum
    54 ≥ sum
    52 ≥ sum
      product []
    48 ≥ sum
    53 ~ 47
    L ~ 74
    L ~ 71
    L ~ 70
    L ~ 72
    L ~ 68
    76 ~ product [I, 45]
    75 ~ product [40]
    73 ~ product [L, 41]
    69 ~ product [L, 41]
    67 ~ product [L, 45]
    39 ~ 77
    L ~ 78
    40 ~ 79
    41 ~ 80
    product [41] ≥ sum
      product [L]
    I ~ 81
    I ~ 82
    L ~ 83
    L ~ 84
    83 ~ 74
    L ~ 85
    L ~ 70
    L ~ 71
    42 ~ L
    43 ~ L
    78 ~ L
    44 ~ 83
    45 ~ 86
    product [45] ≥ sum
      product [L]
    I ~ 87
    L ~ 88
    L ~ 68
    46 ~ L
    78 ~ L
    76 ≥ sum
      product [39]
    75 ≥ sum
      product [40]
    73 ≥ sum
    69 ≥ sum
      product [41]
    67 ≥ sum
      product [45]
    39 ~ 92
    40 ~ 91
    41 ~ 90
    42 ~ 70
    43 ~ 71
    45 ~ 89
    46 ~ 68
    47 ~ 47
  
  deferred equalities: 
    49 -> TT n ~ TT n
    70 -> TT n ~ TT n
    70 -> TT n ~ TT n
  
  variance of evars:
    covariant: []
    contravariant: [39, 40, 41, 45]
  -> iteration 1
    TT n ~ TT n
    TT n ~ TT n
    TT n ~ TT n

  env :I (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
    forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n))
    env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
    
    forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m)
    env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
  }

inferring  extendMap :123 (m :124 Nat) -> (n :125 Nat) -> (_ :126 (_ :127 Fin m) -> Fin n) -> (_ :130 Fin (S m)) -> Fin (S n) {
    forall (m :140 Nat) (n :139 Nat) (f :135 (_ :136 Fin m) -> Fin n)
    extendMap m n f (FZ [m]) ~> FZ n
    
    forall (m :154 Nat) (n :153 Nat) (f :149 (_ :150 Fin m) -> Fin n) (i :147 Fin m)
    extendMap m n f (FS [m] i) ~> FS n (f i)
  }

  inferred constraints: 
    L ~ 128
    L ~ 129
    L ~ 131
    L ~ 132
    L ~ 133
    L ~ 134
    L ~ 137
    L ~ 138
    140 ~ product [124]
    139 ~ product [125]
    135 ~ product [126]
    124 ~ 141
    125 ~ 142
    126 ~ 143
    127 ~ 136
    128 ~ 137
    129 ~ 138
    130 ~ 144
    product [130] ≥ sum
      product [L]
    I ~ 145
    131 ~ L
    132 ~ L
    140 ≥ sum
    139 ≥ sum
      product [I]
    135 ≥ sum
    I ~ 146
    L ~ 133
    L ~ 151
    L ~ 152
    L ~ 148
    154 ~ product [124]
    153 ~ product [125]
    149 ~ product [126]
    147 ~ product [L, 130]
    124 ~ 155
    125 ~ 156
    126 ~ 157
    127 ~ 150
    128 ~ 151
    129 ~ 152
    130 ~ 158
    product [130] ≥ sum
      product [L]
    I ~ 159
    L ~ 160
    L ~ 148
    131 ~ L
    132 ~ L
    154 ≥ sum
    153 ≥ sum
      product [I]
    149 ≥ sum
      product [L]
    147 ≥ sum
      product [150, L]
    I ~ 162
    L ~ 161
    150 ~ 163
    151 ~ 148
    L ~ 152
    L ~ 133
  
  deferred equalities: 
    133 -> S n ~ S n
    133 -> S n ~ S n
  
  variance of evars:
    covariant: [127]
    contravariant: [124, 125, 126, 130]
  -> iteration 1
    S n ~ S n
    S n ~ S n

  extendMap :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n)
    extendMap m n f (FZ [m]) ~> FZ n
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
    extendMap m n f (FS [m] i) ~> FS n (f i)
  }

inferring  mapVars :215 (m :216 Nat) -> (n :217 Nat) -> (_ :218 (_ :219 Fin m) -> Fin n) -> (_ :222 TT m) -> TT n {
    forall (m :232 Nat) (n :231 Nat) (f :227 (_ :228 Fin m) -> Fin n) (i :225 Fin m)
    mapVars m n f (V [m] i) ~> V n (f i)
    
    forall (m :250 Nat) (n :249 Nat) (f :245 (_ :246 Fin m) -> Fin n) (x :242 TT (S m))
    mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
    
    forall (m :277 Nat) (n :276 Nat) (f :272 (_ :273 Fin m) -> Fin n) (g :270 TT m) (x :268 TT m)
    mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
  }

  inferred constraints: 
    L ~ 220
    L ~ 221
    L ~ 223
    L ~ 224
    L ~ 229
    L ~ 230
    L ~ 226
    232 ~ product [216]
    231 ~ product [217]
    227 ~ product [218]
    225 ~ product [L, 222]
    216 ~ 233
    217 ~ 234
    218 ~ 235
    219 ~ 228
    220 ~ 229
    221 ~ 230
    222 ~ 236
    product [222] ≥ sum
      product [L]
    I ~ 237
    L ~ 238
    L ~ 226
    223 ~ L
    232 ≥ sum
    231 ≥ sum
      product [I]
    227 ≥ sum
      product [L]
    225 ≥ sum
      product [228, L]
    I ~ 240
    L ~ 239
    228 ~ 241
    229 ~ 226
    L ~ 230
    L ~ 224
    L ~ 247
    L ~ 248
    L ~ 243
    L ~ 244
    250 ~ product [216]
    249 ~ product [217]
    245 ~ product [218]
    242 ~ product [L, 222]
    216 ~ 251
    217 ~ 252
    218 ~ 253
    219 ~ 246
    220 ~ 247
    221 ~ 248
    222 ~ 254
    product [222] ≥ sum
      product [L]
    I ~ 255
    L ~ 256
    L ~ 243
    223 ~ L
    250 ≥ sum
      product [L, 216, L]
      product [I, 218, L]
    249 ≥ sum
      product [I]
      product [L, 217, L]
      product [I, 218, L]
    245 ≥ sum
      product [R, 218, L]
    242 ≥ sum
      product [222, L]
    I ~ 258
    L ~ 257
    216 ~ 262
    L ~ 263
    217 ~ 261
    L ~ 264
    218 ~ 260
    I ~ 267
    I ~ 266
    R ~ 265
    L ~ 246
    L ~ 247
    L ~ 248
    219 ~ L
    220 ~ L
    263 ~ L
    221 ~ L
    264 ~ L
    222 ~ 259
    223 ~ 243
    L ~ 224
    L ~ 224
    L ~ 274
    L ~ 275
    L ~ 271
    L ~ 269
    277 ~ product [216]
    276 ~ product [217]
    272 ~ product [218]
    270 ~ product [L, 222]
    268 ~ product [L, 222]
    216 ~ 278
    217 ~ 279
    218 ~ 280
    219 ~ 273
    220 ~ 274
    221 ~ 275
    222 ~ 281
    product [222] ≥ sum
      product [L]
    I ~ 282
    L ~ 283
    L ~ 271
    L ~ 284
    L ~ 269
    223 ~ L
    277 ≥ sum
      product [216, L]
      product [216, L]
    276 ≥ sum
      product [I]
      product [217, L]
      product [217, L]
    272 ≥ sum
      product [218, L]
      product [218, L]
    270 ≥ sum
      product [222, L]
    268 ≥ sum
      product [222, L]
    I ~ 287
    L ~ 286
    216 ~ 291
    217 ~ 290
    218 ~ 289
    219 ~ 273
    220 ~ 274
    221 ~ 275
    222 ~ 288
    223 ~ 271
    L ~ 224
    L ~ 285
    216 ~ 295
    217 ~ 294
    218 ~ 293
    219 ~ 273
    220 ~ 274
    221 ~ 275
    222 ~ 292
    223 ~ 269
    L ~ 224
    L ~ 224
  
  deferred equalities: 
    243 -> S m ~ S m
    243 -> S m ~ S m
    224 -> S n ~ S n
  
  variance of evars:
    covariant: [219]
    contravariant: [216, 217, 218, 222]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S n ~ S n

  mapVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
    mapVars m n f (V [m] i) ~> V n (f i)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m))
    mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m)
    mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
  }

inferring  extendSubst :164 (m :165 Nat) -> (n :166 Nat) -> (_ :167 (_ :168 Fin m) -> TT n) -> (_ :171 Fin (S m)) -> TT (S n) {
    forall (m :181 Nat) (n :180 Nat) (f :176 (_ :177 Fin m) -> TT n)
    extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
    
    forall (m :198 Nat) (n :197 Nat) (f :193 (_ :194 Fin m) -> TT n) (i :191 Fin m)
    extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
  }

  inferred constraints: 
    L ~ 169
    L ~ 170
    L ~ 172
    L ~ 173
    L ~ 174
    L ~ 175
    L ~ 178
    L ~ 179
    181 ~ product [165]
    180 ~ product [166]
    176 ~ product [167]
    165 ~ 182
    166 ~ 183
    167 ~ 184
    168 ~ 177
    169 ~ 178
    170 ~ 179
    171 ~ 185
    product [171] ≥ sum
      product [L]
    I ~ 186
    172 ~ L
    173 ~ L
    181 ≥ sum
    180 ≥ sum
      product [L, I]
      product [I, L]
    176 ≥ sum
    I ~ 188
    L ~ 189
    L ~ 187
    I ~ 190
    189 ~ L
    L ~ 174
    L ~ 195
    L ~ 196
    L ~ 192
    198 ~ product [165]
    197 ~ product [166]
    193 ~ product [167]
    191 ~ product [L, 171]
    165 ~ 199
    166 ~ 200
    167 ~ 201
    168 ~ 194
    169 ~ 195
    170 ~ 196
    171 ~ 202
    product [171] ≥ sum
      product [L]
    I ~ 203
    L ~ 204
    L ~ 192
    172 ~ L
    173 ~ L
    198 ≥ sum
    197 ≥ sum
      product [I]
      product [L, I]
      product [I, R]
    193 ≥ sum
      product [L]
    191 ≥ sum
      product [194, L]
    I ~ 208
    I ~ 207
    L ~ 209
    R ~ 206
    I ~ 210
    209 ~ L
    L ~ 205
    194 ~ 211
    195 ~ 192
    L ~ 196
    L ~ 174
  
  deferred equalities: 
    174 -> S n ~ S n
    174 -> S n ~ S n
  
  variance of evars:
    covariant: [168]
    contravariant: [165, 166, 167, 171]
  -> iteration 1
    S n ~ S n
    S n ~ S n

  extendSubst :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n)
    extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
    extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
  }

inferring  substVars :405 (m :406 Nat) -> (n :407 Nat) -> (_ :408 (_ :409 Fin m) -> TT n) -> (_ :412 TT m) -> TT n {
    forall (m :422 Nat) (n :421 Nat) (f :417 (_ :418 Fin m) -> TT n) (i :415 Fin m)
    substVars m n f (V [m] i) ~> f i
    
    forall (m :438 Nat) (n :437 Nat) (f :433 (_ :434 Fin m) -> TT n) (x :430 TT (S m))
    substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
    
    forall (m :465 Nat) (n :464 Nat) (f :460 (_ :461 Fin m) -> TT n) (g :458 TT m) (x :456 TT m)
    substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
  }

  inferred constraints: 
    L ~ 410
    L ~ 411
    L ~ 413
    L ~ 414
    L ~ 419
    L ~ 420
    L ~ 416
    422 ~ product [406]
    421 ~ product [407]
    417 ~ product [408]
    415 ~ product [L, 412]
    406 ~ 423
    407 ~ 424
    408 ~ 425
    409 ~ 418
    410 ~ 419
    411 ~ 420
    412 ~ 426
    product [412] ≥ sum
      product [L]
    I ~ 427
    L ~ 428
    L ~ 416
    413 ~ L
    422 ≥ sum
    421 ≥ sum
    417 ≥ sum
      product []
    415 ≥ sum
      product [418]
    418 ~ 429
    419 ~ 416
    420 ~ 414
    L ~ 435
    L ~ 436
    L ~ 431
    L ~ 432
    438 ~ product [406]
    437 ~ product [407]
    433 ~ product [408]
    430 ~ product [L, 412]
    406 ~ 439
    407 ~ 440
    408 ~ 441
    409 ~ 434
    410 ~ 435
    411 ~ 436
    412 ~ 442
    product [412] ≥ sum
      product [L]
    I ~ 443
    L ~ 444
    L ~ 431
    413 ~ L
    438 ≥ sum
      product [L, 406, L]
      product [I, 408, L]
    437 ≥ sum
      product [I]
      product [L, 407, L]
      product [I, 408, L]
    433 ≥ sum
      product [R, 408, L]
    430 ≥ sum
      product [412, L]
    I ~ 446
    L ~ 445
    406 ~ 450
    L ~ 451
    407 ~ 449
    L ~ 452
    408 ~ 448
    I ~ 455
    I ~ 454
    R ~ 453
    L ~ 434
    L ~ 435
    L ~ 436
    409 ~ L
    410 ~ L
    451 ~ L
    411 ~ L
    452 ~ L
    412 ~ 447
    413 ~ 431
    L ~ 414
    L ~ 414
    L ~ 462
    L ~ 463
    L ~ 459
    L ~ 457
    465 ~ product [406]
    464 ~ product [407]
    460 ~ product [408]
    458 ~ product [L, 412]
    456 ~ product [L, 412]
    406 ~ 466
    407 ~ 467
    408 ~ 468
    409 ~ 461
    410 ~ 462
    411 ~ 463
    412 ~ 469
    product [412] ≥ sum
      product [L]
    I ~ 470
    L ~ 471
    L ~ 459
    L ~ 472
    L ~ 457
    413 ~ L
    465 ≥ sum
      product [406, L]
      product [406, L]
    464 ≥ sum
      product [I]
      product [407, L]
      product [407, L]
    460 ≥ sum
      product [408, L]
      product [408, L]
    458 ≥ sum
      product [412, L]
    456 ≥ sum
      product [412, L]
    I ~ 475
    L ~ 474
    406 ~ 479
    407 ~ 478
    408 ~ 477
    409 ~ 461
    410 ~ 462
    411 ~ 463
    412 ~ 476
    413 ~ 459
    L ~ 414
    L ~ 473
    406 ~ 483
    407 ~ 482
    408 ~ 481
    409 ~ 461
    410 ~ 462
    411 ~ 463
    412 ~ 480
    413 ~ 457
    L ~ 414
    L ~ 414
  
  deferred equalities: 
    431 -> S m ~ S m
    431 -> S m ~ S m
    414 -> S n ~ S n
  
  variance of evars:
    covariant: [409]
    contravariant: [406, 407, 408, 412]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S n ~ S n

  substVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L TT m) -> TT n {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
    substVars m n f (V [m] i) ~> f i
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (x :L TT (S m))
    substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (g :L TT m) (x :L TT m)
    substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
  }

inferring  testTm :484 TT (S Z) {
    testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
  }

  inferred constraints: 
    L ~ 485
    L ~ 486
    I ~ 489
    L ~ 490
    L ~ 488
    I ~ 492
    L ~ 493
    L ~ 491
    I ~ 496
    L ~ 497
    L ~ 498
    L ~ 495
    I ~ 500
    L ~ 501
    L ~ 502
    L ~ 499
    I ~ 503
    L ~ 504
    501 ~ L
    502 ~ 504
    497 ~ 501
    L ~ 494
    I ~ 506
    L ~ 507
    L ~ 508
    L ~ 505
    I ~ 510
    L ~ 511
    L ~ 509
    I ~ 512
    511 ~ L
    507 ~ L
    508 ~ 511
    497 ~ 507
    L ~ 497
    490 ~ 493
    L ~ 487
    I ~ 514
    L ~ 515
    L ~ 513
    I ~ 518
    L ~ 519
    L ~ 520
    L ~ 517
    I ~ 522
    L ~ 523
    L ~ 524
    L ~ 521
    I ~ 526
    L ~ 527
    L ~ 525
    I ~ 528
    527 ~ L
    523 ~ L
    524 ~ 527
    519 ~ 523
    L ~ 516
    I ~ 530
    L ~ 531
    L ~ 532
    L ~ 529
    I ~ 533
    L ~ 534
    531 ~ L
    532 ~ 534
    519 ~ 531
    L ~ 519
    490 ~ 515
    L ~ 485
  
  deferred equalities: 
    501 -> S Z ~ S Z
    507 -> S Z ~ S Z
    497 -> S Z ~ S Z
    523 -> S Z ~ S Z
    531 -> S Z ~ S Z
    519 -> S Z ~ S Z
    485 -> S Z ~ S Z
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z

  testTm :I TT (S Z) {
    testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
  }

inferring  example1 :93 TT Z {
    example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
  }

  inferred constraints: 
    L ~ 94
    I ~ 98
    L ~ 99
    I ~ 97
    R ~ 96
    I ~ 102
    L ~ 103
    I ~ 101
    R ~ 100
    I ~ 107
    I ~ 106
    L ~ 108
    L ~ 105
    I ~ 110
    L ~ 109
    I ~ 112
    L ~ 113
    L ~ 111
    I ~ 114
    113 ~ L
    L ~ 113
    108 ~ L
    L ~ 104
    I ~ 115
    L ~ 116
    108 ~ 116
    103 ~ L
    L ~ 108
    99 ~ 103
    L ~ 95
    99 ~ L
    L ~ 94
  
  
  variance of evars:
    covariant: []
    contravariant: []
  example1 :I TT Z {
    example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
  }

inferring  substTop :378 (n :379 Nat) -> (_ :380 TT n) -> (_ :382 Fin (S n)) -> TT n {
    forall (n :388 Nat) (tm :386 TT n)
    substTop n tm (FZ [n]) ~> tm
    
    forall (n :397 Nat) (tm :395 TT n) (i :393 Fin n)
    substTop n tm (FS [n] i) ~> V n i
  }

  inferred constraints: 
    L ~ 381
    L ~ 383
    L ~ 384
    L ~ 385
    L ~ 387
    388 ~ product [379]
    386 ~ product [380]
    379 ~ 389
    380 ~ 390
    381 ~ 387
    382 ~ 391
    product [382] ≥ sum
      product [L]
    I ~ 392
    383 ~ L
    384 ~ L
    388 ≥ sum
    386 ≥ sum
      product []
    387 ~ 385
    L ~ 396
    L ~ 394
    397 ~ product [379]
    395 ~ product [380]
    393 ~ product [L, 382]
    379 ~ 398
    380 ~ 399
    381 ~ 396
    382 ~ 400
    product [382] ≥ sum
      product [L]
    I ~ 401
    L ~ 402
    L ~ 394
    383 ~ L
    384 ~ L
    397 ≥ sum
      product [I]
    395 ≥ sum
    393 ≥ sum
      product [L]
    I ~ 404
    L ~ 403
    L ~ 394
    L ~ 385
  
  
  variance of evars:
    covariant: []
    contravariant: [379, 380, 382]
  substTop :I (n :I Nat) -> (_ :R TT n) -> (_ :L Fin (S n)) -> TT n {
    forall (n :I Nat) (tm :R TT n)
    substTop n tm (FZ [n]) ~> tm
    
    forall (n :I Nat) (tm :R TT n) (i :L Fin n)
    substTop n tm (FS [n] i) ~> V n i
  }

inferring  mutual {
    redex :336 (m :337 Nat) -> (_ :338 TT m) -> (_ :340 TT m) -> TT m {
      forall (m :348 Nat) (y :345 TT (S m)) (x :343 TT m)
      redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
      
      forall (m :369 Nat) (f' :367 TT m) (x :365 TT m)
      redex m f' x ~> App m f' (nf m x)
    }
    
    nf :296 (m :297 Nat) -> (_ :298 TT m) -> TT m {
      forall (m :303 Nat) (i :301 Fin m)
      nf m (V [m] i) ~> V m i
      
      forall (m :313 Nat) (x :310 TT (S m))
      nf m (Lam [m] x) ~> Lam m (nf (S m) x)
      
      forall (m :327 Nat) (f :325 TT m) (x :323 TT m)
      nf m (App [m] f x) ~> redex m f x
    }
  }

  inferred constraints: 
    L ~ 339
    L ~ 341
    L ~ 342
    L ~ 346
    L ~ 347
    L ~ 344
    348 ~ product [337]
    345 ~ product [L, 338]
    343 ~ product [340]
    337 ~ 349
    338 ~ 350
    product [338] ≥ sum
      product [L]
    I ~ 351
    L ~ 352
    L ~ 346
    339 ~ L
    340 ~ 353
    341 ~ 344
    348 ≥ sum
      product [297]
      product [L, I, 298]
      product [I, 298]
      product [I, R, 298]
      product [297, R, R, 298]
    345 ≥ sum
      product [L, 298]
    343 ≥ sum
      product [298, R, R, 298]
    297 ~ 355
    298 ~ 354
    I ~ 359
    L ~ 360
    I ~ 358
    R ~ 357
    I ~ 362
    R ~ 361
    297 ~ 364
    298 ~ 363
    299 ~ 344
    L ~ 300
    360 ~ L
    L ~ 356
    L ~ 346
    299 ~ L
    300 ~ 342
    L ~ 368
    L ~ 366
    369 ~ product [337]
    367 ~ product [338]
    365 ~ product [340]
    337 ~ 370
    338 ~ 371
    339 ~ 368
    340 ~ 372
    341 ~ 366
    369 ≥ sum
      product [I]
      product [297, L]
    367 ≥ sum
      product [L]
    365 ≥ sum
      product [298, L]
    I ~ 375
    L ~ 374
    L ~ 368
    L ~ 373
    297 ~ 377
    298 ~ 376
    299 ~ 366
    L ~ 300
    L ~ 342
    L ~ 299
    L ~ 300
    L ~ 302
    303 ~ product [297]
    301 ~ product [L, 298]
    297 ~ 304
    298 ~ 305
    product [298] ≥ sum
      product [L]
    I ~ 306
    L ~ 307
    L ~ 302
    299 ~ L
    303 ≥ sum
      product [I]
    301 ≥ sum
      product [L]
    I ~ 309
    L ~ 308
    L ~ 302
    L ~ 300
    L ~ 311
    L ~ 312
    313 ~ product [297]
    310 ~ product [L, 298]
    297 ~ 314
    298 ~ 315
    product [298] ≥ sum
      product [L]
    I ~ 316
    L ~ 317
    L ~ 311
    299 ~ L
    313 ≥ sum
      product [I]
      product [L, 297, L]
    310 ≥ sum
      product [298, L]
    I ~ 319
    L ~ 318
    297 ~ 321
    L ~ 322
    298 ~ 320
    299 ~ 311
    L ~ 300
    L ~ 300
    L ~ 326
    L ~ 324
    327 ~ product [297]
    325 ~ product [L, 298]
    323 ~ product [L, 298]
    297 ~ 328
    298 ~ 329
    product [298] ≥ sum
      product [L]
    I ~ 330
    L ~ 331
    L ~ 326
    L ~ 332
    L ~ 324
    299 ~ L
    327 ≥ sum
      product [337]
    325 ≥ sum
      product [338]
    323 ≥ sum
      product [340]
    337 ~ 335
    338 ~ 334
    339 ~ 326
    340 ~ 333
    341 ~ 324
    342 ~ 300
  
  deferred equalities: 
    346 -> S m ~ S m
    346 -> S m ~ S m
    311 -> S m ~ S m
    311 -> S m ~ S m
    300 -> S m ~ S m
  
  variance of evars:
    covariant: []
    contravariant: [297, 298, 337, 338, 340]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S m ~ S m
    S m ~ S m
    S m ~ S m

  mutual {
    redex :I (m :I Nat) -> (_ :R TT m) -> (_ :R TT m) -> TT m {
      forall (m :I Nat) (y :R TT (S m)) (x :R TT m)
      redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
      
      forall (m :I Nat) (f' :R TT m) (x :R TT m)
      redex m f' x ~> App m f' (nf m x)
    }
    
    nf :I (m :I Nat) -> (_ :R TT m) -> TT m {
      forall (m :I Nat) (i :R Fin m)
      nf m (V [m] i) ~> V m i
      
      forall (m :I Nat) (x :R TT (S m))
      nf m (Lam [m] x) ~> Lam m (nf (S m) x)
      
      forall (m :I Nat) (f :R TT m) (x :R TT m)
      nf m (App [m] f x) ~> redex m f x
    }
  }

inferring  example2 :117 TT (S Z) {
    example2  ~> nf (S Z) testTm
  }

  inferred constraints: 
    L ~ 118
    L ~ 119
    I ~ 121
    L ~ 122
    R ~ 120
    122 ~ L
    L ~ 118
  
  deferred equalities: 
    118 -> S Z ~ S Z
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    S Z ~ S Z

  example2 :I TT (S Z) {
    example2  ~> nf (S Z) testTm
  }

inferring  mutual {
    constructor/0 Result :21 Type.
    
    constructor/2 R :17 (x :L TT Z) -> (y :L TT (S Z)) -> Result.
  }

  inferred constraints: 
    L ~ 18
    L ~ 19
    L ~ 20
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Result :I Type.
    
    constructor/2 R :I (x :L TT Z) -> (y :L TT (S Z)) -> Result.
  }

inferring  main :212 Result {
    main  ~> R example1 example2
  }

  inferred constraints: 
    L ~ 214
    L ~ 213
  
  
  variance of evars:
    covariant: []
    contravariant: []
  main :I Result {
    main  ~> R example1 example2
  }


###################
# Final valuation #
###################

  0 -> R
  1 -> L
  2 -> L
  3 -> L
  4 -> R
  5 -> L
  6 -> L
  7 -> L
  8 -> R
  9 -> L
  10 -> L
  11 -> I
  12 -> R
  13 -> L
  14 -> L
  15 -> L
  16 -> I
  17 -> L
  18 -> L
  19 -> L
  20 -> L
  21 -> I
  22 -> I
  23 -> I
  24 -> R
  25 -> L
  26 -> L
  27 -> R
  28 -> L
  29 -> L
  30 -> L
  31 -> L
  32 -> L
  33 -> R
  34 -> L
  35 -> L
  36 -> I
  37 -> I
  38 -> R
  39 -> I
  40 -> I
  41 -> R
  42 -> L
  43 -> L
  44 -> L
  45 -> L
  46 -> L
  47 -> L
  48 -> R
  49 -> L
  50 -> L
  51 -> L
  52 -> R
  53 -> L
  54 -> I
  55 -> I
  56 -> I
  57 -> L
  58 -> I
  59 -> R
  60 -> I
  61 -> I
  62 -> L
  63 -> L
  64 -> L
  65 -> L
  66 -> I
  67 -> L
  68 -> L
  69 -> R
  70 -> L
  71 -> L
  72 -> L
  73 -> R
  74 -> L
  75 -> I
  76 -> I
  77 -> I
  78 -> L
  79 -> I
  80 -> R
  81 -> I
  82 -> I
  83 -> L
  84 -> L
  85 -> L
  86 -> L
  87 -> I
  88 -> L
  89 -> L
  90 -> R
  91 -> I
  92 -> I
  93 -> L
  94 -> L
  95 -> L
  96 -> R
  97 -> I
  98 -> I
  99 -> L
  100 -> R
  101 -> I
  102 -> I
  103 -> L
  104 -> L
  105 -> L
  106 -> I
  107 -> I
  108 -> L
  109 -> L
  110 -> I
  111 -> L
  112 -> I
  113 -> L
  114 -> I
  115 -> I
  116 -> L
  117 -> L
  118 -> L
  119 -> L
  120 -> R
  121 -> I
  122 -> L
  123 -> R
  124 -> I
  125 -> I
  126 -> R
  127 -> L
  128 -> L
  129 -> L
  130 -> L
  131 -> L
  132 -> L
  133 -> L
  134 -> L
  135 -> R
  136 -> L
  137 -> L
  138 -> L
  139 -> I
  140 -> I
  141 -> I
  142 -> I
  143 -> R
  144 -> L
  145 -> I
  146 -> I
  147 -> L
  148 -> L
  149 -> R
  150 -> L
  151 -> L
  152 -> L
  153 -> I
  154 -> I
  155 -> I
  156 -> I
  157 -> R
  158 -> L
  159 -> I
  160 -> L
  161 -> L
  162 -> I
  163 -> L
  164 -> R
  165 -> I
  166 -> I
  167 -> R
  168 -> L
  169 -> L
  170 -> L
  171 -> L
  172 -> L
  173 -> L
  174 -> L
  175 -> L
  176 -> R
  177 -> L
  178 -> L
  179 -> L
  180 -> I
  181 -> I
  182 -> I
  183 -> I
  184 -> R
  185 -> L
  186 -> I
  187 -> L
  188 -> I
  189 -> L
  190 -> I
  191 -> L
  192 -> L
  193 -> R
  194 -> L
  195 -> L
  196 -> L
  197 -> I
  198 -> I
  199 -> I
  200 -> I
  201 -> R
  202 -> L
  203 -> I
  204 -> L
  205 -> L
  206 -> R
  207 -> I
  208 -> I
  209 -> L
  210 -> I
  211 -> L
  212 -> L
  213 -> L
  214 -> L
  215 -> R
  216 -> I
  217 -> I
  218 -> R
  219 -> L
  220 -> L
  221 -> L
  222 -> L
  223 -> L
  224 -> L
  225 -> L
  226 -> L
  227 -> R
  228 -> L
  229 -> L
  230 -> L
  231 -> I
  232 -> I
  233 -> I
  234 -> I
  235 -> R
  236 -> L
  237 -> I
  238 -> L
  239 -> L
  240 -> I
  241 -> L
  242 -> L
  243 -> L
  244 -> L
  245 -> R
  246 -> L
  247 -> L
  248 -> L
  249 -> I
  250 -> I
  251 -> I
  252 -> I
  253 -> R
  254 -> L
  255 -> I
  256 -> L
  257 -> L
  258 -> I
  259 -> L
  260 -> R
  261 -> I
  262 -> I
  263 -> L
  264 -> L
  265 -> R
  266 -> I
  267 -> I
  268 -> L
  269 -> L
  270 -> L
  271 -> L
  272 -> R
  273 -> L
  274 -> L
  275 -> L
  276 -> I
  277 -> I
  278 -> I
  279 -> I
  280 -> R
  281 -> L
  282 -> I
  283 -> L
  284 -> L
  285 -> L
  286 -> L
  287 -> I
  288 -> L
  289 -> R
  290 -> I
  291 -> I
  292 -> L
  293 -> R
  294 -> I
  295 -> I
  296 -> R
  297 -> I
  298 -> R
  299 -> L
  300 -> L
  301 -> R
  302 -> L
  303 -> I
  304 -> I
  305 -> R
  306 -> I
  307 -> L
  308 -> L
  309 -> I
  310 -> R
  311 -> L
  312 -> L
  313 -> I
  314 -> I
  315 -> R
  316 -> I
  317 -> L
  318 -> L
  319 -> I
  320 -> R
  321 -> I
  322 -> L
  323 -> R
  324 -> L
  325 -> R
  326 -> L
  327 -> I
  328 -> I
  329 -> R
  330 -> I
  331 -> L
  332 -> L
  333 -> R
  334 -> R
  335 -> I
  336 -> R
  337 -> I
  338 -> R
  339 -> L
  340 -> R
  341 -> L
  342 -> L
  343 -> R
  344 -> L
  345 -> R
  346 -> L
  347 -> L
  348 -> I
  349 -> I
  350 -> R
  351 -> I
  352 -> L
  353 -> R
  354 -> R
  355 -> I
  356 -> L
  357 -> R
  358 -> I
  359 -> I
  360 -> L
  361 -> R
  362 -> I
  363 -> R
  364 -> I
  365 -> R
  366 -> L
  367 -> R
  368 -> L
  369 -> I
  370 -> I
  371 -> R
  372 -> R
  373 -> L
  374 -> L
  375 -> I
  376 -> R
  377 -> I
  378 -> R
  379 -> I
  380 -> R
  381 -> L
  382 -> L
  383 -> L
  384 -> L
  385 -> L
  386 -> R
  387 -> L
  388 -> I
  389 -> I
  390 -> R
  391 -> L
  392 -> I
  393 -> L
  394 -> L
  395 -> R
  396 -> L
  397 -> I
  398 -> I
  399 -> R
  400 -> L
  401 -> I
  402 -> L
  403 -> L
  404 -> I
  405 -> R
  406 -> I
  407 -> I
  408 -> R
  409 -> L
  410 -> L
  411 -> L
  412 -> L
  413 -> L
  414 -> L
  415 -> L
  416 -> L
  417 -> R
  418 -> L
  419 -> L
  420 -> L
  421 -> I
  422 -> I
  423 -> I
  424 -> I
  425 -> R
  426 -> L
  427 -> I
  428 -> L
  429 -> L
  430 -> L
  431 -> L
  432 -> L
  433 -> R
  434 -> L
  435 -> L
  436 -> L
  437 -> I
  438 -> I
  439 -> I
  440 -> I
  441 -> R
  442 -> L
  443 -> I
  444 -> L
  445 -> L
  446 -> I
  447 -> L
  448 -> R
  449 -> I
  450 -> I
  451 -> L
  452 -> L
  453 -> R
  454 -> I
  455 -> I
  456 -> L
  457 -> L
  458 -> L
  459 -> L
  460 -> R
  461 -> L
  462 -> L
  463 -> L
  464 -> I
  465 -> I
  466 -> I
  467 -> I
  468 -> R
  469 -> L
  470 -> I
  471 -> L
  472 -> L
  473 -> L
  474 -> L
  475 -> I
  476 -> L
  477 -> R
  478 -> I
  479 -> I
  480 -> L
  481 -> R
  482 -> I
  483 -> I
  484 -> R
  485 -> L
  486 -> L
  487 -> L
  488 -> L
  489 -> I
  490 -> L
  491 -> L
  492 -> I
  493 -> L
  494 -> L
  495 -> L
  496 -> I
  497 -> L
  498 -> L
  499 -> L
  500 -> I
  501 -> L
  502 -> L
  503 -> I
  504 -> L
  505 -> L
  506 -> I
  507 -> L
  508 -> L
  509 -> L
  510 -> I
  511 -> L
  512 -> I
  513 -> L
  514 -> I
  515 -> L
  516 -> L
  517 -> L
  518 -> I
  519 -> L
  520 -> L
  521 -> L
  522 -> I
  523 -> L
  524 -> L
  525 -> L
  526 -> I
  527 -> L
  528 -> I
  529 -> L
  530 -> I
  531 -> L
  532 -> L
  533 -> I
  534 -> L


#####################
# Annotated program #
#####################

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :I Nat.
  
  constructor/1 S :I (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :I (_ :L Nat) -> Type.
  
  constructor/1 FZ :R (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :R (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN :R (a :I Type) -> Vect Z a.
  
  constructor/4 VC :R (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT :I (_ :L Nat) -> Type.
  
  constructor/2 V :R (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam :R (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App :R (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :R (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (x :L TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (g :L TT m) (x :L TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm :R TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 :L TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop :R (n :I Nat) -> (_ :R TT n) -> (_ :L Fin (S n)) -> TT n {
  forall (n :I Nat) (tm :R TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n :I Nat) (tm :R TT n) (i :L Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex :R (m :I Nat) -> (_ :R TT m) -> (_ :R TT m) -> TT m {
    forall (m :I Nat) (y :R TT (S m)) (x :R TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m :I Nat) (f' :R TT m) (x :R TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf :R (m :I Nat) -> (_ :R TT m) -> TT m {
    forall (m :I Nat) (i :R Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m :I Nat) (x :R TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m :I Nat) (f :R TT m) (x :R TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 :L TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor/0 Result :I Type.
  
  constructor/2 R :L (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main :L Result {
  main  ~> R example1 example2
}


##########
# Pruned #
##########

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :I Nat.
  
  constructor/1 S :I (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :I (_ :L Nat) -> Type.
  
  constructor/1 FZ :R (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :R (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN :R (a :I Type) -> Vect Z a.
  
  constructor/4 VC :R (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT :I (_ :L Nat) -> Type.
  
  constructor/2 V :R (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam :R (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App :R (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :R (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (x :L TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (g :L TT m) (x :L TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm :R TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 :L TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop :R (n :I Nat) -> (_ :R TT n) -> (_ :L Fin (S n)) -> TT n {
  forall (n :I Nat) (tm :R TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n :I Nat) (tm :R TT n) (i :L Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex :R (m :I Nat) -> (_ :R TT m) -> (_ :R TT m) -> TT m {
    forall (m :I Nat) (y :R TT (S m)) (x :R TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m :I Nat) (f' :R TT m) (x :R TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf :R (m :I Nat) -> (_ :R TT m) -> TT m {
    forall (m :I Nat) (i :R Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m :I Nat) (x :R TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m :I Nat) (f :R TT m) (x :R TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 :L TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor/0 Result :I Type.
  
  constructor/2 R :L (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main :L Result {
  main  ~> R example1 example2
}

##########
# Erased #
##########

mutual {
  constructor/0 FZ.
  
  constructor/1 FS.
}

mutual {
  constructor/0 VN.
  
  constructor/2 VC.
}

mutual {
  constructor/1 V.
  
  constructor/1 Lam.
  
  constructor/2 App.
}

env {
  forall (x) (xs)
  env (VC x xs) FZ ~> x
  
  forall (x) (xs) (i)
  env (VC x xs) (FS i) ~> env xs i
}

extendMap {
  forall (f)
  extendMap f FZ ~> FZ
  
  forall (f) (i)
  extendMap f (FS i) ~> FS (f i)
}

mapVars {
  forall (f) (i)
  mapVars f (V i) ~> V (f i)
  
  forall (f) (x)
  mapVars f (Lam x) ~> Lam (mapVars (extendMap f) x)
  
  forall (f) (g) (x)
  mapVars f (App g x) ~> App (mapVars f g) (mapVars f x)
}

extendSubst {
  forall (f)
  extendSubst f FZ ~> V FZ
  
  forall (f) (i)
  extendSubst f (FS i) ~> mapVars FS (f i)
}

substVars {
  forall (f) (i)
  substVars f (V i) ~> f i
  
  forall (f) (x)
  substVars f (Lam x) ~> Lam (substVars (extendSubst f) x)
  
  forall (f) (g) (x)
  substVars f (App g x) ~> App (substVars f g) (substVars f x)
}

testTm {
  testTm  ~> App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
}

example1 {
  example1  ~> substVars (env (VC (Lam (V FZ)) VN)) testTm
}

substTop {
  forall (tm)
  substTop tm FZ ~> tm
  
  forall (tm) (i)
  substTop tm (FS i) ~> V i
}

mutual {
  redex {
    forall (y) (x)
    redex (Lam y) x ~> nf (substVars (substTop (nf x)) y)
    
    forall (f') (x)
    redex f' x ~> App f' (nf x)
  }
  
  nf {
    forall (i)
    nf (V i) ~> V i
    
    forall (x)
    nf (Lam x) ~> Lam (nf x)
    
    forall (f) (x)
    nf (App f x) ~> redex f x
  }
}

example2 {
  example2  ~> nf testTm
}

constructor/2 R.

main {
  main  ~> R example1 example2
}

################
# NF of `main` #
################

Unerased, reduced:
R (App Z (Lam Z (App (S Z) (V (S Z) (FZ Z)) (Lam (S Z) (V (S (S Z)) (FZ (S Z)))))) (Lam Z (App (S Z) (Lam (S Z) (V (S (S Z)) (FZ (S Z)))) (V (S Z) (FZ Z))))) (App (S Z) (V (S Z) (FZ Z)) (V (S Z) (FZ Z)))

Erased, reduced:
R (App (Lam (App (V FZ) (Lam (V FZ)))) (Lam (App (Lam (V FZ)) (V FZ)))) (App (V FZ) (V FZ))
