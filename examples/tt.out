#############
# Desugared #
#############

mutual {
  constructor Nat : Type.
  
  constructor Z : Nat.
  
  constructor S : (n : Nat) -> Nat.
}

mutual {
  constructor Fin : (_ : Nat) -> Type.
  
  constructor FZ : (n :I Nat) -> Fin (S n).
  
  constructor FS : (n :I Nat) -> (_ : Fin n) -> Fin (S n).
}

mutual {
  constructor Vect : (_ : Nat) -> (_ : Type) -> Type.
  
  constructor VN : (a :I Type) -> Vect Z a.
  
  constructor VC : (n :I Nat) -> (a :I Type) -> (_ : a) -> (_ : Vect n a) -> Vect (S n) a.
}

mutual {
  constructor TT : (_ : Nat) -> Type.
  
  constructor V : (n :I Nat) -> (_ : Fin n) -> TT n.
  
  constructor Lam : (n :I Nat) -> (_ : TT (S n)) -> TT n.
  
  constructor App : (n :I Nat) -> (_ : TT n) -> (_ : TT n) -> TT n.
}

env : (m : Nat) -> (n : Nat) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (x : TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (g : TT m) (x : TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (x : TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (g : TT m) (x : TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm : TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 : TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop : (n : Nat) -> (_ : TT n) -> (_ : Fin (S n)) -> TT n {
  forall (n : Nat) (tm : TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n : Nat) (tm : TT n) (i : Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex : (m : Nat) -> (_ : TT m) -> (_ : TT m) -> TT m {
    forall (m : Nat) (y : TT (S m)) (x : TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m : Nat) (f' : TT m) (x : TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf : (m : Nat) -> (_ : TT m) -> TT m {
    forall (m : Nat) (i : Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m : Nat) (x : TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m : Nat) (f : TT m) (x : TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 : TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor Result : Type.
  
  constructor R : (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main : Result {
  main  ~> R example1 example2
}
#############
# Evarified #
#############

mutual {
  constructor Nat :E Type.
  
  constructor Z :R Nat.
  
  constructor S :R (n :L Nat) -> Nat.
}

mutual {
  constructor Fin :E (_ :E Nat) -> Type.
  
  constructor FZ :R (n :I Nat) -> Fin (S n).
  
  constructor FS :R (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor Vect :E (_ :E Nat) -> (_ :E Type) -> Type.
  
  constructor VN :R (a :I Type) -> Vect Z a.
  
  constructor VC :R (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor TT :E (_ :E Nat) -> Type.
  
  constructor V :R (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor Lam :R (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor App :R (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :23 (m :24 Nat) -> (n :25 Nat) -> (_ :26 Vect m (TT n)) -> (_ :30 Fin m) -> TT n {
  forall (m :40 Nat) (n :39 Nat) (x :37 TT n) (xs :33 Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :61 Nat) (n :60 Nat) (x :58 TT n) (xs :54 Vect m (TT n)) (i :52 Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :108 (m :109 Nat) -> (n :110 Nat) -> (_ :111 (_ :112 Fin m) -> Fin n) -> (_ :115 Fin (S m)) -> Fin (S n) {
  forall (m :125 Nat) (n :124 Nat) (f :120 (_ :121 Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :139 Nat) (n :138 Nat) (f :134 (_ :135 Fin m) -> Fin n) (i :132 Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :200 (m :201 Nat) -> (n :202 Nat) -> (_ :203 (_ :204 Fin m) -> Fin n) -> (_ :207 TT m) -> TT n {
  forall (m :217 Nat) (n :216 Nat) (f :212 (_ :213 Fin m) -> Fin n) (i :210 Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :235 Nat) (n :234 Nat) (f :230 (_ :231 Fin m) -> Fin n) (x :227 TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :262 Nat) (n :261 Nat) (f :257 (_ :258 Fin m) -> Fin n) (g :255 TT m) (x :253 TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :149 (m :150 Nat) -> (n :151 Nat) -> (_ :152 (_ :153 Fin m) -> TT n) -> (_ :156 Fin (S m)) -> TT (S n) {
  forall (m :166 Nat) (n :165 Nat) (f :161 (_ :162 Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :183 Nat) (n :182 Nat) (f :178 (_ :179 Fin m) -> TT n) (i :176 Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars :390 (m :391 Nat) -> (n :392 Nat) -> (_ :393 (_ :394 Fin m) -> TT n) -> (_ :397 TT m) -> TT n {
  forall (m :407 Nat) (n :406 Nat) (f :402 (_ :403 Fin m) -> TT n) (i :400 Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m :423 Nat) (n :422 Nat) (f :418 (_ :419 Fin m) -> TT n) (x :415 TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m :450 Nat) (n :449 Nat) (f :445 (_ :446 Fin m) -> TT n) (g :443 TT m) (x :441 TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm :469 TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 :78 TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop :363 (n :364 Nat) -> (_ :365 TT n) -> (_ :367 Fin (S n)) -> TT n {
  forall (n :373 Nat) (tm :371 TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n :382 Nat) (tm :380 TT n) (i :378 Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex :321 (m :322 Nat) -> (_ :323 TT m) -> (_ :325 TT m) -> TT m {
    forall (m :333 Nat) (y :330 TT (S m)) (x :328 TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m :354 Nat) (f' :352 TT m) (x :350 TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf :281 (m :282 Nat) -> (_ :283 TT m) -> TT m {
    forall (m :288 Nat) (i :286 Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m :298 Nat) (x :295 TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m :312 Nat) (f :310 TT m) (x :308 TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 :102 TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor Result :E Type.
  
  constructor R :R (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main :197 Result {
  main  ~> R example1 example2
}
inferring  mutual {
    constructor Nat :E Type.
    
    constructor Z :R Nat.
    
    constructor S :R (n :L Nat) -> Nat.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor Nat :E Type.
    
    constructor Z :R Nat.
    
    constructor S :R (n :L Nat) -> Nat.
  }

inferring  mutual {
    constructor Fin :E (_ :E Nat) -> Type.
    
    constructor FZ :R (n :I Nat) -> Fin (S n).
    
    constructor FS :R (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

  inferred constraints: 
    E ~ 6
    L ~ 7
    E ~ 3
    E ~ 4
    L ~ 5
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor Fin :E (_ :E Nat) -> Type.
    
    constructor FZ :R (n :I Nat) -> Fin (S n).
    
    constructor FS :R (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

inferring  mutual {
    constructor Vect :E (_ :E Nat) -> (_ :E Type) -> Type.
    
    constructor VN :R (a :I Type) -> Vect Z a.
    
    constructor VC :R (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

  inferred constraints: 
    E ~ 22
    E ~ 21
    E ~ 17
    E ~ 16
    E ~ 19
    L ~ 20
    E ~ 18
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor Vect :E (_ :E Nat) -> (_ :E Type) -> Type.
    
    constructor VN :R (a :I Type) -> Vect Z a.
    
    constructor VC :R (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

inferring  mutual {
    constructor TT :E (_ :E Nat) -> Type.
    
    constructor V :R (n :I Nat) -> (_ :L Fin n) -> TT n.
    
    constructor Lam :R (n :I Nat) -> (_ :L TT (S n)) -> TT n.
    
    constructor App :R (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
  }

  inferred constraints: 
    E ~ 14
    E ~ 15
    E ~ 8
    L ~ 9
    E ~ 10
    E ~ 0
    E ~ 1
    E ~ 2
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor TT :E (_ :E Nat) -> Type.
    
    constructor V :R (n :I Nat) -> (_ :L Fin n) -> TT n.
    
    constructor Lam :R (n :I Nat) -> (_ :L TT (S n)) -> TT n.
    
    constructor App :R (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
  }

inferring  env :23 (m :24 Nat) -> (n :25 Nat) -> (_ :26 Vect m (TT n)) -> (_ :30 Fin m) -> TT n {
    forall (m :40 Nat) (n :39 Nat) (x :37 TT n) (xs :33 Vect m (TT n))
    env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
    
    forall (m :61 Nat) (n :60 Nat) (x :58 TT n) (xs :54 Vect m (TT n)) (i :52 Fin m)
    env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
  }

  inferred constraints: 
    E ~ 28
    E ~ 27
    E ~ 29
    E ~ 31
    E ~ 32
    E ~ 38
    E ~ 35
    E ~ 34
    E ~ 36
    40 ~ product [I, 30]
    39 ~ product [25]
    37 ~ product [L, 26]
    33 ~ product [L, 26]
    24 ~ 41
    L ~ 42
    25 ~ 43
    26 ~ 44
    product [26] ≥ sum
      product [L]
    I ~ 45
    I ~ 46
    E ~ 47
    L ~ 48
    47 ~ 38
    L ~ 49
    E ~ 34
    E ~ 35
    27 ~ E
    28 ~ E
    42 ~ L
    29 ~ 47
    30 ~ 50
    product [30] ≥ sum
      product [L]
    I ~ 51
    31 ~ E
    42 ~ L
    40 ≥ sum
    39 ≥ sum
    37 ≥ sum
      product []
    33 ≥ sum
    38 ~ 32
    E ~ 59
    E ~ 56
    E ~ 55
    E ~ 57
    E ~ 53
    61 ~ product [I, 30]
    60 ~ product [25]
    58 ~ product [L, 26]
    54 ~ product [L, 26]
    52 ~ product [L, 30]
    24 ~ 62
    L ~ 63
    25 ~ 64
    26 ~ 65
    product [26] ≥ sum
      product [L]
    I ~ 66
    I ~ 67
    E ~ 68
    L ~ 69
    68 ~ 59
    L ~ 70
    E ~ 55
    E ~ 56
    27 ~ E
    28 ~ E
    63 ~ L
    29 ~ 68
    30 ~ 71
    product [30] ≥ sum
      product [L]
    I ~ 72
    L ~ 73
    E ~ 53
    31 ~ E
    63 ~ L
    61 ≥ sum
      product [24]
    60 ≥ sum
      product [25]
    58 ≥ sum
    54 ≥ sum
      product [26]
    52 ≥ sum
      product [30]
    24 ~ 77
    25 ~ 76
    26 ~ 75
    27 ~ 55
    28 ~ 56
    30 ~ 74
    31 ~ 53
    32 ~ 32
  
  deferred equalities: 
    34 -> TT n ~ TT n
    55 -> TT n ~ TT n
    55 -> TT n ~ TT n
  
  variance of evars:
    covariant: []
    contravariant: [24, 25, 26, 30]
  -> iteration 1
    TT n ~ TT n
    TT n ~ TT n
    TT n ~ TT n

  env :I (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
    forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n))
    env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
    
    forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m)
    env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
  }

inferring  extendMap :108 (m :109 Nat) -> (n :110 Nat) -> (_ :111 (_ :112 Fin m) -> Fin n) -> (_ :115 Fin (S m)) -> Fin (S n) {
    forall (m :125 Nat) (n :124 Nat) (f :120 (_ :121 Fin m) -> Fin n)
    extendMap m n f (FZ [m]) ~> FZ n
    
    forall (m :139 Nat) (n :138 Nat) (f :134 (_ :135 Fin m) -> Fin n) (i :132 Fin m)
    extendMap m n f (FS [m] i) ~> FS n (f i)
  }

  inferred constraints: 
    E ~ 113
    E ~ 114
    E ~ 116
    L ~ 117
    E ~ 118
    L ~ 119
    E ~ 122
    E ~ 123
    125 ~ product [109]
    124 ~ product [110]
    120 ~ product [111]
    109 ~ 126
    110 ~ 127
    111 ~ 128
    112 ~ 121
    113 ~ 122
    114 ~ 123
    115 ~ 129
    product [115] ≥ sum
      product [L]
    I ~ 130
    116 ~ E
    117 ~ L
    125 ≥ sum
    124 ≥ sum
      product [I]
    120 ≥ sum
    I ~ 131
    E ~ 118
    E ~ 136
    E ~ 137
    E ~ 133
    139 ~ product [109]
    138 ~ product [110]
    134 ~ product [111]
    132 ~ product [L, 115]
    109 ~ 140
    110 ~ 141
    111 ~ 142
    112 ~ 135
    113 ~ 136
    114 ~ 137
    115 ~ 143
    product [115] ≥ sum
      product [L]
    I ~ 144
    L ~ 145
    E ~ 133
    116 ~ E
    117 ~ L
    139 ≥ sum
    138 ≥ sum
      product [I]
    134 ≥ sum
      product [L]
    132 ≥ sum
      product [135, L]
    I ~ 147
    L ~ 146
    135 ~ 148
    136 ~ 133
    E ~ 137
    E ~ 118
  
  deferred equalities: 
    118 -> S n ~ S n
    118 -> S n ~ S n
  
  variance of evars:
    covariant: [112]
    contravariant: [109, 110, 111, 115]
  -> iteration 1
    S n ~ S n
    S n ~ S n

  extendMap :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n)
    extendMap m n f (FZ [m]) ~> FZ n
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
    extendMap m n f (FS [m] i) ~> FS n (f i)
  }

inferring  mapVars :200 (m :201 Nat) -> (n :202 Nat) -> (_ :203 (_ :204 Fin m) -> Fin n) -> (_ :207 TT m) -> TT n {
    forall (m :217 Nat) (n :216 Nat) (f :212 (_ :213 Fin m) -> Fin n) (i :210 Fin m)
    mapVars m n f (V [m] i) ~> V n (f i)
    
    forall (m :235 Nat) (n :234 Nat) (f :230 (_ :231 Fin m) -> Fin n) (x :227 TT (S m))
    mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
    
    forall (m :262 Nat) (n :261 Nat) (f :257 (_ :258 Fin m) -> Fin n) (g :255 TT m) (x :253 TT m)
    mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
  }

  inferred constraints: 
    E ~ 205
    E ~ 206
    E ~ 208
    E ~ 209
    E ~ 214
    E ~ 215
    E ~ 211
    217 ~ product [201]
    216 ~ product [202]
    212 ~ product [203]
    210 ~ product [L, 207]
    201 ~ 218
    202 ~ 219
    203 ~ 220
    204 ~ 213
    205 ~ 214
    206 ~ 215
    207 ~ 221
    product [207] ≥ sum
      product [L]
    I ~ 222
    L ~ 223
    E ~ 211
    208 ~ E
    217 ≥ sum
    216 ≥ sum
      product [I]
    212 ≥ sum
      product [L]
    210 ≥ sum
      product [213, L]
    I ~ 225
    L ~ 224
    213 ~ 226
    214 ~ 211
    E ~ 215
    E ~ 209
    E ~ 232
    E ~ 233
    E ~ 228
    L ~ 229
    235 ~ product [201]
    234 ~ product [202]
    230 ~ product [203]
    227 ~ product [L, 207]
    201 ~ 236
    202 ~ 237
    203 ~ 238
    204 ~ 231
    205 ~ 232
    206 ~ 233
    207 ~ 239
    product [207] ≥ sum
      product [L]
    I ~ 240
    L ~ 241
    E ~ 228
    208 ~ E
    235 ≥ sum
      product [L, 201, L]
      product [I, 203, L]
    234 ≥ sum
      product [I]
      product [L, 202, L]
      product [I, 203, L]
    230 ≥ sum
      product [R, 203, L]
    227 ≥ sum
      product [207, L]
    I ~ 243
    L ~ 242
    201 ~ 247
    L ~ 248
    202 ~ 246
    L ~ 249
    203 ~ 245
    I ~ 252
    I ~ 251
    R ~ 250
    L ~ 231
    E ~ 232
    E ~ 233
    204 ~ L
    205 ~ E
    248 ~ L
    206 ~ E
    249 ~ L
    207 ~ 244
    208 ~ 228
    E ~ 209
    E ~ 209
    E ~ 259
    E ~ 260
    E ~ 256
    E ~ 254
    262 ~ product [201]
    261 ~ product [202]
    257 ~ product [203]
    255 ~ product [L, 207]
    253 ~ product [L, 207]
    201 ~ 263
    202 ~ 264
    203 ~ 265
    204 ~ 258
    205 ~ 259
    206 ~ 260
    207 ~ 266
    product [207] ≥ sum
      product [L]
    I ~ 267
    L ~ 268
    E ~ 256
    L ~ 269
    E ~ 254
    208 ~ E
    262 ≥ sum
      product [201, L]
      product [201, L]
    261 ≥ sum
      product [I]
      product [202, L]
      product [202, L]
    257 ≥ sum
      product [203, L]
      product [203, L]
    255 ≥ sum
      product [207, L]
    253 ≥ sum
      product [207, L]
    I ~ 272
    L ~ 271
    201 ~ 276
    202 ~ 275
    203 ~ 274
    204 ~ 258
    205 ~ 259
    206 ~ 260
    207 ~ 273
    208 ~ 256
    E ~ 209
    L ~ 270
    201 ~ 280
    202 ~ 279
    203 ~ 278
    204 ~ 258
    205 ~ 259
    206 ~ 260
    207 ~ 277
    208 ~ 254
    E ~ 209
    E ~ 209
  
  deferred equalities: 
    228 -> S m ~ S m
    228 -> S m ~ S m
    209 -> S n ~ S n
  
  variance of evars:
    covariant: [204]
    contravariant: [201, 202, 203, 207]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S n ~ S n

  mapVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
    mapVars m n f (V [m] i) ~> V n (f i)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m))
    mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m)
    mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
  }

inferring  extendSubst :149 (m :150 Nat) -> (n :151 Nat) -> (_ :152 (_ :153 Fin m) -> TT n) -> (_ :156 Fin (S m)) -> TT (S n) {
    forall (m :166 Nat) (n :165 Nat) (f :161 (_ :162 Fin m) -> TT n)
    extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
    
    forall (m :183 Nat) (n :182 Nat) (f :178 (_ :179 Fin m) -> TT n) (i :176 Fin m)
    extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
  }

  inferred constraints: 
    E ~ 154
    E ~ 155
    E ~ 157
    L ~ 158
    E ~ 159
    L ~ 160
    E ~ 163
    E ~ 164
    166 ~ product [150]
    165 ~ product [151]
    161 ~ product [152]
    150 ~ 167
    151 ~ 168
    152 ~ 169
    153 ~ 162
    154 ~ 163
    155 ~ 164
    156 ~ 170
    product [156] ≥ sum
      product [L]
    I ~ 171
    157 ~ E
    158 ~ L
    166 ≥ sum
    165 ≥ sum
      product [L, I]
      product [I, L]
    161 ≥ sum
    I ~ 173
    L ~ 174
    L ~ 172
    I ~ 175
    174 ~ L
    E ~ 159
    E ~ 180
    E ~ 181
    E ~ 177
    183 ~ product [150]
    182 ~ product [151]
    178 ~ product [152]
    176 ~ product [L, 156]
    150 ~ 184
    151 ~ 185
    152 ~ 186
    153 ~ 179
    154 ~ 180
    155 ~ 181
    156 ~ 187
    product [156] ≥ sum
      product [L]
    I ~ 188
    L ~ 189
    E ~ 177
    157 ~ E
    158 ~ L
    183 ≥ sum
    182 ≥ sum
      product [I]
      product [L, I]
      product [I, R]
    178 ≥ sum
      product [L]
    176 ≥ sum
      product [179, L]
    I ~ 193
    I ~ 192
    L ~ 194
    R ~ 191
    I ~ 195
    194 ~ L
    L ~ 190
    179 ~ 196
    180 ~ 177
    E ~ 181
    E ~ 159
  
  deferred equalities: 
    159 -> S n ~ S n
    159 -> S n ~ S n
  
  variance of evars:
    covariant: [153]
    contravariant: [150, 151, 152, 156]
  -> iteration 1
    S n ~ S n
    S n ~ S n

  extendSubst :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n)
    extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
    extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
  }

inferring  substVars :390 (m :391 Nat) -> (n :392 Nat) -> (_ :393 (_ :394 Fin m) -> TT n) -> (_ :397 TT m) -> TT n {
    forall (m :407 Nat) (n :406 Nat) (f :402 (_ :403 Fin m) -> TT n) (i :400 Fin m)
    substVars m n f (V [m] i) ~> f i
    
    forall (m :423 Nat) (n :422 Nat) (f :418 (_ :419 Fin m) -> TT n) (x :415 TT (S m))
    substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
    
    forall (m :450 Nat) (n :449 Nat) (f :445 (_ :446 Fin m) -> TT n) (g :443 TT m) (x :441 TT m)
    substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
  }

  inferred constraints: 
    E ~ 395
    E ~ 396
    E ~ 398
    E ~ 399
    E ~ 404
    E ~ 405
    E ~ 401
    407 ~ product [391]
    406 ~ product [392]
    402 ~ product [393]
    400 ~ product [L, 397]
    391 ~ 408
    392 ~ 409
    393 ~ 410
    394 ~ 403
    395 ~ 404
    396 ~ 405
    397 ~ 411
    product [397] ≥ sum
      product [L]
    I ~ 412
    L ~ 413
    E ~ 401
    398 ~ E
    407 ≥ sum
    406 ≥ sum
    402 ≥ sum
      product []
    400 ≥ sum
      product [403]
    403 ~ 414
    404 ~ 401
    405 ~ 399
    E ~ 420
    E ~ 421
    E ~ 416
    L ~ 417
    423 ~ product [391]
    422 ~ product [392]
    418 ~ product [393]
    415 ~ product [L, 397]
    391 ~ 424
    392 ~ 425
    393 ~ 426
    394 ~ 419
    395 ~ 420
    396 ~ 421
    397 ~ 427
    product [397] ≥ sum
      product [L]
    I ~ 428
    L ~ 429
    E ~ 416
    398 ~ E
    423 ≥ sum
      product [L, 391, L]
      product [I, 393, L]
    422 ≥ sum
      product [I]
      product [L, 392, L]
      product [I, 393, L]
    418 ≥ sum
      product [R, 393, L]
    415 ≥ sum
      product [397, L]
    I ~ 431
    L ~ 430
    391 ~ 435
    L ~ 436
    392 ~ 434
    L ~ 437
    393 ~ 433
    I ~ 440
    I ~ 439
    R ~ 438
    L ~ 419
    E ~ 420
    E ~ 421
    394 ~ L
    395 ~ E
    436 ~ L
    396 ~ E
    437 ~ L
    397 ~ 432
    398 ~ 416
    E ~ 399
    E ~ 399
    E ~ 447
    E ~ 448
    E ~ 444
    E ~ 442
    450 ~ product [391]
    449 ~ product [392]
    445 ~ product [393]
    443 ~ product [L, 397]
    441 ~ product [L, 397]
    391 ~ 451
    392 ~ 452
    393 ~ 453
    394 ~ 446
    395 ~ 447
    396 ~ 448
    397 ~ 454
    product [397] ≥ sum
      product [L]
    I ~ 455
    L ~ 456
    E ~ 444
    L ~ 457
    E ~ 442
    398 ~ E
    450 ≥ sum
      product [391, L]
      product [391, L]
    449 ≥ sum
      product [I]
      product [392, L]
      product [392, L]
    445 ≥ sum
      product [393, L]
      product [393, L]
    443 ≥ sum
      product [397, L]
    441 ≥ sum
      product [397, L]
    I ~ 460
    L ~ 459
    391 ~ 464
    392 ~ 463
    393 ~ 462
    394 ~ 446
    395 ~ 447
    396 ~ 448
    397 ~ 461
    398 ~ 444
    E ~ 399
    L ~ 458
    391 ~ 468
    392 ~ 467
    393 ~ 466
    394 ~ 446
    395 ~ 447
    396 ~ 448
    397 ~ 465
    398 ~ 442
    E ~ 399
    E ~ 399
  
  deferred equalities: 
    416 -> S m ~ S m
    416 -> S m ~ S m
    399 -> S n ~ S n
  
  variance of evars:
    covariant: [394]
    contravariant: [391, 392, 393, 397]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S n ~ S n

  substVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L TT m) -> TT n {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
    substVars m n f (V [m] i) ~> f i
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (x :L TT (S m))
    substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (g :L TT m) (x :L TT m)
    substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
  }

inferring  testTm :469 TT (S Z) {
    testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
  }

  inferred constraints: 
    E ~ 470
    L ~ 471
    I ~ 474
    L ~ 475
    L ~ 473
    I ~ 477
    L ~ 478
    L ~ 476
    I ~ 481
    L ~ 482
    L ~ 483
    L ~ 480
    I ~ 485
    L ~ 486
    L ~ 487
    L ~ 484
    I ~ 488
    L ~ 489
    486 ~ L
    487 ~ 489
    482 ~ 486
    L ~ 479
    I ~ 491
    L ~ 492
    L ~ 493
    L ~ 490
    I ~ 495
    L ~ 496
    L ~ 494
    I ~ 497
    496 ~ L
    492 ~ L
    493 ~ 496
    482 ~ 492
    L ~ 482
    475 ~ 478
    L ~ 472
    I ~ 499
    L ~ 500
    L ~ 498
    I ~ 503
    L ~ 504
    L ~ 505
    L ~ 502
    I ~ 507
    L ~ 508
    L ~ 509
    L ~ 506
    I ~ 511
    L ~ 512
    L ~ 510
    I ~ 513
    512 ~ L
    508 ~ L
    509 ~ 512
    504 ~ 508
    L ~ 501
    I ~ 515
    L ~ 516
    L ~ 517
    L ~ 514
    I ~ 518
    L ~ 519
    516 ~ L
    517 ~ 519
    504 ~ 516
    L ~ 504
    475 ~ 500
    E ~ 470
  
  deferred equalities: 
    486 -> S Z ~ S Z
    492 -> S Z ~ S Z
    482 -> S Z ~ S Z
    508 -> S Z ~ S Z
    516 -> S Z ~ S Z
    504 -> S Z ~ S Z
    470 -> S Z ~ S Z
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z
    S Z ~ S Z

  testTm :I TT (S Z) {
    testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
  }

inferring  example1 :78 TT Z {
    example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
  }

  inferred constraints: 
    E ~ 79
    I ~ 83
    L ~ 84
    I ~ 82
    R ~ 81
    I ~ 87
    L ~ 88
    I ~ 86
    R ~ 85
    I ~ 92
    I ~ 91
    E ~ 93
    L ~ 90
    I ~ 95
    L ~ 94
    I ~ 97
    L ~ 98
    L ~ 96
    I ~ 99
    98 ~ L
    L ~ 98
    93 ~ E
    L ~ 89
    I ~ 100
    E ~ 101
    93 ~ 101
    88 ~ L
    E ~ 93
    84 ~ 88
    L ~ 80
    84 ~ L
    E ~ 79
  
  
  variance of evars:
    covariant: []
    contravariant: []
  example1 :I TT Z {
    example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
  }

inferring  substTop :363 (n :364 Nat) -> (_ :365 TT n) -> (_ :367 Fin (S n)) -> TT n {
    forall (n :373 Nat) (tm :371 TT n)
    substTop n tm (FZ [n]) ~> tm
    
    forall (n :382 Nat) (tm :380 TT n) (i :378 Fin n)
    substTop n tm (FS [n] i) ~> V n i
  }

  inferred constraints: 
    E ~ 366
    E ~ 368
    L ~ 369
    E ~ 370
    E ~ 372
    373 ~ product [364]
    371 ~ product [365]
    364 ~ 374
    365 ~ 375
    366 ~ 372
    367 ~ 376
    product [367] ≥ sum
      product [L]
    I ~ 377
    368 ~ E
    369 ~ L
    373 ≥ sum
    371 ≥ sum
      product []
    372 ~ 370
    E ~ 381
    E ~ 379
    382 ~ product [364]
    380 ~ product [365]
    378 ~ product [L, 367]
    364 ~ 383
    365 ~ 384
    366 ~ 381
    367 ~ 385
    product [367] ≥ sum
      product [L]
    I ~ 386
    L ~ 387
    E ~ 379
    368 ~ E
    369 ~ L
    382 ≥ sum
      product [I]
    380 ≥ sum
    378 ≥ sum
      product [L]
    I ~ 389
    L ~ 388
    E ~ 379
    E ~ 370
  
  
  variance of evars:
    covariant: []
    contravariant: [364, 365, 367]
  substTop :I (n :I Nat) -> (_ :R TT n) -> (_ :L Fin (S n)) -> TT n {
    forall (n :I Nat) (tm :R TT n)
    substTop n tm (FZ [n]) ~> tm
    
    forall (n :I Nat) (tm :R TT n) (i :L Fin n)
    substTop n tm (FS [n] i) ~> V n i
  }

inferring  mutual {
    redex :321 (m :322 Nat) -> (_ :323 TT m) -> (_ :325 TT m) -> TT m {
      forall (m :333 Nat) (y :330 TT (S m)) (x :328 TT m)
      redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
      
      forall (m :354 Nat) (f' :352 TT m) (x :350 TT m)
      redex m f' x ~> App m f' (nf m x)
    }
    
    nf :281 (m :282 Nat) -> (_ :283 TT m) -> TT m {
      forall (m :288 Nat) (i :286 Fin m)
      nf m (V [m] i) ~> V m i
      
      forall (m :298 Nat) (x :295 TT (S m))
      nf m (Lam [m] x) ~> Lam m (nf (S m) x)
      
      forall (m :312 Nat) (f :310 TT m) (x :308 TT m)
      nf m (App [m] f x) ~> redex m f x
    }
  }

  inferred constraints: 
    E ~ 324
    E ~ 326
    E ~ 327
    E ~ 331
    L ~ 332
    E ~ 329
    333 ~ product [322]
    330 ~ product [L, 323]
    328 ~ product [325]
    322 ~ 334
    323 ~ 335
    product [323] ≥ sum
      product [L]
    I ~ 336
    L ~ 337
    E ~ 331
    324 ~ E
    325 ~ 338
    326 ~ 329
    333 ≥ sum
      product [282]
      product [L, I, 283]
      product [I, 283]
      product [I, R, 283]
      product [282, R, R, 283]
    330 ≥ sum
      product [L, 283]
    328 ≥ sum
      product [283, R, R, 283]
    282 ~ 340
    283 ~ 339
    I ~ 344
    L ~ 345
    I ~ 343
    R ~ 342
    I ~ 347
    R ~ 346
    282 ~ 349
    283 ~ 348
    284 ~ 329
    E ~ 285
    345 ~ L
    L ~ 341
    E ~ 331
    284 ~ E
    285 ~ 327
    E ~ 353
    E ~ 351
    354 ~ product [322]
    352 ~ product [323]
    350 ~ product [325]
    322 ~ 355
    323 ~ 356
    324 ~ 353
    325 ~ 357
    326 ~ 351
    354 ≥ sum
      product [I]
      product [282, L]
    352 ≥ sum
      product [L]
    350 ≥ sum
      product [283, L]
    I ~ 360
    L ~ 359
    E ~ 353
    L ~ 358
    282 ~ 362
    283 ~ 361
    284 ~ 351
    E ~ 285
    E ~ 327
    E ~ 284
    E ~ 285
    E ~ 287
    288 ~ product [282]
    286 ~ product [L, 283]
    282 ~ 289
    283 ~ 290
    product [283] ≥ sum
      product [L]
    I ~ 291
    L ~ 292
    E ~ 287
    284 ~ E
    288 ≥ sum
      product [I]
    286 ≥ sum
      product [L]
    I ~ 294
    L ~ 293
    E ~ 287
    E ~ 285
    E ~ 296
    L ~ 297
    298 ~ product [282]
    295 ~ product [L, 283]
    282 ~ 299
    283 ~ 300
    product [283] ≥ sum
      product [L]
    I ~ 301
    L ~ 302
    E ~ 296
    284 ~ E
    298 ≥ sum
      product [I]
      product [L, 282, L]
    295 ≥ sum
      product [283, L]
    I ~ 304
    L ~ 303
    282 ~ 306
    L ~ 307
    283 ~ 305
    284 ~ 296
    E ~ 285
    E ~ 285
    E ~ 311
    E ~ 309
    312 ~ product [282]
    310 ~ product [L, 283]
    308 ~ product [L, 283]
    282 ~ 313
    283 ~ 314
    product [283] ≥ sum
      product [L]
    I ~ 315
    L ~ 316
    E ~ 311
    L ~ 317
    E ~ 309
    284 ~ E
    312 ≥ sum
      product [322]
    310 ≥ sum
      product [323]
    308 ≥ sum
      product [325]
    322 ~ 320
    323 ~ 319
    324 ~ 311
    325 ~ 318
    326 ~ 309
    327 ~ 285
  
  deferred equalities: 
    331 -> S m ~ S m
    331 -> S m ~ S m
    296 -> S m ~ S m
    296 -> S m ~ S m
    285 -> S m ~ S m
  
  variance of evars:
    covariant: []
    contravariant: [282, 283, 322, 323, 325]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S m ~ S m
    S m ~ S m
    S m ~ S m

  mutual {
    redex :I (m :I Nat) -> (_ :R TT m) -> (_ :R TT m) -> TT m {
      forall (m :I Nat) (y :R TT (S m)) (x :R TT m)
      redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
      
      forall (m :I Nat) (f' :R TT m) (x :R TT m)
      redex m f' x ~> App m f' (nf m x)
    }
    
    nf :I (m :I Nat) -> (_ :R TT m) -> TT m {
      forall (m :I Nat) (i :R Fin m)
      nf m (V [m] i) ~> V m i
      
      forall (m :I Nat) (x :R TT (S m))
      nf m (Lam [m] x) ~> Lam m (nf (S m) x)
      
      forall (m :I Nat) (f :R TT m) (x :R TT m)
      nf m (App [m] f x) ~> redex m f x
    }
  }

inferring  example2 :102 TT (S Z) {
    example2  ~> nf (S Z) testTm
  }

  inferred constraints: 
    E ~ 103
    L ~ 104
    I ~ 106
    L ~ 107
    R ~ 105
    107 ~ L
    E ~ 103
  
  deferred equalities: 
    103 -> S Z ~ S Z
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    S Z ~ S Z

  example2 :I TT (S Z) {
    example2  ~> nf (S Z) testTm
  }

inferring  mutual {
    constructor Result :E Type.
    
    constructor R :R (x :L TT Z) -> (y :L TT (S Z)) -> Result.
  }

  inferred constraints: 
    E ~ 11
    E ~ 12
    L ~ 13
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor Result :E Type.
    
    constructor R :R (x :L TT Z) -> (y :L TT (S Z)) -> Result.
  }

inferring  main :197 Result {
    main  ~> R example1 example2
  }

  inferred constraints: 
    L ~ 199
    L ~ 198
  
  
  variance of evars:
    covariant: []
    contravariant: []
  main :I Result {
    main  ~> R example1 example2
  }

###################
# Final valuation #
###################

  0 -> E
  1 -> E
  2 -> E
  3 -> E
  4 -> E
  5 -> L
  6 -> E
  7 -> L
  8 -> E
  9 -> L
  10 -> E
  11 -> E
  12 -> E
  13 -> L
  14 -> E
  15 -> E
  16 -> E
  17 -> E
  18 -> E
  19 -> E
  20 -> L
  21 -> E
  22 -> E
  23 -> R
  24 -> I
  25 -> I
  26 -> R
  27 -> E
  28 -> E
  29 -> E
  30 -> L
  31 -> E
  32 -> E
  33 -> R
  34 -> E
  35 -> E
  36 -> E
  37 -> R
  38 -> E
  39 -> I
  40 -> I
  41 -> I
  42 -> L
  43 -> I
  44 -> R
  45 -> I
  46 -> I
  47 -> E
  48 -> L
  49 -> L
  50 -> L
  51 -> I
  52 -> L
  53 -> E
  54 -> R
  55 -> E
  56 -> E
  57 -> E
  58 -> R
  59 -> E
  60 -> I
  61 -> I
  62 -> I
  63 -> L
  64 -> I
  65 -> R
  66 -> I
  67 -> I
  68 -> E
  69 -> L
  70 -> L
  71 -> L
  72 -> I
  73 -> L
  74 -> L
  75 -> R
  76 -> I
  77 -> I
  78 -> L
  79 -> E
  80 -> L
  81 -> R
  82 -> I
  83 -> I
  84 -> L
  85 -> R
  86 -> I
  87 -> I
  88 -> L
  89 -> L
  90 -> L
  91 -> I
  92 -> I
  93 -> E
  94 -> L
  95 -> I
  96 -> L
  97 -> I
  98 -> L
  99 -> I
  100 -> I
  101 -> E
  102 -> L
  103 -> E
  104 -> L
  105 -> R
  106 -> I
  107 -> L
  108 -> R
  109 -> I
  110 -> I
  111 -> R
  112 -> L
  113 -> E
  114 -> E
  115 -> L
  116 -> E
  117 -> L
  118 -> E
  119 -> L
  120 -> R
  121 -> L
  122 -> E
  123 -> E
  124 -> I
  125 -> I
  126 -> I
  127 -> I
  128 -> R
  129 -> L
  130 -> I
  131 -> I
  132 -> L
  133 -> E
  134 -> R
  135 -> L
  136 -> E
  137 -> E
  138 -> I
  139 -> I
  140 -> I
  141 -> I
  142 -> R
  143 -> L
  144 -> I
  145 -> L
  146 -> L
  147 -> I
  148 -> L
  149 -> R
  150 -> I
  151 -> I
  152 -> R
  153 -> L
  154 -> E
  155 -> E
  156 -> L
  157 -> E
  158 -> L
  159 -> E
  160 -> L
  161 -> R
  162 -> L
  163 -> E
  164 -> E
  165 -> I
  166 -> I
  167 -> I
  168 -> I
  169 -> R
  170 -> L
  171 -> I
  172 -> L
  173 -> I
  174 -> L
  175 -> I
  176 -> L
  177 -> E
  178 -> R
  179 -> L
  180 -> E
  181 -> E
  182 -> I
  183 -> I
  184 -> I
  185 -> I
  186 -> R
  187 -> L
  188 -> I
  189 -> L
  190 -> L
  191 -> R
  192 -> I
  193 -> I
  194 -> L
  195 -> I
  196 -> L
  197 -> L
  198 -> L
  199 -> L
  200 -> R
  201 -> I
  202 -> I
  203 -> R
  204 -> L
  205 -> E
  206 -> E
  207 -> L
  208 -> E
  209 -> E
  210 -> L
  211 -> E
  212 -> R
  213 -> L
  214 -> E
  215 -> E
  216 -> I
  217 -> I
  218 -> I
  219 -> I
  220 -> R
  221 -> L
  222 -> I
  223 -> L
  224 -> L
  225 -> I
  226 -> L
  227 -> L
  228 -> E
  229 -> L
  230 -> R
  231 -> L
  232 -> E
  233 -> E
  234 -> I
  235 -> I
  236 -> I
  237 -> I
  238 -> R
  239 -> L
  240 -> I
  241 -> L
  242 -> L
  243 -> I
  244 -> L
  245 -> R
  246 -> I
  247 -> I
  248 -> L
  249 -> L
  250 -> R
  251 -> I
  252 -> I
  253 -> L
  254 -> E
  255 -> L
  256 -> E
  257 -> R
  258 -> L
  259 -> E
  260 -> E
  261 -> I
  262 -> I
  263 -> I
  264 -> I
  265 -> R
  266 -> L
  267 -> I
  268 -> L
  269 -> L
  270 -> L
  271 -> L
  272 -> I
  273 -> L
  274 -> R
  275 -> I
  276 -> I
  277 -> L
  278 -> R
  279 -> I
  280 -> I
  281 -> R
  282 -> I
  283 -> R
  284 -> E
  285 -> E
  286 -> R
  287 -> E
  288 -> I
  289 -> I
  290 -> R
  291 -> I
  292 -> L
  293 -> L
  294 -> I
  295 -> R
  296 -> E
  297 -> L
  298 -> I
  299 -> I
  300 -> R
  301 -> I
  302 -> L
  303 -> L
  304 -> I
  305 -> R
  306 -> I
  307 -> L
  308 -> R
  309 -> E
  310 -> R
  311 -> E
  312 -> I
  313 -> I
  314 -> R
  315 -> I
  316 -> L
  317 -> L
  318 -> R
  319 -> R
  320 -> I
  321 -> R
  322 -> I
  323 -> R
  324 -> E
  325 -> R
  326 -> E
  327 -> E
  328 -> R
  329 -> E
  330 -> R
  331 -> E
  332 -> L
  333 -> I
  334 -> I
  335 -> R
  336 -> I
  337 -> L
  338 -> R
  339 -> R
  340 -> I
  341 -> L
  342 -> R
  343 -> I
  344 -> I
  345 -> L
  346 -> R
  347 -> I
  348 -> R
  349 -> I
  350 -> R
  351 -> E
  352 -> R
  353 -> E
  354 -> I
  355 -> I
  356 -> R
  357 -> R
  358 -> L
  359 -> L
  360 -> I
  361 -> R
  362 -> I
  363 -> R
  364 -> I
  365 -> R
  366 -> E
  367 -> L
  368 -> E
  369 -> L
  370 -> E
  371 -> R
  372 -> E
  373 -> I
  374 -> I
  375 -> R
  376 -> L
  377 -> I
  378 -> L
  379 -> E
  380 -> R
  381 -> E
  382 -> I
  383 -> I
  384 -> R
  385 -> L
  386 -> I
  387 -> L
  388 -> L
  389 -> I
  390 -> R
  391 -> I
  392 -> I
  393 -> R
  394 -> L
  395 -> E
  396 -> E
  397 -> L
  398 -> E
  399 -> E
  400 -> L
  401 -> E
  402 -> R
  403 -> L
  404 -> E
  405 -> E
  406 -> I
  407 -> I
  408 -> I
  409 -> I
  410 -> R
  411 -> L
  412 -> I
  413 -> L
  414 -> L
  415 -> L
  416 -> E
  417 -> L
  418 -> R
  419 -> L
  420 -> E
  421 -> E
  422 -> I
  423 -> I
  424 -> I
  425 -> I
  426 -> R
  427 -> L
  428 -> I
  429 -> L
  430 -> L
  431 -> I
  432 -> L
  433 -> R
  434 -> I
  435 -> I
  436 -> L
  437 -> L
  438 -> R
  439 -> I
  440 -> I
  441 -> L
  442 -> E
  443 -> L
  444 -> E
  445 -> R
  446 -> L
  447 -> E
  448 -> E
  449 -> I
  450 -> I
  451 -> I
  452 -> I
  453 -> R
  454 -> L
  455 -> I
  456 -> L
  457 -> L
  458 -> L
  459 -> L
  460 -> I
  461 -> L
  462 -> R
  463 -> I
  464 -> I
  465 -> L
  466 -> R
  467 -> I
  468 -> I
  469 -> R
  470 -> E
  471 -> L
  472 -> L
  473 -> L
  474 -> I
  475 -> L
  476 -> L
  477 -> I
  478 -> L
  479 -> L
  480 -> L
  481 -> I
  482 -> L
  483 -> L
  484 -> L
  485 -> I
  486 -> L
  487 -> L
  488 -> I
  489 -> L
  490 -> L
  491 -> I
  492 -> L
  493 -> L
  494 -> L
  495 -> I
  496 -> L
  497 -> I
  498 -> L
  499 -> I
  500 -> L
  501 -> L
  502 -> L
  503 -> I
  504 -> L
  505 -> L
  506 -> L
  507 -> I
  508 -> L
  509 -> L
  510 -> L
  511 -> I
  512 -> L
  513 -> I
  514 -> L
  515 -> I
  516 -> L
  517 -> L
  518 -> I
  519 -> L

#####################
# Annotated program #
#####################

mutual {
  constructor Nat :E Type.
  
  constructor Z :R Nat.
  
  constructor S :R (n :L Nat) -> Nat.
}

mutual {
  constructor Fin :E (_ :E Nat) -> Type.
  
  constructor FZ :R (n :I Nat) -> Fin (S n).
  
  constructor FS :R (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor Vect :E (_ :E Nat) -> (_ :E Type) -> Type.
  
  constructor VN :R (a :I Type) -> Vect Z a.
  
  constructor VC :R (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor TT :E (_ :E Nat) -> Type.
  
  constructor V :R (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor Lam :R (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor App :R (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :R (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m)
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m))
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m)
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars :R (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m)
  substVars m n f (V [m] i) ~> f i
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (x :L TT (S m))
  substVars m n f (Lam [m] x) ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (g :L TT m) (x :L TT m)
  substVars m n f (App [m] g x) ~> App n (substVars m n f g) (substVars m n f x)
}

testTm :R TT (S Z) {
  testTm  ~> App (S Z) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FZ (S Z))) (V (S (S Z)) (FS (S Z) (FZ Z))))) (Lam (S Z) (App (S (S Z)) (V (S (S Z)) (FS (S Z) (FZ Z))) (V (S (S Z)) (FZ (S Z)))))
}

example1 :L TT Z {
  example1  ~> substVars (S Z) Z (env (S Z) Z (VC Z (TT Z) (Lam Z (V (S Z) (FZ Z))) (VN (TT Z)))) testTm
}

substTop :R (n :I Nat) -> (_ :R TT n) -> (_ :L Fin (S n)) -> TT n {
  forall (n :I Nat) (tm :R TT n)
  substTop n tm (FZ [n]) ~> tm
  
  forall (n :I Nat) (tm :R TT n) (i :L Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

mutual {
  redex :R (m :I Nat) -> (_ :R TT m) -> (_ :R TT m) -> TT m {
    forall (m :I Nat) (y :R TT (S m)) (x :R TT m)
    redex m (Lam [m] y) x ~> nf m (substVars (S m) m (substTop m (nf m x)) y)
    
    forall (m :I Nat) (f' :R TT m) (x :R TT m)
    redex m f' x ~> App m f' (nf m x)
  }
  
  nf :R (m :I Nat) -> (_ :R TT m) -> TT m {
    forall (m :I Nat) (i :R Fin m)
    nf m (V [m] i) ~> V m i
    
    forall (m :I Nat) (x :R TT (S m))
    nf m (Lam [m] x) ~> Lam m (nf (S m) x)
    
    forall (m :I Nat) (f :R TT m) (x :R TT m)
    nf m (App [m] f x) ~> redex m f x
  }
}

example2 :L TT (S Z) {
  example2  ~> nf (S Z) testTm
}

mutual {
  constructor Result :E Type.
  
  constructor R :R (x :L TT Z) -> (y :L TT (S Z)) -> Result.
}

main :L Result {
  main  ~> R example1 example2
}
##########
# Erased #
##########

mutual {
  constructor Z : Nat.
  
  constructor S : (n) -> Nat.
}

mutual {
  constructor FZ : Fin.
  
  constructor FS : (_) -> Fin.
}

mutual {
  constructor VN : Vect.
  
  constructor VC : (_) -> (_) -> Vect.
}

mutual {
  constructor V : (_) -> TT.
  
  constructor Lam : (_) -> TT.
  
  constructor App : (_) -> (_) -> TT.
}

env : (_) -> (_) -> TT {
  forall (x) (xs)
  env (VC x xs) FZ ~> x
  
  forall (x) (xs) (i)
  env (VC x xs) (FS i) ~> env xs i
}

extendMap : (_) -> (_) -> Fin {
  forall (f)
  extendMap f FZ ~> FZ
  
  forall (f) (i)
  extendMap f (FS i) ~> FS (f i)
}

mapVars : (_) -> (_) -> TT {
  forall (f) (i)
  mapVars f (V i) ~> V (f i)
  
  forall (f) (x)
  mapVars f (Lam x) ~> Lam (mapVars (extendMap f) x)
  
  forall (f) (g) (x)
  mapVars f (App g x) ~> App (mapVars f g) (mapVars f x)
}

extendSubst : (_) -> (_) -> TT {
  forall (f)
  extendSubst f FZ ~> V FZ
  
  forall (f) (i)
  extendSubst f (FS i) ~> mapVars FS (f i)
}

substVars : (_) -> (_) -> TT {
  forall (f) (i)
  substVars f (V i) ~> f i
  
  forall (f) (x)
  substVars f (Lam x) ~> Lam (substVars (extendSubst f) x)
  
  forall (f) (g) (x)
  substVars f (App g x) ~> App (substVars f g) (substVars f x)
}

testTm : TT {
  testTm  ~> App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
}

example1 : TT {
  example1  ~> substVars (env (VC (Lam (V FZ)) VN)) testTm
}

substTop : (_) -> (_) -> TT {
  forall (tm)
  substTop tm FZ ~> tm
  
  forall (tm) (i)
  substTop tm (FS i) ~> V i
}

mutual {
  redex : (_) -> (_) -> TT {
    forall (y) (x)
    redex (Lam y) x ~> nf (substVars (substTop (nf x)) y)
    
    forall (f') (x)
    redex f' x ~> App f' (nf x)
  }
  
  nf : (_) -> TT {
    forall (i)
    nf (V i) ~> V i
    
    forall (x)
    nf (Lam x) ~> Lam (nf x)
    
    forall (f) (x)
    nf (App f x) ~> redex f x
  }
}

example2 : TT {
  example2  ~> nf testTm
}

constructor R : (x) -> (y) -> Result.

main : Result {
  main  ~> R example1 example2
}
################
# NF of `main` #
################

Unerased, reduced:
R (App Z (Lam Z (App (S Z) (V (S Z) (FZ Z)) (Lam (S Z) (V (S (S Z)) (FZ (S Z)))))) (Lam Z (App (S Z) (Lam (S Z) (V (S (S Z)) (FZ (S Z)))) (V (S Z) (FZ Z))))) (App (S Z) (V (S Z) (FZ Z)) (V (S Z) (FZ Z)))

Erased, reduced:
R (App (Lam (App (V FZ) (Lam (V FZ)))) (Lam (App (Lam (V FZ)) (V FZ)))) (App (V FZ) (V FZ))
