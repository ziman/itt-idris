
#############
# Desugared #
#############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n : Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ : Nat) -> Type.
  
  constructor/1 FZ : (n : _) -> Fin (S n).
  
  constructor/2 FS : (n : _) -> (_ : Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ : Nat) -> (_ : Type) -> Type.
  
  constructor/1 VN : (a : _) -> Vect Z a.
  
  constructor/4 VC : (n : _) -> (a : _) -> (_ : a) -> (_ : Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT : (_ : Nat) -> Type.
  
  constructor/2 V : (n : _) -> (_ : Fin n) -> TT n.
  
  constructor/2 Lam : (n : _) -> (_ : TT (S n)) -> TT n.
  
  constructor/3 App : (n : _) -> (_ : TT n) -> (_ : TT n) -> TT n.
}

env : (m : _) -> (n : _) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : _) (n : _) (x : _) (xs : _).
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : _) (n : _) (x : _) (xs : _) (i : _).
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : _) -> (n : _) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : _) (n : _) (f : (_ : _) -> _).
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : _) (n : _) (f : (_ : _) -> _) (i : _).
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : _) -> (n : _) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : _) (n : _) (f : (_ : _) -> _) (i : _).
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : _) (n : _) (f : (_ : _) -> _) (x : _).
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : _) (n : _) (f : (_ : _) -> _) (g : _) (x : _).
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m :I Nat) -> (n : _) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : _) (n : _) (f : (_ : _) -> _).
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : _) (n : _) (f : (_ : _) -> _) (i : _).
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

main : Type {
  main  ~> Type
}

###############
# Elaboration #
###############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ :L Nat) -> Type.
  
  constructor/1 FZ : (n :I _0) -> Fin (S n).
  
  constructor/2 FS : (n :I _1) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN : (a :I _2) -> Vect Z a.
  
  constructor/4 VC : (n :I _3) -> (a :I _4) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT : (_ :L Nat) -> Type.
  
  constructor/2 V : (n :I _5) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam : (n :I _6) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App : (n :I _7) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env : (m : _8) -> (n : _9) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : _13) (n : _12) (x : _11) (xs : _10).
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : _18) (n : _17) (x : _16) (xs : _15) (i : _14).
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : _19) -> (n : _20) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : _24) (n : _23) (f : (_ : _21) -> _22).
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : _29) (n : _28) (f : (_ : _26) -> _27) (i : _25).
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : _30) -> (n : _31) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : _36) (n : _35) (f : (_ : _33) -> _34) (i : _32).
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : _41) (n : _40) (f : (_ : _38) -> _39) (x : _37).
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : _47) (n : _46) (f : (_ : _44) -> _45) (g : _43) (x : _42).
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m :I Nat) -> (n : _48) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : _52) (n : _51) (f : (_ : _49) -> _50).
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : _57) (n : _56) (f : (_ : _54) -> _55) (i : _53).
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

main : Type {
  main  ~> Type
}

Equalities:
  _ty0 = Type
  _0 = Nat
  _ty1 = Type
  _1 = Nat
  _1 = Nat
  _ty2 = Type
  _2 = Type
  _ty3 = Type
  _ty4 = Type
  _4 = Type
  _3 = Nat
  _4 = Type
  _3 = Nat
  _4 = Type
  _ty5 = Type
  _5 = Nat
  _5 = Nat
  _ty6 = Type
  _6 = Nat
  _6 = Nat
  _ty7 = Type
  _7 = Nat
  _7 = Nat
  _7 = Nat
  _ty8 = Type
  _ty9 = Type
  _8 = Nat
  _9 = Nat
  _8 = Nat
  _9 = Nat
  _ty13 = Type
  _ty12 = Type
  _ty11 = Type
  _ty10 = Type
  _13 = Nat
  _8 = Nat
  _9 = _12
  _3 = _13
  _12 = Nat
  _4 = Type
  _11 = TT n
  _10 = Vect m (TT n)
  _0 = _13
  _11 = TT n
  _ty18 = Type
  _ty17 = Type
  _ty16 = Type
  _ty15 = Type
  _ty14 = Type
  _18 = Nat
  _8 = Nat
  _9 = _17
  _3 = _18
  _17 = Nat
  _4 = Type
  _16 = TT n
  _15 = Vect m (TT n)
  _1 = _18
  _14 = Fin m
  _8 = _18
  _9 = _17
  _15 = Vect m (TT n)
  _14 = Fin m
  _ty19 = Type
  _ty20 = Type
  _19 = Nat
  _20 = Nat
  _19 = Nat
  _20 = Nat
  _ty24 = Type
  _ty23 = Type
  _ty21 = Type
  _ty22 = Type
  _19 = _24
  _20 = _23
  _21 = Fin m
  _22 = Fin n
  _0 = _24
  _0 = _23
  _ty29 = Type
  _ty28 = Type
  _ty26 = Type
  _ty27 = Type
  _ty25 = Type
  _19 = _29
  _20 = _28
  _26 = Fin m
  _27 = Fin n
  _1 = _29
  _25 = Fin m
  _1 = _28
  _26 = _25
  _27 = Fin n
  _ty30 = Type
  _ty31 = Type
  _30 = Nat
  _31 = Nat
  _30 = Nat
  _31 = Nat
  _ty36 = Type
  _ty35 = Type
  _ty33 = Type
  _ty34 = Type
  _ty32 = Type
  _30 = _36
  _31 = _35
  _33 = Fin m
  _34 = Fin n
  _5 = _36
  _32 = Fin m
  _5 = _35
  _33 = _32
  _34 = Fin n
  _ty41 = Type
  _ty40 = Type
  _ty38 = Type
  _ty39 = Type
  _ty37 = Type
  _30 = _41
  _31 = _40
  _38 = Fin m
  _39 = Fin n
  _6 = _41
  _37 = TT (S m)
  _6 = _40
  _41 = Nat
  _30 = Nat
  _40 = Nat
  _31 = Nat
  _19 = _41
  _20 = _40
  _38 = Fin m
  _39 = Fin n
  _37 = TT (S m)
  _ty47 = Type
  _ty46 = Type
  _ty44 = Type
  _ty45 = Type
  _ty43 = Type
  _ty42 = Type
  _30 = _47
  _31 = _46
  _44 = Fin m
  _45 = Fin n
  _7 = _47
  _43 = TT m
  _42 = TT m
  _7 = _46
  _30 = _47
  _31 = _46
  _44 = Fin m
  _45 = Fin n
  _43 = TT m
  _30 = _47
  _31 = _46
  _44 = Fin m
  _45 = Fin n
  _42 = TT m
  _ty48 = Type
  _48 = Nat
  _48 = Nat
  _ty52 = Type
  _ty51 = Type
  _ty49 = Type
  _ty50 = Type
  _52 = Nat
  _48 = _51
  _49 = Fin m
  _50 = TT n
  _0 = _52
  _51 = Nat
  _5 = Nat
  _0 = _51
  _ty57 = Type
  _ty56 = Type
  _ty54 = Type
  _ty55 = Type
  _ty53 = Type
  _57 = Nat
  _48 = _56
  _54 = Fin m
  _55 = TT n
  _1 = _57
  _53 = Fin m
  _30 = _56
  _56 = Nat
  _31 = Nat
  _1 = _56
  _54 = _53
  _55 = TT n

Solved metas: [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _ty0, _ty1, _ty2, _ty3, _ty4, _ty5, _ty6, _ty7, _ty8, _ty9, _ty10, _ty11, _ty12, _ty13, _ty14, _ty15, _ty16, _ty17, _ty18, _ty19, _ty20, _ty21, _ty22, _ty23, _ty24, _ty25, _ty26, _ty27, _ty28, _ty29, _ty30, _ty31, _ty32, _ty33, _ty34, _ty35, _ty36, _ty37, _ty38, _ty39, _ty40, _ty41, _ty42, _ty43, _ty44, _ty45, _ty46, _ty47, _ty48, _ty49, _ty50, _ty51, _ty52, _ty53, _ty54, _ty55, _ty56, _ty57]

##############
# Elaborated #
##############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ :L Nat) -> Type.
  
  constructor/1 FZ : (n :I Nat) -> Fin (S n).
  
  constructor/2 FS : (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN : (a :I Type) -> Vect Z a.
  
  constructor/4 VC : (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT : (_ :L Nat) -> Type.
  
  constructor/2 V : (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam : (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App : (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env : (m : Nat) -> (n : Nat) -> (_ : Vect m (TT n)) -> (_ : Fin m) -> TT n {
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)).
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m).
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : Fin (S m)) -> Fin (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n).
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m).
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> Fin n) -> (_ : TT m) -> TT n {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (i : Fin m).
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (x : TT (S m)).
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> Fin n) (g : TT m) (x : TT m).
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m :I Nat) -> (n : Nat) -> (_ : (_ : Fin m) -> TT n) -> (_ : Fin (S m)) -> TT (S n) {
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n).
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m : Nat) (n : Nat) (f : (_ : Fin m) -> TT n) (i : Fin m).
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

main : Type {
  main  ~> Type
}

#############
# Evarified #
#############

mutual {
  constructor/0 Nat :16 Type.
  
  constructor/0 Z :32 Nat.
  
  constructor/1 S :17 (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :11 (_ :L Nat) -> Type.
  
  constructor/1 FZ :8 (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :4 (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :31 (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN :28 (a :I Type) -> Vect Z a.
  
  constructor/4 VC :22 (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT :18 (_ :L Nat) -> Type.
  
  constructor/2 V :19 (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam :12 (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App :0 (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :33 (m :34 Nat) -> (n :35 Nat) -> (_ :36 Vect m (TT n)) -> (_ :40 Fin m) -> TT n {
  forall (m :50 Nat) (n :49 Nat) (x :47 TT n) (xs :43 Vect m (TT n)).
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :71 Nat) (n :70 Nat) (x :68 TT n) (xs :64 Vect m (TT n)) (i :62 Fin m).
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :88 (m :89 Nat) -> (n :90 Nat) -> (_ :91 (_ :92 Fin m) -> Fin n) -> (_ :95 Fin (S m)) -> Fin (S n) {
  forall (m :105 Nat) (n :104 Nat) (f :100 (_ :101 Fin m) -> Fin n).
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :119 Nat) (n :118 Nat) (f :114 (_ :115 Fin m) -> Fin n) (i :112 Fin m).
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :177 (m :178 Nat) -> (n :179 Nat) -> (_ :180 (_ :181 Fin m) -> Fin n) -> (_ :184 TT m) -> TT n {
  forall (m :194 Nat) (n :193 Nat) (f :189 (_ :190 Fin m) -> Fin n) (i :187 Fin m).
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :212 Nat) (n :211 Nat) (f :207 (_ :208 Fin m) -> Fin n) (x :204 TT (S m)).
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :239 Nat) (n :238 Nat) (f :234 (_ :235 Fin m) -> Fin n) (g :232 TT m) (x :230 TT m).
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :129 (m :I Nat) -> (n :130 Nat) -> (_ :131 (_ :132 Fin m) -> TT n) -> (_ :135 Fin (S m)) -> TT (S n) {
  forall (m :145 Nat) (n :144 Nat) (f :140 (_ :141 Fin m) -> TT n).
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :162 Nat) (n :161 Nat) (f :157 (_ :158 Fin m) -> TT n) (i :155 Fin m).
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

main :176 Type {
  main  ~> Type
}
inferring  mutual {
    constructor/0 Nat :16 Type.
    
    constructor/0 Z :32 Nat.
    
    constructor/1 S :17 (n :L Nat) -> Nat.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Nat :I Type.
    
    constructor/0 Z :I Nat.
    
    constructor/1 S :I (n :L Nat) -> Nat.
  }

inferring  mutual {
    constructor/1 Fin :11 (_ :L Nat) -> Type.
    
    constructor/1 FZ :8 (n :I Nat) -> Fin (S n).
    
    constructor/2 FS :4 (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

  inferred constraints: 
    L ~ 9
    L ~ 10
    L ~ 5
    L ~ 6
    L ~ 7
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/1 Fin :I (_ :L Nat) -> Type.
    
    constructor/1 FZ :I (n :I Nat) -> Fin (S n).
    
    constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

inferring  mutual {
    constructor/2 Vect :31 (_ :L Nat) -> (_ :L Type) -> Type.
    
    constructor/1 VN :28 (a :I Type) -> Vect Z a.
    
    constructor/4 VC :22 (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

  inferred constraints: 
    L ~ 30
    L ~ 29
    L ~ 24
    L ~ 23
    L ~ 26
    L ~ 27
    L ~ 25
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
    
    constructor/1 VN :I (a :I Type) -> Vect Z a.
    
    constructor/4 VC :I (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

inferring  mutual {
    constructor/1 TT :18 (_ :L Nat) -> Type.
    
    constructor/2 V :19 (n :I Nat) -> (_ :L Fin n) -> TT n.
    
    constructor/2 Lam :12 (n :I Nat) -> (_ :L TT (S n)) -> TT n.
    
    constructor/3 App :0 (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
  }

  inferred constraints: 
    L ~ 20
    L ~ 21
    L ~ 13
    L ~ 14
    L ~ 15
    L ~ 1
    L ~ 2
    L ~ 3
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/1 TT :I (_ :L Nat) -> Type.
    
    constructor/2 V :I (n :I Nat) -> (_ :L Fin n) -> TT n.
    
    constructor/2 Lam :I (n :I Nat) -> (_ :L TT (S n)) -> TT n.
    
    constructor/3 App :I (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
  }

inferring  env :33 (m :34 Nat) -> (n :35 Nat) -> (_ :36 Vect m (TT n)) -> (_ :40 Fin m) -> TT n {
    forall (m :50 Nat) (n :49 Nat) (x :47 TT n) (xs :43 Vect m (TT n)).
    env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
    
    forall (m :71 Nat) (n :70 Nat) (x :68 TT n) (xs :64 Vect m (TT n)) (i :62 Fin m).
    env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
  }

  inferred constraints: 
    L ~ 38
    L ~ 37
    L ~ 39
    L ~ 41
    L ~ 42
    L ~ 48
    L ~ 45
    L ~ 44
    L ~ 46
    50 ~ product [I, 40]
    49 ~ product [35]
    47 ~ product [L, 36]
    43 ~ product [L, 36]
    34 ~ 51
    L ~ 52
    35 ~ 53
    36 ~ 54
    product [36] ≥ sum
      product [L]
    I ~ 55
    I ~ 56
    L ~ 57
    L ~ 58
    57 ~ 48
    L ~ 59
    L ~ 44
    L ~ 45
    37 ~ L
    38 ~ L
    52 ~ L
    39 ~ 57
    40 ~ 60
    product [40] ≥ sum
      product [L]
    I ~ 61
    41 ~ L
    52 ~ L
    50 ≥ sum
    49 ≥ sum
    47 ≥ sum
      product []
    43 ≥ sum
    48 ~ 42
    L ~ 69
    L ~ 66
    L ~ 65
    L ~ 67
    L ~ 63
    71 ~ product [I, 40]
    70 ~ product [35]
    68 ~ product [L, 36]
    64 ~ product [L, 36]
    62 ~ product [L, 40]
    34 ~ 72
    L ~ 73
    35 ~ 74
    36 ~ 75
    product [36] ≥ sum
      product [L]
    I ~ 76
    I ~ 77
    L ~ 78
    L ~ 79
    78 ~ 69
    L ~ 80
    L ~ 65
    L ~ 66
    37 ~ L
    38 ~ L
    73 ~ L
    39 ~ 78
    40 ~ 81
    product [40] ≥ sum
      product [L]
    I ~ 82
    L ~ 83
    L ~ 63
    41 ~ L
    73 ~ L
    71 ≥ sum
      product [34]
    70 ≥ sum
      product [35]
    68 ≥ sum
    64 ≥ sum
      product [36]
    62 ≥ sum
      product [40]
    34 ~ 87
    35 ~ 86
    36 ~ 85
    37 ~ 65
    38 ~ 66
    40 ~ 84
    41 ~ 63
    42 ~ 42
  
  deferred equalities: 
    44 -> TT n ~ TT n
    65 -> TT n ~ TT n
    65 -> TT n ~ TT n
  
  variance of evars:
    covariant: []
    contravariant: [34, 35, 36, 40]
  -> iteration 1
    TT n ~ TT n
    TT n ~ TT n
    TT n ~ TT n

  env :I (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
    forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)).
    env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
    
    forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m).
    env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
  }

inferring  extendMap :88 (m :89 Nat) -> (n :90 Nat) -> (_ :91 (_ :92 Fin m) -> Fin n) -> (_ :95 Fin (S m)) -> Fin (S n) {
    forall (m :105 Nat) (n :104 Nat) (f :100 (_ :101 Fin m) -> Fin n).
    extendMap m n f (FZ [m]) ~> FZ n
    
    forall (m :119 Nat) (n :118 Nat) (f :114 (_ :115 Fin m) -> Fin n) (i :112 Fin m).
    extendMap m n f (FS [m] i) ~> FS n (f i)
  }

  inferred constraints: 
    L ~ 93
    L ~ 94
    L ~ 96
    L ~ 97
    L ~ 98
    L ~ 99
    L ~ 102
    L ~ 103
    105 ~ product [89]
    104 ~ product [90]
    100 ~ product [91]
    89 ~ 106
    90 ~ 107
    91 ~ 108
    92 ~ 101
    93 ~ 102
    94 ~ 103
    95 ~ 109
    product [95] ≥ sum
      product [L]
    I ~ 110
    96 ~ L
    97 ~ L
    105 ≥ sum
    104 ≥ sum
      product [I]
    100 ≥ sum
    I ~ 111
    L ~ 98
    L ~ 116
    L ~ 117
    L ~ 113
    119 ~ product [89]
    118 ~ product [90]
    114 ~ product [91]
    112 ~ product [L, 95]
    89 ~ 120
    90 ~ 121
    91 ~ 122
    92 ~ 115
    93 ~ 116
    94 ~ 117
    95 ~ 123
    product [95] ≥ sum
      product [L]
    I ~ 124
    L ~ 125
    L ~ 113
    96 ~ L
    97 ~ L
    119 ≥ sum
    118 ≥ sum
      product [I]
    114 ≥ sum
      product [L]
    112 ≥ sum
      product [115, L]
    I ~ 127
    L ~ 126
    115 ~ 128
    116 ~ 113
    L ~ 117
    L ~ 98
  
  deferred equalities: 
    98 -> S n ~ S n
    98 -> S n ~ S n
  
  variance of evars:
    covariant: [92]
    contravariant: [89, 90, 91, 95]
  -> iteration 1
    S n ~ S n
    S n ~ S n

  extendMap :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n).
    extendMap m n f (FZ [m]) ~> FZ n
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m).
    extendMap m n f (FS [m] i) ~> FS n (f i)
  }

inferring  mapVars :177 (m :178 Nat) -> (n :179 Nat) -> (_ :180 (_ :181 Fin m) -> Fin n) -> (_ :184 TT m) -> TT n {
    forall (m :194 Nat) (n :193 Nat) (f :189 (_ :190 Fin m) -> Fin n) (i :187 Fin m).
    mapVars m n f (V [m] i) ~> V n (f i)
    
    forall (m :212 Nat) (n :211 Nat) (f :207 (_ :208 Fin m) -> Fin n) (x :204 TT (S m)).
    mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
    
    forall (m :239 Nat) (n :238 Nat) (f :234 (_ :235 Fin m) -> Fin n) (g :232 TT m) (x :230 TT m).
    mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
  }

  inferred constraints: 
    L ~ 182
    L ~ 183
    L ~ 185
    L ~ 186
    L ~ 191
    L ~ 192
    L ~ 188
    194 ~ product [178]
    193 ~ product [179]
    189 ~ product [180]
    187 ~ product [L, 184]
    178 ~ 195
    179 ~ 196
    180 ~ 197
    181 ~ 190
    182 ~ 191
    183 ~ 192
    184 ~ 198
    product [184] ≥ sum
      product [L]
    I ~ 199
    L ~ 200
    L ~ 188
    185 ~ L
    194 ≥ sum
    193 ≥ sum
      product [I]
    189 ≥ sum
      product [L]
    187 ≥ sum
      product [190, L]
    I ~ 202
    L ~ 201
    190 ~ 203
    191 ~ 188
    L ~ 192
    L ~ 186
    L ~ 209
    L ~ 210
    L ~ 205
    L ~ 206
    212 ~ product [178]
    211 ~ product [179]
    207 ~ product [180]
    204 ~ product [L, 184]
    178 ~ 213
    179 ~ 214
    180 ~ 215
    181 ~ 208
    182 ~ 209
    183 ~ 210
    184 ~ 216
    product [184] ≥ sum
      product [L]
    I ~ 217
    L ~ 218
    L ~ 205
    185 ~ L
    212 ≥ sum
      product [L, 178, L]
      product [I, 180, L]
    211 ≥ sum
      product [I]
      product [L, 179, L]
      product [I, 180, L]
    207 ≥ sum
      product [R, 180, L]
    204 ≥ sum
      product [184, L]
    I ~ 220
    L ~ 219
    178 ~ 224
    L ~ 225
    179 ~ 223
    L ~ 226
    180 ~ 222
    I ~ 229
    I ~ 228
    R ~ 227
    L ~ 208
    L ~ 209
    L ~ 210
    181 ~ L
    182 ~ L
    225 ~ L
    183 ~ L
    226 ~ L
    184 ~ 221
    185 ~ 205
    L ~ 186
    L ~ 186
    L ~ 236
    L ~ 237
    L ~ 233
    L ~ 231
    239 ~ product [178]
    238 ~ product [179]
    234 ~ product [180]
    232 ~ product [L, 184]
    230 ~ product [L, 184]
    178 ~ 240
    179 ~ 241
    180 ~ 242
    181 ~ 235
    182 ~ 236
    183 ~ 237
    184 ~ 243
    product [184] ≥ sum
      product [L]
    I ~ 244
    L ~ 245
    L ~ 233
    L ~ 246
    L ~ 231
    185 ~ L
    239 ≥ sum
      product [178, L]
      product [178, L]
    238 ≥ sum
      product [I]
      product [179, L]
      product [179, L]
    234 ≥ sum
      product [180, L]
      product [180, L]
    232 ≥ sum
      product [184, L]
    230 ≥ sum
      product [184, L]
    I ~ 249
    L ~ 248
    178 ~ 253
    179 ~ 252
    180 ~ 251
    181 ~ 235
    182 ~ 236
    183 ~ 237
    184 ~ 250
    185 ~ 233
    L ~ 186
    L ~ 247
    178 ~ 257
    179 ~ 256
    180 ~ 255
    181 ~ 235
    182 ~ 236
    183 ~ 237
    184 ~ 254
    185 ~ 231
    L ~ 186
    L ~ 186
  
  deferred equalities: 
    205 -> S m ~ S m
    205 -> S m ~ S m
    186 -> S n ~ S n
  
  variance of evars:
    covariant: [181]
    contravariant: [178, 179, 180, 184]
  -> iteration 1
    S m ~ S m
    S m ~ S m
    S n ~ S n

  mapVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m).
    mapVars m n f (V [m] i) ~> V n (f i)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m)).
    mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m).
    mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
  }

inferring  extendSubst :129 (m :I Nat) -> (n :130 Nat) -> (_ :131 (_ :132 Fin m) -> TT n) -> (_ :135 Fin (S m)) -> TT (S n) {
    forall (m :145 Nat) (n :144 Nat) (f :140 (_ :141 Fin m) -> TT n).
    extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
    
    forall (m :162 Nat) (n :161 Nat) (f :157 (_ :158 Fin m) -> TT n) (i :155 Fin m).
    extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
  }

  inferred constraints: 
    L ~ 133
    L ~ 134
    L ~ 136
    L ~ 137
    L ~ 138
    L ~ 139
    L ~ 142
    L ~ 143
    145 ~ product [I]
    144 ~ product [130]
    140 ~ product [131]
    I ~ 146
    130 ~ 147
    131 ~ 148
    132 ~ 141
    133 ~ 142
    134 ~ 143
    135 ~ 149
    product [135] ≥ sum
      product [L]
    I ~ 150
    136 ~ L
    137 ~ L
    145 ≥ sum
    144 ≥ sum
      product [L, I]
      product [I, L]
    140 ≥ sum
    I ~ 152
    L ~ 153
    L ~ 151
    I ~ 154
    153 ~ L
    L ~ 138
    L ~ 159
    L ~ 160
    L ~ 156
    162 ~ product [I]
    161 ~ product [130]
    157 ~ product [131]
    155 ~ product [L, 135]
    I ~ 163
    130 ~ 164
    131 ~ 165
    132 ~ 158
    133 ~ 159
    134 ~ 160
    135 ~ 166
    product [135] ≥ sum
      product [L]
    I ~ 167
    L ~ 168
    L ~ 156
    136 ~ L
    137 ~ L
    162 ≥ sum
    161 ≥ sum
      product [I]
      product [L, I]
      product [I, R]
    157 ≥ sum
      product [L]
    155 ≥ sum
      product [158, L]
    I ~ 172
    I ~ 171
    L ~ 173
    R ~ 170
    I ~ 174
    173 ~ L
    L ~ 169
    158 ~ 175
    159 ~ 156
    L ~ 160
    L ~ 138
  
  deferred equalities: 
    138 -> S n ~ S n
    138 -> S n ~ S n
  
  variance of evars:
    covariant: [132]
    contravariant: [130, 131, 135]
  -> iteration 1
    S n ~ S n
    S n ~ S n

  extendSubst :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n).
    extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
    
    forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m).
    extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
  }

inferring  main :176 Type {
    main  ~> Type
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  main :I Type {
    main  ~> Type
  }


###################
# Final valuation #
###################

  0 -> I
  1 -> L
  2 -> L
  3 -> L
  4 -> I
  5 -> L
  6 -> L
  7 -> L
  8 -> I
  9 -> L
  10 -> L
  11 -> I
  12 -> I
  13 -> L
  14 -> L
  15 -> L
  16 -> I
  17 -> I
  18 -> I
  19 -> I
  20 -> L
  21 -> L
  22 -> I
  23 -> L
  24 -> L
  25 -> L
  26 -> L
  27 -> L
  28 -> I
  29 -> L
  30 -> L
  31 -> I
  32 -> I
  33 -> I
  34 -> I
  35 -> I
  36 -> R
  37 -> L
  38 -> L
  39 -> L
  40 -> L
  41 -> L
  42 -> L
  43 -> R
  44 -> L
  45 -> L
  46 -> L
  47 -> R
  48 -> L
  49 -> I
  50 -> I
  51 -> I
  52 -> L
  53 -> I
  54 -> R
  55 -> I
  56 -> I
  57 -> L
  58 -> L
  59 -> L
  60 -> L
  61 -> I
  62 -> L
  63 -> L
  64 -> R
  65 -> L
  66 -> L
  67 -> L
  68 -> R
  69 -> L
  70 -> I
  71 -> I
  72 -> I
  73 -> L
  74 -> I
  75 -> R
  76 -> I
  77 -> I
  78 -> L
  79 -> L
  80 -> L
  81 -> L
  82 -> I
  83 -> L
  84 -> L
  85 -> R
  86 -> I
  87 -> I
  88 -> I
  89 -> I
  90 -> I
  91 -> R
  92 -> L
  93 -> L
  94 -> L
  95 -> L
  96 -> L
  97 -> L
  98 -> L
  99 -> L
  100 -> R
  101 -> L
  102 -> L
  103 -> L
  104 -> I
  105 -> I
  106 -> I
  107 -> I
  108 -> R
  109 -> L
  110 -> I
  111 -> I
  112 -> L
  113 -> L
  114 -> R
  115 -> L
  116 -> L
  117 -> L
  118 -> I
  119 -> I
  120 -> I
  121 -> I
  122 -> R
  123 -> L
  124 -> I
  125 -> L
  126 -> L
  127 -> I
  128 -> L
  129 -> I
  130 -> I
  131 -> R
  132 -> L
  133 -> L
  134 -> L
  135 -> L
  136 -> L
  137 -> L
  138 -> L
  139 -> L
  140 -> R
  141 -> L
  142 -> L
  143 -> L
  144 -> I
  145 -> I
  146 -> I
  147 -> I
  148 -> R
  149 -> L
  150 -> I
  151 -> L
  152 -> I
  153 -> L
  154 -> I
  155 -> L
  156 -> L
  157 -> R
  158 -> L
  159 -> L
  160 -> L
  161 -> I
  162 -> I
  163 -> I
  164 -> I
  165 -> R
  166 -> L
  167 -> I
  168 -> L
  169 -> L
  170 -> R
  171 -> I
  172 -> I
  173 -> L
  174 -> I
  175 -> L
  176 -> L
  177 -> I
  178 -> I
  179 -> I
  180 -> R
  181 -> L
  182 -> L
  183 -> L
  184 -> L
  185 -> L
  186 -> L
  187 -> L
  188 -> L
  189 -> R
  190 -> L
  191 -> L
  192 -> L
  193 -> I
  194 -> I
  195 -> I
  196 -> I
  197 -> R
  198 -> L
  199 -> I
  200 -> L
  201 -> L
  202 -> I
  203 -> L
  204 -> L
  205 -> L
  206 -> L
  207 -> R
  208 -> L
  209 -> L
  210 -> L
  211 -> I
  212 -> I
  213 -> I
  214 -> I
  215 -> R
  216 -> L
  217 -> I
  218 -> L
  219 -> L
  220 -> I
  221 -> L
  222 -> R
  223 -> I
  224 -> I
  225 -> L
  226 -> L
  227 -> R
  228 -> I
  229 -> I
  230 -> L
  231 -> L
  232 -> L
  233 -> L
  234 -> R
  235 -> L
  236 -> L
  237 -> L
  238 -> I
  239 -> I
  240 -> I
  241 -> I
  242 -> R
  243 -> L
  244 -> I
  245 -> L
  246 -> L
  247 -> L
  248 -> L
  249 -> I
  250 -> L
  251 -> R
  252 -> I
  253 -> I
  254 -> L
  255 -> R
  256 -> I
  257 -> I


#####################
# Annotated program #
#####################

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :I Nat.
  
  constructor/1 S :I (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :I (_ :L Nat) -> Type.
  
  constructor/1 FZ :I (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN :I (a :I Type) -> Vect Z a.
  
  constructor/4 VC :I (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT :I (_ :L Nat) -> Type.
  
  constructor/2 V :I (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam :I (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App :I (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :I (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)).
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x
  
  forall (m :I Nat) (n :I Nat) (x :R TT n) (xs :R Vect m (TT n)) (i :L Fin m).
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n).
  extendMap m n f (FZ [m]) ~> FZ n
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m).
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (i :L Fin m).
  mapVars m n f (V [m] i) ~> V n (f i)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (x :L TT (S m)).
  mapVars m n f (Lam [m] x) ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> Fin n) (g :L TT m) (x :L TT m).
  mapVars m n f (App [m] g x) ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n).
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n)
  
  forall (m :I Nat) (n :I Nat) (f :R (_ :L Fin m) -> TT n) (i :L Fin m).
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

main :L Type {
  main  ~> Type
}


##########
# Pruned #
##########

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :I Nat.
  
  constructor/1 S :I (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :I (_ :L Nat) -> Type.
  
  constructor/1 FZ :I (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 VN :I (a :I Type) -> Vect Z a.
  
  constructor/4 VC :I (n :I Nat) -> (a :I Type) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/1 TT :I (_ :L Nat) -> Type.
  
  constructor/2 V :I (n :I Nat) -> (_ :L Fin n) -> TT n.
  
  constructor/2 Lam :I (n :I Nat) -> (_ :L TT (S n)) -> TT n.
  
  constructor/3 App :I (n :I Nat) -> (_ :L TT n) -> (_ :L TT n) -> TT n.
}

env :I (m :I Nat) -> (n :I Nat) -> (_ :R Vect m (TT n)) -> (_ :L Fin m) -> TT n {
}

extendMap :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L Fin (S m)) -> Fin (S n) {
}

mapVars :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> Fin n) -> (_ :L TT m) -> TT n {
}

extendSubst :I (m :I Nat) -> (n :I Nat) -> (_ :R (_ :L Fin m) -> TT n) -> (_ :L Fin (S m)) -> TT (S n) {
}

main :L Type {
  main  ~> Type
}

##########
# Erased #
##########

main {
  main  ~> Type
}

################
# NF of `main` #
################

Unerased, reduced:
Type

Erased, reduced:
Type
