
#############
# Desugared #
#############

mutual {
  constructor/3 Id : (a : _) -> (_ : a) -> (_ : a) -> Type.
  
  constructor/2 Refl : (a : _) -> (x :I a) -> Id a x x.
}

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 Fool : Type.
  
  constructor/0 Frue : Bool.
  
  constructor/0 Talse : Bool.
}

Fn : (a : Type) -> (b : Type) -> Type {
  forall (a : _) (b : _).
  Fn a b ~> (_ : a) -> b
}

lemma1 : Id Type ((_ : Bool) -> Fool) (Fn Bool Fool) {
  lemma1  ~> Refl Type (Fn Bool Fool)
}

lemma2 : (F : (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
  forall (F : (_ : _) -> (_ : _) -> _).
  lemma2 F ~> Refl Type (F Bool Fool)
}

lemma3 : Id Type (Fn Fool Bool) ((_ : Fool) -> Bool) {
  lemma3  ~> Refl Type (Fn Fool Bool)
}

trans : (a : _) -> (b : _) -> (c : _) -> (_ : Id Type a b) -> (_ : Id Type b c) -> Id Type a c {
  forall (a : _).
  trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
}

boom : Id Type ((_ : Bool) -> Fool) ((_ : Fool) -> Bool) {
  boom  ~> trans ((_ : Bool) -> Fool) (Fn Fool Bool) ((_ : Fool) -> Bool) (trans ((_ : Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
}

main : Type {
  main  ~> Type
}

###############
# Elaboration #
###############

mutual {
  constructor/3 Id : (a :I _0) -> (_ :L a) -> (_ :L a) -> Type.
  
  constructor/2 Refl : (a :I _1) -> (x :I a) -> Id a x x.
}

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 Fool : Type.
  
  constructor/0 Frue : Bool.
  
  constructor/0 Talse : Bool.
}

Fn : (a : Type) -> (b : Type) -> Type {
  forall (a : _3) (b : _2).
  Fn a b ~> (_ : a) -> b
}

lemma1 : Id Type ((_ : Bool) -> Fool) (Fn Bool Fool) {
  lemma1  ~> Refl Type (Fn Bool Fool)
}

lemma2 : (F : (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
  forall (F : (_ : _4) -> (_ : _5) -> _6).
  lemma2 F ~> Refl Type (F Bool Fool)
}

lemma3 : Id Type (Fn Fool Bool) ((_ : Fool) -> Bool) {
  lemma3  ~> Refl Type (Fn Fool Bool)
}

trans : (a : _7) -> (b : _8) -> (c : _9) -> (_ : Id Type a b) -> (_ : Id Type b c) -> Id Type a c {
  forall (a : _10).
  trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
}

boom : Id Type ((_ : Bool) -> Fool) ((_ : Fool) -> Bool) {
  boom  ~> trans ((_ : Bool) -> Fool) (Fn Fool Bool) ((_ : Fool) -> Bool) (trans ((_ : Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
}

main : Type {
  main  ~> Type
}

Equalities:
  _ty0 = Type
  _0 = Type
  _0 = Type
  _ty1 = Type
  _1 = Type
  _0 = _1
  _ty3 = Type
  _ty2 = Type
  _3 = Type
  _2 = Type
  _3 = Type
  _2 = Type
  _0 = Type
  _1 = Type
  _0 = Type
  _ty4 = Type
  _ty5 = Type
  _ty6 = Type
  _4 = Type
  _5 = Type
  _6 = Type
  _1 = Type
  _4 = Type
  _5 = Type
  _6 = Type
  _0 = Type
  _1 = Type
  _ty7 = Type
  _ty8 = Type
  _ty9 = Type
  _0 = Type
  _7 = Type
  _8 = Type
  _0 = Type
  _8 = Type
  _9 = Type
  _0 = Type
  _7 = Type
  _9 = Type
  _ty10 = Type
  _7 = _10
  _8 = _10
  _9 = _10
  _1 = Type
  _10 = Type
  _1 = Type
  _10 = Type
  _1 = Type
  _10 = Type
  _0 = Type
  _7 = Type
  _8 = Type
  _9 = Type
  _7 = Type
  _8 = Type
  _9 = Type

Solved metas: [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _ty0, _ty1, _ty2, _ty3, _ty4, _ty5, _ty6, _ty7, _ty8, _ty9, _ty10]

##############
# Elaborated #
##############

mutual {
  constructor/3 Id : (a :I Type) -> (_ :L a) -> (_ :L a) -> Type.
  
  constructor/2 Refl : (a :I Type) -> (x :I a) -> Id a x x.
}

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 Fool : Type.
  
  constructor/0 Frue : Bool.
  
  constructor/0 Talse : Bool.
}

Fn : (a : Type) -> (b : Type) -> Type {
  forall (a : Type) (b : Type).
  Fn a b ~> (_ : a) -> b
}

lemma1 : Id Type ((_ : Bool) -> Fool) (Fn Bool Fool) {
  lemma1  ~> Refl Type (Fn Bool Fool)
}

lemma2 : (F : (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
  forall (F : (_ : Type) -> (_ : Type) -> Type).
  lemma2 F ~> Refl Type (F Bool Fool)
}

lemma3 : Id Type (Fn Fool Bool) ((_ : Fool) -> Bool) {
  lemma3  ~> Refl Type (Fn Fool Bool)
}

trans : (a : Type) -> (b : Type) -> (c : Type) -> (_ : Id Type a b) -> (_ : Id Type b c) -> Id Type a c {
  forall (a : Type).
  trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
}

boom : Id Type ((_ : Bool) -> Fool) ((_ : Fool) -> Bool) {
  boom  ~> trans ((_ : Bool) -> Fool) (Fn Fool Bool) ((_ : Fool) -> Bool) (trans ((_ : Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
}

main : Type {
  main  ~> Type
}

#############
# Evarified #
#############

mutual {
  constructor/3 Id :12 (a :I Type) -> (_ :L a) -> (_ :L a) -> Type.
  
  constructor/2 Refl :13 (a :I Type) -> (x :I a) -> Id a x x.
}

mutual {
  constructor/0 Bool :0 Type.
  
  constructor/0 True :18 Bool.
  
  constructor/0 False :1 Bool.
}

mutual {
  constructor/0 Fool :10 Type.
  
  constructor/0 Frue :11 Bool.
  
  constructor/0 Talse :17 Bool.
}

Fn :2 (a :3 Type) -> (b :4 Type) -> Type {
  forall (a :6 Type) (b :5 Type).
  Fn a b ~> (_ :9 a) -> b
}

lemma1 :45 Id Type ((_ :49 Bool) -> Fool) (Fn Bool Fool) {
  lemma1  ~> Refl Type (Fn Bool Fool)
}

lemma2 :56 (F :57 (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
  forall (F :65 (_ :66 Type) -> (_ :67 Type) -> Type).
  lemma2 F ~> Refl Type (F Bool Fool)
}

lemma3 :73 Id Type (Fn Fool Bool) ((_ :79 Fool) -> Bool) {
  lemma3  ~> Refl Type (Fn Fool Bool)
}

trans :85 (a :86 Type) -> (b :87 Type) -> (c :88 Type) -> (_ :89 Id Type a b) -> (_ :93 Id Type b c) -> Id Type a c {
  forall (a :100 Type).
  trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
}

boom :19 Id Type ((_ :23 Bool) -> Fool) ((_ :24 Fool) -> Bool) {
  boom  ~> trans ((_ :30 Bool) -> Fool) (Fn Fool Bool) ((_ :33 Fool) -> Bool) (trans ((_ :39 Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
}

main :84 Type {
  main  ~> Type
}
inferring  mutual {
    constructor/3 Id :12 (a :I Type) -> (_ :L a) -> (_ :L a) -> Type.
    
    constructor/2 Refl :13 (a :I Type) -> (x :I a) -> Id a x x.
  }

  inferred constraints: 
    I ~ 16
    L ~ 15
    L ~ 14
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/3 Id :I (a :I Type) -> (_ :L a) -> (_ :L a) -> Type.
    
    constructor/2 Refl :I (a :I Type) -> (x :I a) -> Id a x x.
  }

inferring  mutual {
    constructor/0 Bool :0 Type.
    
    constructor/0 True :18 Bool.
    
    constructor/0 False :1 Bool.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Bool :I Type.
    
    constructor/0 True :I Bool.
    
    constructor/0 False :I Bool.
  }

inferring  mutual {
    constructor/0 Fool :10 Type.
    
    constructor/0 Frue :11 Bool.
    
    constructor/0 Talse :17 Bool.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Fool :I Type.
    
    constructor/0 Frue :I Bool.
    
    constructor/0 Talse :I Bool.
  }

inferring  Fn :2 (a :3 Type) -> (b :4 Type) -> Type {
    forall (a :6 Type) (b :5 Type).
    Fn a b ~> (_ :9 a) -> b
  }

  inferred constraints: 
    6 ~ product [3]
    5 ~ product [4]
    3 ~ 7
    4 ~ 8
    6 ≥ sum
    5 ≥ sum
    9 ≥ sum
  
  
  variance of evars:
    covariant: []
    contravariant: [3, 4]
  Fn :I (a :I Type) -> (b :I Type) -> Type {
    forall (a :I Type) (b :I Type).
    Fn a b ~> (_ :I a) -> b
  }

inferring  lemma1 :45 Id Type ((_ :49 Bool) -> Fool) (Fn Bool Fool) {
    lemma1  ~> Refl Type (Fn Bool Fool)
  }

  inferred constraints: 
    I ~ 48
    L ~ 47
    L ~ 46
    I ~ 51
    I ~ 50
    I ~ 53
    I ~ 52
    I ~ 55
    I ~ 54
    L ~ 46
    L ~ 47
    I ~ 48
  
  deferred equalities: 
    47 -> ((_ :49 Bool) -> Fool) ~ Fn Bool Fool
    46 -> Fn Bool Fool ~ Fn Bool Fool
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    ((_ :49 Bool) -> Fool) ~ Fn Bool Fool
    Fn Bool Fool ~ Fn Bool Fool

  lemma1 :I Id Type ((_ :I Bool) -> Fool) (Fn Bool Fool) {
    lemma1  ~> Refl Type (Fn Bool Fool)
  }

inferring  lemma2 :56 (F :57 (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
    forall (F :65 (_ :66 Type) -> (_ :67 Type) -> Type).
    lemma2 F ~> Refl Type (F Bool Fool)
  }

  inferred constraints: 
    I ~ 60
    L ~ 59
    I ~ 62
    I ~ 61
    L ~ 58
    I ~ 64
    I ~ 63
    65 ~ product [57]
    57 ~ 68
    I ~ 66
    I ~ 67
    65 ≥ sum
      product [I]
    I ~ 70
    I ~ 69
    66 ~ 72
    67 ~ 71
    L ~ 58
    L ~ 59
    I ~ 60
  
  deferred equalities: 
    59 -> F Bool Fool ~ F Bool Fool
    58 -> F Fool Bool ~ F Bool Fool
  
  variance of evars:
    covariant: []
    contravariant: [57]
  -> iteration 1
    F Bool Fool ~ F Bool Fool
    F Fool Bool ~ F Bool Fool

  lemma2 :I (F :I (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
    forall (F :I (_ :I Type) -> (_ :I Type) -> Type).
    lemma2 F ~> Refl Type (F Bool Fool)
  }

inferring  lemma3 :73 Id Type (Fn Fool Bool) ((_ :79 Fool) -> Bool) {
    lemma3  ~> Refl Type (Fn Fool Bool)
  }

  inferred constraints: 
    I ~ 76
    L ~ 75
    I ~ 78
    I ~ 77
    L ~ 74
    I ~ 81
    I ~ 80
    I ~ 83
    I ~ 82
    L ~ 74
    L ~ 75
    I ~ 76
  
  deferred equalities: 
    75 -> Fn Fool Bool ~ Fn Fool Bool
    74 -> ((_ :79 Fool) -> Bool) ~ Fn Fool Bool
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    Fn Fool Bool ~ Fn Fool Bool
    ((_ :79 Fool) -> Bool) ~ Fn Fool Bool

  lemma3 :I Id Type (Fn Fool Bool) ((_ :I Fool) -> Bool) {
    lemma3  ~> Refl Type (Fn Fool Bool)
  }

inferring  trans :85 (a :86 Type) -> (b :87 Type) -> (c :88 Type) -> (_ :89 Id Type a b) -> (_ :93 Id Type b c) -> Id Type a c {
    forall (a :100 Type).
    trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
  }

  inferred constraints: 
    I ~ 92
    L ~ 91
    L ~ 90
    I ~ 96
    L ~ 95
    L ~ 94
    I ~ 99
    L ~ 98
    L ~ 97
    100 ~ product [86]
    86 ~ 101
    87 ~ 102
    88 ~ 103
    89 ~ 104
    product [89] ≥ sum
      product [I]
    I ~ 105
    I ~ 106
    90 ~ L
    91 ~ L
    92 ~ I
    93 ~ 107
    product [93] ≥ sum
      product [I]
    I ~ 108
    I ~ 109
    94 ~ L
    95 ~ L
    96 ~ I
    100 ≥ sum
      product [I]
    I ~ 111
    I ~ 110
    L ~ 97
    L ~ 98
    I ~ 99
  
  
  variance of evars:
    covariant: []
    contravariant: [86, 87, 88, 89, 93]
  trans :I (a :I Type) -> (b :I Type) -> (c :I Type) -> (_ :I Id Type a b) -> (_ :I Id Type b c) -> Id Type a c {
    forall (a :I Type).
    trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
  }

inferring  boom :19 Id Type ((_ :23 Bool) -> Fool) ((_ :24 Fool) -> Bool) {
    boom  ~> trans ((_ :30 Bool) -> Fool) (Fn Fool Bool) ((_ :33 Fool) -> Bool) (trans ((_ :39 Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
  }

  inferred constraints: 
    I ~ 22
    L ~ 21
    L ~ 20
    I ~ 29
    30 ≥ sum
    I ~ 28
    I ~ 32
    I ~ 31
    I ~ 27
    33 ≥ sum
    I ~ 26
    I ~ 38
    39 ≥ sum
    I ~ 37
    I ~ 41
    I ~ 40
    I ~ 36
    I ~ 43
    I ~ 42
    I ~ 35
    39 ~ I
    I ~ 34
    I ~ 44
    30 ~ 39
    I ~ 25
    33 ~ I
    L ~ 20
    L ~ 21
    I ~ 22
  
  deferred equalities: 
    21 -> ((_ :23 Bool) -> Fool) ~ ((_ :30 Bool) -> Fool)
    20 -> ((_ :24 Fool) -> Bool) ~ ((_ :33 Fool) -> Bool)
  
  variance of evars:
    covariant: []
    contravariant: []
  -> iteration 1
    ((_ :23 Bool) -> Fool) ~ ((_ :30 Bool) -> Fool)
    ((_ :24 Fool) -> Bool) ~ ((_ :33 Fool) -> Bool)

  boom :I Id Type ((_ :I Bool) -> Fool) ((_ :I Fool) -> Bool) {
    boom  ~> trans ((_ :I Bool) -> Fool) (Fn Fool Bool) ((_ :I Fool) -> Bool) (trans ((_ :I Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
  }

inferring  main :84 Type {
    main  ~> Type
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  main :I Type {
    main  ~> Type
  }


###################
# Final valuation #
###################

  0 -> I
  1 -> I
  2 -> I
  3 -> I
  4 -> I
  5 -> I
  6 -> I
  7 -> I
  8 -> I
  9 -> I
  10 -> I
  11 -> I
  12 -> I
  13 -> I
  14 -> L
  15 -> L
  16 -> I
  17 -> I
  18 -> I
  19 -> I
  20 -> L
  21 -> L
  22 -> I
  23 -> I
  24 -> I
  25 -> I
  26 -> I
  27 -> I
  28 -> I
  29 -> I
  30 -> I
  31 -> I
  32 -> I
  33 -> I
  34 -> I
  35 -> I
  36 -> I
  37 -> I
  38 -> I
  39 -> I
  40 -> I
  41 -> I
  42 -> I
  43 -> I
  44 -> I
  45 -> I
  46 -> L
  47 -> L
  48 -> I
  49 -> I
  50 -> I
  51 -> I
  52 -> I
  53 -> I
  54 -> I
  55 -> I
  56 -> I
  57 -> I
  58 -> L
  59 -> L
  60 -> I
  61 -> I
  62 -> I
  63 -> I
  64 -> I
  65 -> I
  66 -> I
  67 -> I
  68 -> I
  69 -> I
  70 -> I
  71 -> I
  72 -> I
  73 -> I
  74 -> L
  75 -> L
  76 -> I
  77 -> I
  78 -> I
  79 -> I
  80 -> I
  81 -> I
  82 -> I
  83 -> I
  84 -> L
  85 -> I
  86 -> I
  87 -> I
  88 -> I
  89 -> I
  90 -> L
  91 -> L
  92 -> I
  93 -> I
  94 -> L
  95 -> L
  96 -> I
  97 -> L
  98 -> L
  99 -> I
  100 -> I
  101 -> I
  102 -> I
  103 -> I
  104 -> I
  105 -> I
  106 -> I
  107 -> I
  108 -> I
  109 -> I
  110 -> I
  111 -> I


#####################
# Annotated program #
#####################

mutual {
  constructor/3 Id :I (a :I Type) -> (_ :L a) -> (_ :L a) -> Type.
  
  constructor/2 Refl :I (a :I Type) -> (x :I a) -> Id a x x.
}

mutual {
  constructor/0 Bool :I Type.
  
  constructor/0 True :I Bool.
  
  constructor/0 False :I Bool.
}

mutual {
  constructor/0 Fool :I Type.
  
  constructor/0 Frue :I Bool.
  
  constructor/0 Talse :I Bool.
}

Fn :I (a :I Type) -> (b :I Type) -> Type {
  forall (a :I Type) (b :I Type).
  Fn a b ~> (_ :I a) -> b
}

lemma1 :I Id Type ((_ :I Bool) -> Fool) (Fn Bool Fool) {
  lemma1  ~> Refl Type (Fn Bool Fool)
}

lemma2 :I (F :I (a :I Type) -> (b :I Type) -> Type) -> Id Type (F Bool Fool) (F Fool Bool) {
  forall (F :I (_ :I Type) -> (_ :I Type) -> Type).
  lemma2 F ~> Refl Type (F Bool Fool)
}

lemma3 :I Id Type (Fn Fool Bool) ((_ :I Fool) -> Bool) {
  lemma3  ~> Refl Type (Fn Fool Bool)
}

trans :I (a :I Type) -> (b :I Type) -> (c :I Type) -> (_ :I Id Type a b) -> (_ :I Id Type b c) -> Id Type a c {
  forall (a :I Type).
  trans a [a] [a] ({Refl} [Type] [a]) ({Refl} [Type] [a]) ~> Refl Type a
}

boom :I Id Type ((_ :I Bool) -> Fool) ((_ :I Fool) -> Bool) {
  boom  ~> trans ((_ :I Bool) -> Fool) (Fn Fool Bool) ((_ :I Fool) -> Bool) (trans ((_ :I Bool) -> Fool) (Fn Bool Fool) (Fn Fool Bool) lemma1 (lemma2 Fn)) lemma3
}

main :L Type {
  main  ~> Type
}

##########
# Erased #
##########

main {
  main  ~> Type
}

################
# NF of `main` #
################

Unerased, reduced:
Type

Erased, reduced:
Type
