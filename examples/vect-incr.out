
#############
# Desugared #
#############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n : Nat) -> Nat.
}

mutual {
  constructor/1 Vect : (_ : Nat) -> Type.
  
  constructor/0 Nil : Vect Z.
  
  constructor/3 Cons : (n : _) -> (_ : Bool) -> (_ : Vect n) -> Vect (S n).
}

length : (n : _) -> (_ : Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n : _) (x : _) (xs : _).
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main : Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

###############
# Elaboration #
###############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Vect : (_ :L Nat) -> Type.
  
  constructor/0 Nil : Vect Z.
  
  constructor/3 Cons : (n :I _0) -> (_ :L Bool) -> (_ :L Vect n) -> Vect (S n).
}

length : (n : _1) -> (_ : Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n : _4) (x : _3) (xs : _2).
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main : Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

Equalities:
  _ty0 = Type
  _0 = Nat
  _0 = Nat
  _ty1 = Type
  _1 = Nat
  _1 = Nat
  _ty4 = Type
  _ty3 = Type
  _ty2 = Type
  _4 = Nat
  _1 = Nat
  _0 = _4
  _3 = Bool
  _2 = Vect n
  _1 = _4
  _2 = Vect n
  _1 = Nat
  _0 = Nat

Solved metas: [_0, _1, _2, _3, _4, _ty0, _ty1, _ty2, _ty3, _ty4]

##############
# Elaborated #
##############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Vect : (_ :L Nat) -> Type.
  
  constructor/0 Nil : Vect Z.
  
  constructor/3 Cons : (n :I Nat) -> (_ :L Bool) -> (_ :L Vect n) -> Vect (S n).
}

length : (n : Nat) -> (_ : Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n : Nat) (x : Bool) (xs : Vect n).
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main : Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

#############
# Evarified #
#############

mutual {
  constructor/0 Bool :0 Type.
  
  constructor/0 True :10 Bool.
  
  constructor/0 False :5 Bool.
}

mutual {
  constructor/0 Nat :6 Type.
  
  constructor/0 Z :12 Nat.
  
  constructor/1 S :9 (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Vect :11 (_ :L Nat) -> Type.
  
  constructor/0 Nil :7 Vect Z.
  
  constructor/3 Cons :1 (n :I Nat) -> (_ :L Bool) -> (_ :L Vect n) -> Vect (S n).
}

length :13 (n :14 Nat) -> (_ :15 Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :22 Nat) (x :21 Bool) (xs :19 Vect n).
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :32 Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}
inferring  mutual {
    constructor/0 Bool :0 Type.
    
    constructor/0 True :10 Bool.
    
    constructor/0 False :5 Bool.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Bool :I Type.
    
    constructor/0 True :I Bool.
    
    constructor/0 False :I Bool.
  }

inferring  mutual {
    constructor/0 Nat :6 Type.
    
    constructor/0 Z :12 Nat.
    
    constructor/1 S :9 (n :L Nat) -> Nat.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Nat :I Type.
    
    constructor/0 Z :I Nat.
    
    constructor/1 S :I (n :L Nat) -> Nat.
  }

inferring  mutual {
    constructor/1 Vect :11 (_ :L Nat) -> Type.
    
    constructor/0 Nil :7 Vect Z.
    
    constructor/3 Cons :1 (n :I Nat) -> (_ :L Bool) -> (_ :L Vect n) -> Vect (S n).
  }

  inferred constraints: 
    L ~ 8
    L ~ 2
    L ~ 3
    L ~ 4
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/1 Vect :I (_ :L Nat) -> Type.
    
    constructor/0 Nil :I Vect Z.
    
    constructor/3 Cons :I (n :I Nat) -> (_ :L Bool) -> (_ :L Vect n) -> Vect (S n).
  }

inferring  length :13 (n :14 Nat) -> (_ :15 Vect n) -> Nat {
    length {Z} Nil ~> Z
    
    forall (n :22 Nat) (x :21 Bool) (xs :19 Vect n).
    length ({S} n) (Cons [n] x xs) ~> S (length n xs)
  }

  inferred constraints: 
    L ~ 16
    14 ~ 17
    product [14] ≥ sum
      product [I]
    15 ~ 18
    product [15] ≥ sum
      product [L]
    16 ~ L
    L ~ 20
    22 ~ product [L, 14]
    21 ~ product [L, 15]
    19 ~ product [L, 15]
    14 ~ 23
    product [14] ≥ sum
      product [I]
    L ~ 24
    15 ~ 25
    product [15] ≥ sum
      product [L]
    I ~ 26
    L ~ 27
    L ~ 28
    L ~ 20
    16 ~ L
    24 ~ L
    22 ≥ sum
      product [14, L]
    21 ≥ sum
    19 ≥ sum
      product [15, L]
    L ~ 29
    14 ~ 31
    15 ~ 30
    16 ~ 20
  
  
  variance of evars:
    covariant: []
    contravariant: [14, 15]
  length :I (n :I Nat) -> (_ :R Vect n) -> Nat {
    length {Z} Nil ~> Z
    
    forall (n :I Nat) (x :R Bool) (xs :R Vect n).
    length ({S} n) (Cons [n] x xs) ~> S (length n xs)
  }

inferring  main :32 Nat {
    main  ~> length (S Z) (Cons Z True Nil)
  }

  inferred constraints: 
    I ~ 34
    L ~ 35
    R ~ 33
    I ~ 38
    L ~ 37
    L ~ 36
    35 ~ L
  
  
  variance of evars:
    covariant: []
    contravariant: []
  main :I Nat {
    main  ~> length (S Z) (Cons Z True Nil)
  }


###################
# Final valuation #
###################

  0 -> I
  1 -> R
  2 -> L
  3 -> L
  4 -> L
  5 -> I
  6 -> I
  7 -> R
  8 -> L
  9 -> R
  10 -> R
  11 -> I
  12 -> R
  13 -> R
  14 -> I
  15 -> R
  16 -> L
  17 -> I
  18 -> R
  19 -> R
  20 -> L
  21 -> R
  22 -> I
  23 -> I
  24 -> L
  25 -> R
  26 -> I
  27 -> L
  28 -> L
  29 -> L
  30 -> R
  31 -> I
  32 -> L
  33 -> R
  34 -> I
  35 -> L
  36 -> L
  37 -> L
  38 -> I


#####################
# Annotated program #
#####################

mutual {
  constructor/0 Bool :I Type.
  
  constructor/0 True :R Bool.
  
  constructor/0 False :I Bool.
}

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :R Nat.
  
  constructor/1 S :R (n :L Nat) -> Nat.
}

mutual {
  constructor/1 Vect :I (_ :L Nat) -> Type.
  
  constructor/0 Nil :R Vect Z.
  
  constructor/3 Cons :R (n :I Nat) -> (_ :L Bool) -> (_ :L Vect n) -> Vect (S n).
}

length :R (n :I Nat) -> (_ :R Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :I Nat) (x :R Bool) (xs :R Vect n).
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :L Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

##########
# Erased #
##########

constructor/0 True.

mutual {
  constructor/0 Z.
  
  constructor/1 S.
}

mutual {
  constructor/0 Nil.
  
  constructor/2 Cons.
}

length {
  length Nil ~> Z
  
  forall (x) (xs).
  length (Cons x xs) ~> S (length xs)
}

main {
  main  ~> length (Cons True Nil)
}

################
# NF of `main` #
################

Unerased, reduced:
S Z

Erased, reduced:
S Z
