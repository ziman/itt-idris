#############
# Desugared #
#############

mutual {
  constructor Bool : Type.
  
  constructor True : Bool.
  
  constructor False : Bool.
}

mutual {
  constructor Nat : Type.
  
  constructor Z : Nat.
  
  constructor S : (n : Nat) -> Nat.
}

mutual {
  constructor Vect : (_ : Nat) -> Type.
  
  constructor Nil : Vect Z.
  
  constructor Cons : (n :I Nat) -> (_ : Bool) -> (_ : Vect n) -> Vect (S n).
}

length : (n : Nat) -> (_ : Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n : Nat) (x : Bool) (xs : Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main : Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}
#############
# Evarified #
#############

mutual {
  constructor Bool :0 Type.
  
  constructor True :13 Bool.
  
  constructor False :7 Bool.
}

mutual {
  constructor Nat :8 Type.
  
  constructor Z :16 Nat.
  
  constructor S :11 (n :12 Nat) -> Nat.
}

mutual {
  constructor Vect :14 (_ :15 Nat) -> Type.
  
  constructor Nil :9 Vect Z.
  
  constructor Cons :1 (n :I Nat) -> (_ :2 Bool) -> (_ :3 Vect n) -> Vect (S n).
}

length :17 (n :18 Nat) -> (_ :19 Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :26 Nat) (x :25 Bool) (xs :23 Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :36 Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}
Running erasure inference...

########################
# Inferred constraints #
########################

1 ≥ sum
  product [36, 19]
9 ≥ sum
  product [36, 3, 19]
11 ≥ sum
  product [17]
  product [36, 18]
13 ≥ sum
  product [36, 2, 19]
16 ≥ sum
  product [17]
  product [36, 12, 18]
  product [36, I, 19]
17 ≥ sum
  product [17, 12]
  product [36]
36 ≥ sum
  product []
15 ~ 10
15 ~ 4
15 ~ 5
12 ~ 6
15 ~ 20
18 ~ 21
product [18] ≥ sum
  product [I]
19 ~ 22
product [19] ≥ sum
  product [L]
20 ~ 10
15 ~ 24
26 ~ product [12, 18]
25 ~ product [2, 19]
23 ~ product [3, 19]
18 ~ 27
product [18] ≥ sum
  product [I]
12 ~ 28
19 ~ 29
product [19] ≥ sum
  product [L]
I ~ 30
2 ~ 31
3 ~ 32
4 ~ 24
20 ~ 5
26 ≥ sum
  product [18, 12]
25 ≥ sum
23 ≥ sum
  product [19, 12]
12 ~ 33
18 ~ 35
19 ~ 34
20 ~ 24
18 ~ 38
12 ~ 39
19 ~ 37
I ~ 42
2 ~ 41
3 ~ 40
4 ~ 10
20 ~ 5
#######################
# Deferred equalities #
#######################

5 -> S n ~ S n
5 -> S Z ~ S Z

#####################
# Variance of evars #
#####################

covariant: []
contravariant: [2, 3, 12, 15, 18, 19]
###################
# Final valuation #
###################

  1 -> R
  2 -> I
  3 -> I
  4 -> I
  5 -> I
  6 -> I
  9 -> I
  10 -> I
  11 -> R
  12 -> I
  13 -> I
  15 -> I
  16 -> R
  17 -> R
  18 -> I
  19 -> L
  20 -> I
  21 -> I
  22 -> L
  23 -> I
  24 -> I
  25 -> I
  26 -> I
  27 -> I
  28 -> I
  29 -> L
  30 -> I
  31 -> I
  32 -> I
  33 -> I
  34 -> L
  35 -> I
  36 -> R
  37 -> L
  38 -> I
  39 -> I
  40 -> I
  41 -> I
  42 -> I

#####################
# Annotated program #
#####################

mutual {
  constructor Bool :I Type.
  
  constructor True :I Bool.
  
  constructor False :I Bool.
}

mutual {
  constructor Nat :I Type.
  
  constructor Z :R Nat.
  
  constructor S :R (n :I Nat) -> Nat.
}

mutual {
  constructor Vect :I (_ :I Nat) -> Type.
  
  constructor Nil :I Vect Z.
  
  constructor Cons :R (n :I Nat) -> (_ :I Bool) -> (_ :I Vect n) -> Vect (S n).
}

length :R (n :I Nat) -> (_ :L Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :I Nat) (x :I Bool) (xs :I Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :R Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}
##########
# Erased #
##########

mutual {
  constructor Z.
  
  constructor S.
}

constructor Cons.

length {
  length Nil ~> Z
  
  length Cons ~> S
}

main {
  main  ~> length Cons
}
################
# NF of `main` #
################

Unerased, reduced:
S Z

Erased, reduced:
S
