#############
# Desugared #
#############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

and : (_ : Bool) -> (_ : Bool) -> Bool {
  and True True ~> True
  
  and True False ~> False
  
  and False True ~> False
  
  and False False ~> False
}

mutual {
  constructor/0 T : Type.
  
  constructor/1 C : (x :L Bool) -> T.
}

fI : (x :I T) -> Bool {
  forall (x :I Bool)
  fI ({C} x) ~> True
}

fE : (x :E T) -> Bool {
  forall (x :E Bool)
  fE ({C} x) ~> True
}

fL : (x :L T) -> Bool {
  forall (x :L Bool)
  fL (C x) ~> x
}

fR : (x :R T) -> Bool {
  forall (x :R Bool)
  fR (C x) ~> and x x
}

main : Type {
  main  ~> Type
}
#############
# Evarified #
#############

mutual {
  constructor/0 Bool :0 Type.
  
  constructor/0 True :4 Bool.
  
  constructor/0 False :2 Bool.
}

and :5 (_ :6 Bool) -> (_ :7 Bool) -> Bool {
  and True True ~> True
  
  and True False ~> False
  
  and False True ~> False
  
  and False False ~> False
}

mutual {
  constructor/0 T :3 Type.
  
  constructor/1 C :1 (x :L Bool) -> T.
}

fI :19 (x :I T) -> Bool {
  forall (x :I Bool)
  fI ({C} x) ~> True
}

fE :16 (x :E T) -> Bool {
  forall (x :E Bool)
  fE ({C} x) ~> True
}

fL :22 (x :L T) -> Bool {
  forall (x :L Bool)
  fL (C x) ~> x
}

fR :25 (x :R T) -> Bool {
  forall (x :R Bool)
  fR (C x) ~> and x x
}

main :30 Type {
  main  ~> Type
}
Running erasure inference...

########################
# Inferred constraints #
########################

2 ≥ sum
  product [5]
  product [5]
  product [5]
4 ≥ sum
  product [5]
  product [19]
  product [16]
5 ≥ sum
  product [25]
30 ≥ sum
  product []
6 ~ 8
product [6] ≥ sum
  product [L]
7 ~ 9
product [7] ≥ sum
  product [L]
6 ~ 10
product [6] ≥ sum
  product [L]
7 ~ 11
product [7] ≥ sum
  product [L]
6 ~ 12
product [6] ≥ sum
  product [L]
7 ~ 13
product [7] ≥ sum
  product [L]
6 ~ 14
product [6] ≥ sum
  product [L]
7 ~ 15
product [7] ≥ sum
  product [L]
I ~ product [L, I]
I ~ 20
product [I] ≥ sum
  product [I]
L ~ 21
I ≥ sum
E ~ product [L, E]
E ~ 17
product [E] ≥ sum
  product [I]
L ~ 18
E ≥ sum
L ~ product [L, L]
L ~ 23
product [L] ≥ sum
  product [L]
L ~ 24
L ≥ sum
  product []
R ~ product [L, R]
R ~ 26
product [R] ≥ sum
  product [L]
L ~ 27
R ≥ sum
  product [6]
  product [7]
6 ~ 29
7 ~ 28
#######################
# Deferred equalities #
#######################


#####################
# Variance of evars #
#####################

covariant: []
contravariant: [6, 7]
###################
# Final valuation #
###################

  2 -> I
  4 -> I
  5 -> I
  6 -> L
  7 -> L
  8 -> L
  9 -> L
  10 -> L
  11 -> L
  12 -> L
  13 -> L
  14 -> L
  15 -> L
  16 -> I
  17 -> E
  18 -> L
  19 -> I
  20 -> I
  21 -> L
  23 -> L
  24 -> L
  25 -> I
  26 -> R
  27 -> L
  28 -> L
  29 -> L
  30 -> L

#####################
# Annotated program #
#####################

mutual {
  constructor/0 Bool :I Type.
  
  constructor/0 True :I Bool.
  
  constructor/0 False :I Bool.
}

and :I (_ :L Bool) -> (_ :L Bool) -> Bool {
  and True True ~> True
  
  and True False ~> False
  
  and False True ~> False
  
  and False False ~> False
}

mutual {
  constructor/0 T :I Type.
  
  constructor/1 C :I (x :L Bool) -> T.
}

fI :I (x :I T) -> Bool {
  forall (x :I Bool)
  fI ({C} x) ~> True
}

fE :I (x :E T) -> Bool {
  forall (x :E Bool)
  fE ({C} x) ~> True
}

fL :I (x :L T) -> Bool {
  forall (x :L Bool)
  fL (C x) ~> x
}

fR :I (x :R T) -> Bool {
  forall (x :R Bool)
  fR (C x) ~> and x x
}

main :L Type {
  main  ~> Type
}
##########
# Erased #
##########

main {
  main  ~> Type
}
################
# NF of `main` #
################

Unerased, reduced:
Type

Erased, reduced:
Type
