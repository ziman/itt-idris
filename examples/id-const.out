#############
# Desugared #
#############

constructor Bool : Type.

constructor True : Bool.

constructor False : Bool.

constructor Pair : Type.

constructor P : (x :L Bool) -> (y :L Bool) -> Pair.

not : (x : Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

false : (x : Bool) -> Bool {
  forall (x : Bool)
  false x ~> False
}

true : (x : Bool) -> Bool {
  forall (x : Bool)
  true x ~> True
}

apply : (f : (_ : Bool) -> Bool) -> (y : Bool) -> Bool {
  forall (f : (_ : Bool) -> Bool) (y : Bool)
  apply f y ~> f y
}

main :L Pair {
  main  ~> P (apply not (true False)) (apply false (true False))
}

#############
# Evarified #
#############

constructor Bool :0 Type.

constructor True :4 Bool.

constructor False :1 Bool.

constructor Pair :3 Type.

constructor P :2 (x :L Bool) -> (y :L Bool) -> Pair.

not :27 (x :28 Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

false :15 (x :16 Bool) -> Bool {
  forall (x :17 Bool)
  false x ~> False
}

true :31 (x :32 Bool) -> Bool {
  forall (x :33 Bool)
  true x ~> True
}

apply :5 (f :6 (_ :7 Bool) -> Bool) -> (y :8 Bool) -> Bool {
  forall (f :10 (_ :11 Bool) -> Bool) (y :9 Bool)
  apply f y ~> f y
}

main :L Pair {
  main  ~> P (apply not (true False)) (apply false (true False))
}

Running erasure inference...

########################
# Inferred constraints #
########################

1 ≥ sum
  product []
  product []
  product [32, 8, L]
  product [32, 8, L]
2 ≥ sum
  product []
4 ≥ sum
  product []
  product []
5 ≥ sum
  product [L]
  product [L]
15 ≥ sum
  product [6, L]
L ≥ sum
  product []
27 ≥ sum
  product [6, L]
31 ≥ sum
  product [8, L]
  product [8, L]
28 ~ 29
product [28] ≥ sum
  product [L]
28 ~ 30
product [28] ≥ sum
  product [L]
17 ~ product [16]
16 ~ 18
17 ≥ sum
33 ~ product [32]
32 ~ 34
33 ≥ sum
10 ~ product [6]
9 ~ product [8]
6 ~ 12
7 ~ 11
8 ~ 13
10 ≥ sum
  product []
9 ≥ sum
  product [11]
11 ~ 14
L ~ 20
6 ~ 22
7 ~ 28
8 ~ 21
32 ~ 23
L ~ 19
6 ~ 25
7 ~ 16
8 ~ 24
32 ~ 26
#######################
# Deferred equalities #
#######################


  -> iteration 1
    -> No more equalities, fixed point reached.

###################
# Final valuation #
###################

  1 -> R
  2 -> L
  4 -> R
  5 -> R
  6 -> L
  7 -> R
  8 -> R
  9 -> R
  10 -> L
  11 -> R
  12 -> L
  13 -> R
  14 -> R
  15 -> L
  16 -> R
  17 -> R
  18 -> R
  19 -> L
  20 -> L
  21 -> R
  22 -> L
  23 -> I
  24 -> R
  25 -> L
  26 -> I
  27 -> L
  28 -> R
  29 -> R
  30 -> R
  31 -> R
  32 -> I
  33 -> I
  34 -> I

#####################
# Annotated program #
#####################

constructor Bool :I Type.

constructor True :R Bool.

constructor False :R Bool.

constructor Pair :I Type.

constructor P :L (x :L Bool) -> (y :L Bool) -> Pair.

not :L (x :R Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

false :L (x :R Bool) -> Bool {
  forall (x :R Bool)
  false x ~> False
}

true :R (x :I Bool) -> Bool {
  forall (x :I Bool)
  true x ~> True
}

apply :R (f :L (_ :R Bool) -> Bool) -> (y :R Bool) -> Bool {
  forall (f :L (_ :R Bool) -> Bool) (y :R Bool)
  apply f y ~> f y
}

main :L Pair {
  main  ~> P (apply not (true False)) (apply false (true False))
}

##########
# Erased #
##########

constructor True : Bool.

constructor False : Bool.

constructor P : (x) -> (y) -> Pair.

not : (x) -> Bool {
  not True ~> False
  
  not False ~> True
}

false : (x) -> Bool {
  forall (x)
  false x ~> False
}

true : Bool {
  true  ~> True
}

apply : (f) -> (y) -> Bool {
  forall (f) (y)
  apply f y ~> f y
}

main : Pair {
  main  ~> P (apply not true) (apply false true)
}

################
# NF of `main` #
################

Unerased, reduced:
P False False

Erased, reduced:
P False False
