#############
# Desugared #
#############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (_ : Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ : Nat) -> Type.
  
  constructor/1 FZ : (n : Nat) -> Fin (S n).
  
  constructor/2 FS : (n : Nat) -> (_ : Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ : Nat) -> (_ : Type) -> Type.
  
  constructor/1 Nil : (a : Type) -> Vect Z a.
  
  constructor/4 Cons : (a : Type) -> (n : Nat) -> (_ : a) -> (_ : Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem : (a : Type) -> (n : Nat) -> (_ : a) -> (_ : Vect n a) -> Type.
  
  constructor/4 Here : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vect n a) -> Elem a n x (Cons a n x xs).
  
  constructor/6 There : (a : Type) -> (n : Nat) -> (x : a) -> (y : a) -> (xs : Vect n a) -> (t :L Elem a n x xs) -> Elem a n x (Cons a n y xs).
}

mutual {
  constructor/0 Typ : Type.
  
  constructor/2 TLam : (_ : Typ) -> (_ : Typ) -> Typ.
  
  constructor/0 TNat : Typ.
}

mutual {
  constructor/3 Term : (n : Nat) -> (_ : Typ) -> (_ : Vect n Typ) -> Type.
  
  constructor/4 Var : (a : Typ) -> (n : Nat) -> (ctx : Vect n Typ) -> (_ : Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam : (a : Typ) -> (n : Nat) -> (ctx : Vect n Typ) -> (b : Typ) -> (_ : Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix : (a : Typ) -> (n : Nat) -> (ctx : Vect n Typ) -> (_ : Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup : (n : Nat) -> (_ : Vect n Typ) -> (_ : Fin n) -> Typ {
  forall (a : Typ) (n : Nat) (ctx : Vect n Typ)
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a : Typ) (n : Nat) (ctx : Vect n Typ) (i : Fin n)
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count : (n : Nat) -> (ctx : Vect n Typ) -> (i : Fin n) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n : Nat) (ctx : Vect n Typ) (a : Typ)
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n : Nat) (ctx : Vect n Typ) (a : Typ) (i : Fin n)
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main : Type {
  main  ~> Type
}
#############
# Evarified #
#############

mutual {
  constructor/0 Nat :83 Type.
  
  constructor/0 Z :138 Nat.
  
  constructor/1 S :88 (_ :89 Nat) -> Nat.
}

mutual {
  constructor/1 Fin :27 (_ :28 Nat) -> Type.
  
  constructor/1 FZ :23 (n :24 Nat) -> Fin (S n).
  
  constructor/2 FS :17 (n :18 Nat) -> (_ :19 Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :135 (_ :136 Nat) -> (_ :137 Type) -> Type.
  
  constructor/1 Nil :84 (a :85 Type) -> Vect Z a.
  
  constructor/4 Cons :0 (a :1 Type) -> (n :2 Nat) -> (_ :3 a) -> (_ :4 Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem :10 (a :11 Type) -> (n :12 Nat) -> (_ :13 a) -> (_ :14 Vect n a) -> Type.
  
  constructor/4 Here :47 (a :48 Type) -> (n :49 Nat) -> (x :50 a) -> (xs :51 Vect n a) -> Elem a n x (Cons a n x xs).
  
  constructor/6 There :100 (a :101 Type) -> (n :102 Nat) -> (x :103 a) -> (y :104 a) -> (xs :105 Vect n a) -> (t :L Elem a n x xs) -> Elem a n x (Cons a n y xs).
}

mutual {
  constructor/0 Typ :120 Type.
  
  constructor/2 TLam :90 (_ :91 Typ) -> (_ :92 Typ) -> Typ.
  
  constructor/0 TNat :93 Typ.
}

mutual {
  constructor/3 Term :94 (n :95 Nat) -> (_ :96 Typ) -> (_ :97 Vect n Typ) -> Type.
  
  constructor/4 Var :121 (a :122 Typ) -> (n :123 Nat) -> (ctx :124 Vect n Typ) -> (_ :127 Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam :62 (a :63 Typ) -> (n :64 Nat) -> (ctx :65 Vect n Typ) -> (b :68 Typ) -> (_ :69 Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix :29 (a :30 Typ) -> (n :31 Nat) -> (ctx :32 Vect n Typ) -> (_ :35 Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup :200 (n :201 Nat) -> (_ :202 Vect n Typ) -> (_ :205 Fin n) -> Typ {
  forall (a :211 Typ) (n :210 Nat) (ctx :207 Vect n Typ)
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a :227 Typ) (n :226 Nat) (ctx :223 Vect n Typ) (i :221 Fin n)
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count :139 (n :140 Nat) -> (ctx :141 Vect n Typ) -> (i :144 Fin n) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n :157 Nat) (ctx :154 Vect n Typ) (a :153 Typ)
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n :177 Nat) (ctx :174 Vect n Typ) (a :173 Typ) (i :171 Fin n)
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main :241 Type {
  main  ~> Type
}
Running erasure inference...

########################
# Inferred constraints #
########################

47 ≥ sum
  product [139]
100 ≥ sum
  product [139]
120 ≥ sum
  product [139, 48]
  product [139, 101]
139 ≥ sum
  product [139, L]
200 ≥ sum
  product [200]
  product [139, 103]
241 ≥ sum
  product []
28 ~ 25
89 ~ 26
28 ~ 20
28 ~ 21
89 ~ 22
136 ~ 87
137 ~ 86
136 ~ 6
137 ~ 5
136 ~ 8
89 ~ 9
137 ~ 7
136 ~ 16
137 ~ 15
136 ~ 53
137 ~ 52
11 ~ 57
12 ~ 56
13 ~ 55
14 ~ 54
1 ~ 61
2 ~ 60
3 ~ 59
4 ~ 58
5 ~ 52
6 ~ 53
15 ~ 7
16 ~ 8
136 ~ 107
137 ~ 106
11 ~ 111
12 ~ 110
13 ~ 109
14 ~ 108
15 ~ 106
16 ~ 107
11 ~ 115
12 ~ 114
13 ~ 113
14 ~ 112
1 ~ 119
2 ~ 118
3 ~ 117
4 ~ 116
5 ~ 106
6 ~ 107
15 ~ 7
16 ~ 8
136 ~ 99
137 ~ 98
136 ~ 126
137 ~ 125
11 ~ 131
12 ~ 130
13 ~ 129
14 ~ 128
15 ~ 125
16 ~ 126
95 ~ 134
96 ~ 133
97 ~ 132
98 ~ 125
99 ~ 126
136 ~ 67
137 ~ 66
95 ~ 72
89 ~ 73
96 ~ 71
97 ~ 70
1 ~ 77
2 ~ 76
3 ~ 75
4 ~ 74
5 ~ 66
6 ~ 67
98 ~ 7
99 ~ 8
95 ~ 80
96 ~ 79
91 ~ 82
92 ~ 81
97 ~ 78
98 ~ 66
99 ~ 67
136 ~ 34
137 ~ 33
95 ~ 38
89 ~ 39
96 ~ 37
97 ~ 36
1 ~ 43
2 ~ 42
3 ~ 41
4 ~ 40
5 ~ 33
6 ~ 34
98 ~ 7
99 ~ 8
95 ~ 46
96 ~ 45
97 ~ 44
98 ~ 33
99 ~ 34
136 ~ 204
137 ~ 203
28 ~ 206
136 ~ 209
137 ~ 208
211 ~ product [3, 202]
210 ~ product [89, 201]
207 ~ product [4, 202]
201 ~ 212
product [201] ≥ sum
  product [I]
89 ~ 213
202 ~ 214
product [202] ≥ sum
  product [I]
1 ~ 215
2 ~ 216
3 ~ 217
4 ~ 218
5 ~ 208
6 ~ 209
203 ~ 7
204 ~ 8
205 ~ 219
product [205] ≥ sum
  product [L]
24 ~ 220
206 ~ 25
211 ≥ sum
  product []
210 ≥ sum
207 ≥ sum
136 ~ 225
137 ~ 224
28 ~ 222
227 ~ product [3, 202]
226 ~ product [89, 201]
223 ~ product [4, 202]
221 ~ product [19, 205]
201 ~ 228
product [201] ≥ sum
  product [I]
89 ~ 229
202 ~ 230
product [202] ≥ sum
  product [I]
1 ~ 231
2 ~ 232
3 ~ 233
4 ~ 234
5 ~ 224
6 ~ 225
203 ~ 7
204 ~ 8
205 ~ 235
product [205] ≥ sum
  product [L]
18 ~ 236
19 ~ 237
20 ~ 222
206 ~ 21
227 ≥ sum
226 ≥ sum
  product [201]
223 ≥ sum
  product [202]
221 ≥ sum
  product [205]
201 ~ 240
202 ~ 239
203 ~ 224
204 ~ 225
205 ~ 238
206 ~ 222
136 ~ 143
137 ~ 142
28 ~ 145
11 ~ 149
12 ~ 148
13 ~ 147
201 ~ 152
202 ~ 151
203 ~ 142
204 ~ 143
205 ~ 150
206 ~ 145
14 ~ 146
15 ~ 142
16 ~ 143
136 ~ 156
137 ~ 155
157 ~ product [89, 140]
154 ~ product [4, 141]
153 ~ product [3, 141]
140 ~ 158
product [140] ≥ sum
  product [I]
89 ~ 159
141 ~ 160
product [141] ≥ sum
  product [I]
1 ~ 161
2 ~ 162
3 ~ 163
4 ~ 164
5 ~ 155
6 ~ 156
142 ~ 7
143 ~ 8
144 ~ 165
product [144] ≥ sum
  product [L]
24 ~ 166
145 ~ 25
157 ≥ sum
  product [49]
154 ≥ sum
  product [51]
153 ≥ sum
  product [50]
48 ~ 170
49 ~ 169
50 ~ 168
51 ~ 167
52 ~ 155
53 ~ 156
54 ~ 146
55 ~ 147
56 ~ 148
57 ~ 149
136 ~ 176
137 ~ 175
28 ~ 172
177 ~ product [89, 140]
174 ~ product [4, 141]
173 ~ product [3, 141]
171 ~ product [19, 144]
140 ~ 178
product [140] ≥ sum
  product [I]
89 ~ 179
141 ~ 180
product [141] ≥ sum
  product [I]
1 ~ 181
2 ~ 182
3 ~ 183
4 ~ 184
5 ~ 175
6 ~ 176
142 ~ 7
143 ~ 8
144 ~ 185
product [144] ≥ sum
  product [L]
18 ~ 186
19 ~ 187
20 ~ 172
145 ~ 21
177 ≥ sum
  product [102]
  product [201, 103]
  product [140, L]
174 ≥ sum
  product [202, 103]
  product [105]
  product [141, L]
173 ≥ sum
  product [104]
171 ≥ sum
  product [205, 103]
  product [144, L]
101 ~ 193
102 ~ 192
103 ~ 191
201 ~ 196
202 ~ 195
203 ~ 175
204 ~ 176
205 ~ 194
206 ~ 172
104 ~ 190
105 ~ 189
106 ~ 175
107 ~ 176
L ~ 188
140 ~ 199
141 ~ 198
142 ~ 175
143 ~ 176
144 ~ 197
145 ~ 172
108 ~ 146
109 ~ 147
110 ~ 148
111 ~ 149
112 ~ 146
113 ~ 147
114 ~ 148
115 ~ 149
#######################
# Deferred equalities #
#######################

8 -> S n ~ n
8 -> S n ~ n
8 -> S n ~ S n
8 -> S n ~ S n
8 -> S n ~ S n
25 -> S n ~ S n
8 -> S n ~ S n
21 -> S n ~ S n
8 -> S n ~ S n
25 -> S n ~ S n
148 -> S n ~ n
147 -> lookup (S n) (Cons Typ n a ctx) (FZ n) ~ a
146 -> Cons Typ n a ctx ~ Cons Typ n a ctx
8 -> S n ~ S n
21 -> S n ~ S n
147 -> lookup n ctx i ~ lookup n ctx i
148 -> S n ~ n
147 -> lookup (S n) (Cons Typ n a ctx) (FS n i) ~ lookup n ctx i
146 -> Cons Typ n a ctx ~ Cons Typ n a ctx

#####################
# Variance of evars #
#####################

covariant: []
contravariant: [1, 2, 3, 4, 11, 12, 13, 14, 18, 19, 24, 28, 30, 31, 32, 35, 48, 49, 50, 51, 63, 64, 65, 68, 69, 85, 89, 91, 92, 95, 96, 97, 101, 102, 103, 104, 105, 122, 123, 124, 127, 136, 137, 140, 141, 144, 201, 202, 205]
###################
# Final valuation #
###################

  1 -> I
  2 -> I
  3 -> L
  4 -> L
  5 -> I
  6 -> I
  7 -> I
  8 -> I
  9 -> I
  11 -> I
  12 -> I
  13 -> I
  14 -> I
  15 -> I
  16 -> I
  18 -> I
  19 -> L
  20 -> I
  21 -> I
  22 -> I
  24 -> I
  25 -> I
  26 -> I
  28 -> I
  30 -> I
  31 -> I
  32 -> I
  33 -> I
  34 -> I
  35 -> I
  36 -> I
  37 -> I
  38 -> I
  39 -> I
  40 -> L
  41 -> L
  42 -> I
  43 -> I
  44 -> I
  45 -> I
  46 -> I
  47 -> I
  48 -> I
  49 -> I
  50 -> I
  51 -> I
  52 -> I
  53 -> I
  54 -> I
  55 -> I
  56 -> I
  57 -> I
  58 -> L
  59 -> L
  60 -> I
  61 -> I
  63 -> I
  64 -> I
  65 -> I
  66 -> I
  67 -> I
  68 -> I
  69 -> I
  70 -> I
  71 -> I
  72 -> I
  73 -> I
  74 -> L
  75 -> L
  76 -> I
  77 -> I
  78 -> I
  79 -> I
  80 -> I
  81 -> I
  82 -> I
  85 -> I
  86 -> I
  87 -> I
  89 -> I
  91 -> I
  92 -> I
  95 -> I
  96 -> I
  97 -> I
  98 -> I
  99 -> I
  100 -> I
  101 -> I
  102 -> I
  103 -> I
  104 -> I
  105 -> I
  106 -> I
  107 -> I
  108 -> I
  109 -> I
  110 -> I
  111 -> I
  112 -> I
  113 -> I
  114 -> I
  115 -> I
  116 -> L
  117 -> L
  118 -> I
  119 -> I
  120 -> I
  122 -> I
  123 -> I
  124 -> I
  125 -> I
  126 -> I
  127 -> I
  128 -> I
  129 -> I
  130 -> I
  131 -> I
  132 -> I
  133 -> I
  134 -> I
  136 -> I
  137 -> I
  139 -> I
  140 -> I
  141 -> I
  142 -> I
  143 -> I
  144 -> L
  145 -> I
  146 -> I
  147 -> I
  148 -> I
  149 -> I
  150 -> L
  151 -> R
  152 -> I
  153 -> I
  154 -> I
  155 -> I
  156 -> I
  157 -> I
  158 -> I
  159 -> I
  160 -> I
  161 -> I
  162 -> I
  163 -> L
  164 -> L
  165 -> L
  166 -> I
  167 -> I
  168 -> I
  169 -> I
  170 -> I
  171 -> L
  172 -> I
  173 -> I
  174 -> I
  175 -> I
  176 -> I
  177 -> I
  178 -> I
  179 -> I
  180 -> I
  181 -> I
  182 -> I
  183 -> L
  184 -> L
  185 -> L
  186 -> I
  187 -> L
  188 -> L
  189 -> I
  190 -> I
  191 -> I
  192 -> I
  193 -> I
  194 -> L
  195 -> R
  196 -> I
  197 -> L
  198 -> I
  199 -> I
  200 -> I
  201 -> I
  202 -> R
  203 -> I
  204 -> I
  205 -> L
  206 -> I
  207 -> R
  208 -> I
  209 -> I
  210 -> I
  211 -> R
  212 -> I
  213 -> I
  214 -> R
  215 -> I
  216 -> I
  217 -> L
  218 -> L
  219 -> L
  220 -> I
  221 -> L
  222 -> I
  223 -> R
  224 -> I
  225 -> I
  226 -> I
  227 -> R
  228 -> I
  229 -> I
  230 -> R
  231 -> I
  232 -> I
  233 -> L
  234 -> L
  235 -> L
  236 -> I
  237 -> L
  238 -> L
  239 -> R
  240 -> I
  241 -> L

#####################
# Annotated program #
#####################

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :I Nat.
  
  constructor/1 S :I (_ :I Nat) -> Nat.
}

mutual {
  constructor/1 Fin :I (_ :I Nat) -> Type.
  
  constructor/1 FZ :I (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :I (_ :I Nat) -> (_ :I Type) -> Type.
  
  constructor/1 Nil :I (a :I Type) -> Vect Z a.
  
  constructor/4 Cons :I (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem :I (a :I Type) -> (n :I Nat) -> (_ :I a) -> (_ :I Vect n a) -> Type.
  
  constructor/4 Here :I (a :I Type) -> (n :I Nat) -> (x :I a) -> (xs :I Vect n a) -> Elem a n x (Cons a n x xs).
  
  constructor/6 There :I (a :I Type) -> (n :I Nat) -> (x :I a) -> (y :I a) -> (xs :I Vect n a) -> (t :L Elem a n x xs) -> Elem a n x (Cons a n y xs).
}

mutual {
  constructor/0 Typ :I Type.
  
  constructor/2 TLam :I (_ :I Typ) -> (_ :I Typ) -> Typ.
  
  constructor/0 TNat :I Typ.
}

mutual {
  constructor/3 Term :I (n :I Nat) -> (_ :I Typ) -> (_ :I Vect n Typ) -> Type.
  
  constructor/4 Var :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :I Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (b :I Typ) -> (_ :I Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :I Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup :I (n :I Nat) -> (_ :R Vect n Typ) -> (_ :L Fin n) -> Typ {
  forall (a :R Typ) (n :I Nat) (ctx :R Vect n Typ)
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a :R Typ) (n :I Nat) (ctx :R Vect n Typ) (i :L Fin n)
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count :I (n :I Nat) -> (ctx :I Vect n Typ) -> (i :L Fin n) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n :I Nat) (ctx :I Vect n Typ) (a :I Typ)
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n :I Nat) (ctx :I Vect n Typ) (a :I Typ) (i :L Fin n)
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main :L Type {
  main  ~> Type
}
##########
# Erased #
##########

main {
  main  ~> Type
}
################
# NF of `main` #
################

Unerased, reduced:
Type

Erased, reduced:
Type
