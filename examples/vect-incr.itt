%options "--incremental"

data Bool : Type {
  True : Bool,
  False : Bool
}

data Nat : Type {
  Z : Nat,
  S : (n : Nat) -> Nat
}

data Vect : Nat -> Type {
  Nil : Vect Z,
  Cons : (n :I Nat) -> Bool -> Vect n -> Vect (S n)
}

-- we needed only one explicit annotation
-- since constructor fields are linear by default,
-- the index of Cons needs explicit erasing

length : (n : Nat) -> Vect n -> Nat {
  length {Z} Nil ~> Z,

  forall (n : Nat) (x : Bool) (xs : Vect n).
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main : Nat ~>
  length (S Z) (Cons Z True Nil).
