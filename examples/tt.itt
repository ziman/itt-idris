%incremental

data Nat : Type {
  Z : Nat,
  S : (n : Nat) -> Nat
}

data Fin : Nat -> Type {
  FZ : (n :I Nat) -> Fin (S n),
  FS : (n :I Nat) -> Fin n -> Fin (S n)
}

data Vect : Nat -> Type -> Type {
  VN : (a :I Type) -> Vect Z a,
  VC : (n :I Nat) -> (a :I Type) -> a -> Vect n a -> Vect (S n) a
}

data TT : Nat -> Type {
  V : (n :I Nat) -> Fin n -> TT n,
  Lam : (n :I Nat) -> TT (S n) -> TT n,
  App : (n :I Nat) -> TT n -> TT n -> TT n
}

env : (m : Nat) -> (n : Nat) -> Vect m (TT n) -> Fin m -> TT n {
  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n))
  env [S m] n (VC [m] [TT n] x xs) (FZ m) ~> x,

  forall (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m)
  env [S m] n (VC [m] [TT n] x xs) (FS m i) ~> env m n xs i
}

extendMap : (m : Nat) -> (n : Nat) -> (Fin m -> Fin n) -> Fin (S m) -> Fin (S n) {
  forall (m : Nat) (n : Nat) (f : Fin m -> Fin n)
  extendMap m n f (FZ [m]) ~> FZ n,

  forall (m : Nat) (n : Nat) (f : Fin m -> Fin n) (i : Fin m)
  extendMap m n f (FS [m] i) ~> FS n (f i)
}

mapVars : (m : Nat) -> (n : Nat) -> (Fin m -> Fin n) -> TT m -> TT n {
  forall (m : Nat) (n : Nat) (f : Fin m -> Fin n) (i : Fin m)
  mapVars m n f (V [m] i) ~> V n (f i),

  forall (m : Nat) (n : Nat) (f : Fin m -> Fin n) (x : TT (S m))
  mapVars m n f (Lam [m] x)
    ~> Lam n (mapVars (S m) (S n) (extendMap m n f) x),

  forall (m : Nat) (n : Nat) (f : Fin m -> Fin n) (g : TT m) (x : TT m)
  mapVars m n f (App [m] g x)
    ~> App n (mapVars m n f g) (mapVars m n f x)
}

extendSubst : (m : Nat) -> (n : Nat) -> (Fin m -> TT n) -> Fin (S m) -> TT (S n) {
  forall (m : Nat) (n : Nat) (f : Fin m -> TT n)
  extendSubst m n f (FZ [m]) ~> V (S n) (FZ n),

  forall (m : Nat) (n : Nat) (f : Fin m -> TT n) (i : Fin m)
  extendSubst m n f (FS [m] i) ~> mapVars n (S n) (FS n) (f i)
}

substVars : (m : Nat) -> (n : Nat) -> (Fin m -> TT n) -> TT m -> TT n {
  forall (m : Nat) (n : Nat) (f : Fin m -> TT n) (i : Fin m)
  substVars m n f (V [m] i) ~> f i,

  forall (m : Nat) (n : Nat) (f : Fin m -> TT n) (x : TT (S m))
  substVars m n f (Lam [m] x)
    ~> Lam n (substVars (S m) (S n) (extendSubst m n f) x),

  forall (m : Nat) (n : Nat) (f : Fin m -> TT n) (g : TT m) (x : TT m)
  substVars m n f (App [m] g x)
    ~> App n (substVars m n f g) (substVars m n f x)
}

testTm : TT 1 ~>
    App 1
        (Lam 1
            (App 2
                (V 2 (FZ 1))
                (V 2 (FS 1 (FZ 0)))))
        (Lam 1
            (App 2
                (V 2 (FS 1 (FZ 0)))
                (V 2 (FZ 1)))).

example1 : TT 0
    ~> substVars 1 0 (env 1 0 (VC 0 (TT 0) (Lam 0 (V 1 (FZ 0))) (VN (TT 0)))) testTm.

substTop : (n : Nat) -> TT n -> Fin (S n) -> TT n {
  forall (n : Nat) (tm : TT n)
  substTop n tm (FZ [n]) ~> tm,

  forall (n : Nat) (tm : TT n) (i : Fin n)
  substTop n tm (FS [n] i) ~> V n i
}

redex : (m : Nat) -> TT m -> TT m -> TT m {
  forall (m : Nat) (y : TT (S m)) (x : TT m)
  redex m (Lam [m] y) x
    ~> nf m (substVars (S m) m (substTop m (nf m x)) y),

  forall (m : Nat) (f' : TT m) (x : TT m)
  redex m f' x ~> App m f' (nf m x)
}

nf : (m : Nat) -> TT m -> TT m {
  forall (m : Nat) (i : Fin m)
  nf m (V [m] i) ~> V m i,

  forall (m : Nat) (x : TT (S m))
  nf m (Lam [m] x) ~> Lam m (nf (S m) x),

  forall (m : Nat) (f : TT m) (x : TT m)
  nf m (App [m] f x) ~> redex m f x
}

example2 : TT 1 ~> nf 1 testTm.

data Result : Type {
  R : (x :L TT 0) -> (y :L TT 1) -> Result
}

main : Result ~> R example1 example2.
