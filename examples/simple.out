
#############
# Desugared #
#############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 T : Type.
  
  constructor/1 C : (pf :I Bool) -> T.
}

postulate U : (t :E T) -> Type.

postulate g : (x :L U (C True)) -> Bool.

postulate b : Bool.

postulate d : U (C b).

not : (x : Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

id : (a : Type) -> (x : a) -> a {
  forall (a : Type) (x : a).
  id a x ~> x
}

main :L Bool {
  main  ~> (\x : U (C False). g x) d
}

###############
# Elaboration #
###############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 T : Type.
  
  constructor/1 C : (pf :I Bool) -> T.
}

postulate U : (t :E T) -> Type.

postulate g : (x :L U (C True)) -> Bool.

postulate b : Bool.

postulate d : U (C b).

not : (x : Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

id : (a : Type) -> (x : a) -> a {
  forall (a : Type) (x : a).
  id a x ~> x
}

main :L Bool {
  main  ~> (\x : U (C False). g x) d
}

Equalities:


Solved metas: []

##############
# Elaborated #
##############

mutual {
  constructor/0 Bool : Type.
  
  constructor/0 True : Bool.
  
  constructor/0 False : Bool.
}

mutual {
  constructor/0 T : Type.
  
  constructor/1 C : (pf :I Bool) -> T.
}

postulate U : (t :E T) -> Type.

postulate g : (x :L U (C True)) -> Bool.

postulate b : Bool.

postulate d : U (C b).

not : (x : Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

id : (a : Type) -> (x : a) -> a {
  forall (a : Type) (x : a).
  id a x ~> x
}

main :L Bool {
  main  ~> (\x : U (C False). g x) d
}

#############
# Evarified #
#############

mutual {
  constructor/0 Bool :0 Type.
  
  constructor/0 True :4 Bool.
  
  constructor/0 False :2 Bool.
}

mutual {
  constructor/0 T :3 Type.
  
  constructor/1 C :1 (pf :I Bool) -> T.
}

postulate U :5 (t :E T) -> Type.

postulate g :10 (x :L U (C True)) -> Bool.

postulate b :6 Bool.

postulate d :7 U (C b).

not :25 (x :26 Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

id :13 (a :14 Type) -> (x :15 a) -> a {
  forall (a :17 Type) (x :16 a).
  id a x ~> x
}

main :L Bool {
  main  ~> (\x :21 U (C False). g x) d
}
Running erasure inference...


########################
# Inferred constraints #
########################

2 ≥ sum
  product [25]
4 ≥ sum
  product [25]
7 ≥ sum
  product [L, 21]
10 ≥ sum
  product [L]
L ≥ sum
  product []
E ~ 11
I ~ 12
E ~ 8
I ~ 9
26 ~ 27
product [26] ≥ sum
  product [L]
26 ~ 28
product [26] ≥ sum
  product [L]
17 ~ product [14]
16 ~ product [15]
14 ~ 18
15 ~ 19
17 ≥ sum
16 ≥ sum
  product []
E ~ 22
I ~ 23
21 ≥ sum
  product [L]
L ~ 24
11 ~ 22
21 ~ 20
22 ~ 8

#######################
# Deferred equalities #
#######################

22 -> C False ~ C True
8 -> C b ~ C False


#####################
# Variance of evars #
#####################

covariant: []
contravariant: [14, 15, 26]
  -> iteration 1
    C False ~ C True
    C b ~ C False


###################
# Final valuation #
###################

  2 -> I
  4 -> I
  7 -> R
  8 -> E
  9 -> I
  10 -> L
  11 -> E
  12 -> I
  14 -> I
  15 -> L
  16 -> L
  17 -> I
  18 -> I
  19 -> L
  20 -> R
  21 -> R
  22 -> E
  23 -> I
  24 -> L
  25 -> I
  26 -> L
  27 -> L
  28 -> L


#####################
# Annotated program #
#####################

mutual {
  constructor/0 Bool :I Type.
  
  constructor/0 True :I Bool.
  
  constructor/0 False :I Bool.
}

mutual {
  constructor/0 T :I Type.
  
  constructor/1 C :I (pf :I Bool) -> T.
}

postulate U :I (t :E T) -> Type.

postulate g :L (x :L U (C True)) -> Bool.

postulate b :I Bool.

postulate d :R U (C b).

not :I (x :L Bool) -> Bool {
  not True ~> False
  
  not False ~> True
}

id :I (a :I Type) -> (x :L a) -> a {
  forall (a :I Type) (x :L a).
  id a x ~> x
}

main :L Bool {
  main  ~> (\x :R U (C False). g x) d
}

##########
# Erased #
##########

postulate g.

postulate d.

main {
  main  ~> (\x. g x) d
}

################
# NF of `main` #
################

Unerased, reduced:
g d

Erased, reduced:
g d
