#############
# Desugared #
#############

constructor Bool : Type.

constructor True : Bool.

constructor False : Bool.

constructor Nat : Type.

constructor Z : Nat.

constructor S : (n :L Nat) -> Nat.

constructor Vect : (_ : Nat) -> Type.

constructor Nil : Vect Z.

constructor Cons : (n : Nat) -> (_ : Bool) -> (_ : Vect n) -> Vect (S n).

length : (n : Nat) -> (_ : Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n : Nat) (x : Bool) (xs : Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main : Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

#############
# Evarified #
#############

constructor Bool :0 Type.

constructor True :13 Bool.

constructor False :8 Bool.

constructor Nat :9 Type.

constructor Z :16 Nat.

constructor S :12 (n :L Nat) -> Nat.

constructor Vect :14 (_ :15 Nat) -> Type.

constructor Nil :10 Vect Z.

constructor Cons :1 (n :2 Nat) -> (_ :3 Bool) -> (_ :4 Vect n) -> Vect (S n).

length :17 (n :18 Nat) -> (_ :19 Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :26 Nat) (x :25 Bool) (xs :23 Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :36 Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

Running erasure inference...

########################
# Inferred constraints #
########################

1 ≥ sum
  product [19]
10 ≥ sum
  product [4, 19]
12 ≥ sum
  product []
  product [18]
13 ≥ sum
  product [3, 19]
16 ≥ sum
  product []
  product [L, 18]
  product [2, 19]
17 ≥ sum
  product [L]
  product []
36 ≥ sum
  product []
15 ~ 11
15 ~ 5
15 ~ 6
L ~ 7
15 ~ 20
18 ~ 21
product [18] ≥ sum
  product [I]
19 ~ 22
product [19] ≥ sum
  product [L]
20 ~ 11
15 ~ 24
26 ~ product [L, 18]
25 ~ product [3, 19]
23 ~ product [4, 19]
18 ~ 27
product [18] ≥ sum
  product [I]
L ~ 28
19 ~ 29
product [19] ≥ sum
  product [L]
2 ~ 30
3 ~ 31
4 ~ 32
5 ~ 24
20 ~ 6
26 ≥ sum
  product [18, L]
25 ≥ sum
23 ≥ sum
  product [19, L]
L ~ 33
18 ~ 35
19 ~ 34
20 ~ 24
18 ~ 38
L ~ 39
19 ~ 37
2 ~ 42
3 ~ 41
4 ~ 40
5 ~ 11
20 ~ 6
#######################
# Deferred equalities #
#######################

6 -> S n ~ S n
6 -> S Z ~ S Z

  -> iteration 1
    -> No more equalities, fixed point reached.

###################
# Final valuation #
###################

  1 -> L
  2 -> I
  3 -> I
  4 -> L
  5 -> I
  6 -> I
  7 -> L
  10 -> L
  11 -> I
  12 -> L
  13 -> I
  15 -> I
  16 -> L
  17 -> R
  18 -> I
  19 -> L
  20 -> I
  21 -> I
  22 -> L
  23 -> L
  24 -> I
  25 -> I
  26 -> I
  27 -> I
  28 -> L
  29 -> L
  30 -> I
  31 -> I
  32 -> L
  33 -> L
  34 -> L
  35 -> I
  36 -> L
  37 -> L
  38 -> I
  39 -> L
  40 -> L
  41 -> I
  42 -> I

#####################
# Annotated program #
#####################

constructor Bool :I Type.

constructor True :I Bool.

constructor False :I Bool.

constructor Nat :I Type.

constructor Z :L Nat.

constructor S :L (n :L Nat) -> Nat.

constructor Vect :I (_ :I Nat) -> Type.

constructor Nil :L Vect Z.

constructor Cons :L (n :I Nat) -> (_ :I Bool) -> (_ :L Vect n) -> Vect (S n).

length :R (n :I Nat) -> (_ :L Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :I Nat) (x :I Bool) (xs :L Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :L Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

##########
# Erased #
##########

constructor Z : Nat.

constructor S : (n) -> Nat.

constructor Nil : Vect.

constructor Cons : (_) -> Vect.

length : (_) -> Nat {
  length Nil ~> Z
  
  forall (xs)
  length (Cons xs) ~> S (length xs)
}

main : Nat {
  main  ~> length (Cons Nil)
}

################
# NF of `main` #
################

Unerased, reduced:
S Z

Erased, reduced:
S Z
