#############
# Desugared #
#############

constructor Bool : Type.

constructor True : Bool.

constructor False : Bool.

constructor Nat : Type.

constructor Z : Nat.

constructor S : (n :L Nat) -> Nat.

constructor Vect : (_ : Nat) -> Type.

constructor Nil : Vect Z.

constructor Cons : (n :I Nat) -> (_ : Bool) -> (_ : Vect n) -> Vect (S n).

length : (n : Nat) -> (_ : Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n : Nat) (x : Bool) (xs : Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :L Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

#############
# Evarified #
#############

constructor Bool :0 Type.

constructor True :12 Bool.

constructor False :7 Bool.

constructor Nat :8 Type.

constructor Z :15 Nat.

constructor S :11 (n :L Nat) -> Nat.

constructor Vect :13 (_ :14 Nat) -> Type.

constructor Nil :9 Vect Z.

constructor Cons :1 (n :I Nat) -> (_ :2 Bool) -> (_ :3 Vect n) -> Vect (S n).

length :16 (n :17 Nat) -> (_ :18 Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :25 Nat) (x :24 Bool) (xs :22 Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :L Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

Running erasure inference...

########################
# Inferred constraints #
########################

1 ≥ sum
  product [18]
9 ≥ sum
  product [3, 18]
11 ≥ sum
  product []
  product [17]
12 ≥ sum
  product [2, 18]
15 ≥ sum
  product []
  product [L, 17]
  product [I, 18]
16 ≥ sum
  product [L]
  product []
14 ~ 10
14 ~ 4
14 ~ 5
L ~ 6
14 ~ 19
17 ~ 20
product [17] ≥ sum
  product [I]
18 ~ 21
product [18] ≥ sum
  product [L]
19 ~ 10
14 ~ 23
25 ~ product [L, 17]
24 ~ product [2, 18]
22 ~ product [3, 18]
17 ~ 26
product [17] ≥ sum
  product [I]
L ~ 27
18 ~ 28
product [18] ≥ sum
  product [L]
I ~ 29
2 ~ 30
3 ~ 31
4 ~ 23
19 ~ 5
25 ≥ sum
  product [17, L]
24 ≥ sum
22 ≥ sum
  product [18, L]
L ~ 32
17 ~ 34
18 ~ 33
19 ~ 23
17 ~ 36
L ~ 37
18 ~ 35
I ~ 40
2 ~ 39
3 ~ 38
4 ~ 10
19 ~ 5
#######################
# Deferred equalities #
#######################

5 -> S n ~ S n
5 -> S Z ~ S Z

  -> iteration 1
    -> No more equalities, fixed point reached.

###################
# Final valuation #
###################

  1 -> L
  2 -> I
  3 -> L
  4 -> I
  5 -> I
  6 -> L
  9 -> L
  10 -> I
  11 -> L
  12 -> I
  14 -> I
  15 -> L
  16 -> R
  17 -> I
  18 -> L
  19 -> I
  20 -> I
  21 -> L
  22 -> L
  23 -> I
  24 -> I
  25 -> I
  26 -> I
  27 -> L
  28 -> L
  29 -> I
  30 -> I
  31 -> L
  32 -> L
  33 -> L
  34 -> I
  35 -> L
  36 -> I
  37 -> L
  38 -> L
  39 -> I
  40 -> I

#####################
# Annotated program #
#####################

constructor Bool :I Type.

constructor True :I Bool.

constructor False :I Bool.

constructor Nat :I Type.

constructor Z :L Nat.

constructor S :L (n :L Nat) -> Nat.

constructor Vect :I (_ :I Nat) -> Type.

constructor Nil :L Vect Z.

constructor Cons :L (n :I Nat) -> (_ :I Bool) -> (_ :L Vect n) -> Vect (S n).

length :R (n :I Nat) -> (_ :L Vect n) -> Nat {
  length {Z} Nil ~> Z
  
  forall (n :I Nat) (x :I Bool) (xs :L Vect n)
  length ({S} n) (Cons [n] x xs) ~> S (length n xs)
}

main :L Nat {
  main  ~> length (S Z) (Cons Z True Nil)
}

###############
# Final check #
###############

##########
# Erased #
##########

constructor Z : Nat.

constructor S : (n) -> Nat.

constructor Nil : Vect.

constructor Cons : (_) -> Vect.

length : (_) -> Nat {
  length Nil ~> Z
  
  forall (xs)
  length (Cons xs) ~> S (length xs)
}

main : Nat {
  main  ~> length (Cons Nil)
}

################
# NF of `main` #
################

Unerased, reduced:
S Z

Erased, reduced:
S Z
