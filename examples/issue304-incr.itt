-- https://github.com/edwinb/Idris2/issues/304
%options "--incremental" "--default-constructor-quantities"

data Nat : Type {
  Z : Nat,
  S : Nat -> Nat
}

data Fin : Nat -> Type {
  FZ : forall n. Fin (S n),
  FS : forall n. Fin n -> Fin (S n)
}

data Vect : Nat -> Type -> Type {
  Nil : forall a. Vect Z a,
  Cons : forall a n. a -> Vect n a -> Vect (S n) a
}

-- we need to give explicit types here
-- until the handling of soft unification constraints is fixed
data Elem : forall a n. a -> Vect n a -> Type {
  Here : forall a n (x :I a) xs.
    Elem a (S n) x (Cons a n x xs),
  There : forall a n (x :I a) (y :I a) xs.
    Elem a n x xs -> Elem a (S n) x (Cons a n y xs)
}

data Typ : Type {
  TLam : Typ -> Typ -> Typ,
  TNat : Typ
}

data Term : forall n. Typ -> Vect n Typ -> Type {
  Var : forall a n ctx.
    Elem Typ n a ctx
    -> Term n a ctx,
  Lam : forall a n ctx b.
    Term (S n) b (Cons Typ n a ctx)
    -> Term n (TLam a b) ctx,
  Fix : forall a n ctx.
    Term (S n) a (Cons Typ n a ctx)
    -> Term n a ctx
}

lookup : forall n. Vect n Typ -> Fin n -> Typ {
  forall a n ctx.
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a,

  forall a n ctx i.
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count : forall n ctx i. Elem Typ n (lookup n ctx i) ctx {
  forall n ctx a.
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx,

  forall n ctx a i.
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main : Type ~> Type.
