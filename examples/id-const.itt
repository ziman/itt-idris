data Bool : Type {
  True : Bool,
  False : Bool
}

data Pair : Type {
  P : (x :L Bool) -> (y :L Bool) -> Pair
}

not : (x : Bool) -> Bool {
  not True ~> False,
  not False ~> True
}

false : (x : Bool) -> Bool {
  forall (x : Bool)
  false x ~> False
}

true : (x : Bool) -> Bool {
  forall (x : Bool)
  true x ~> True
}

apply : (f : Bool -> Bool) -> (y : Bool) -> Bool {
  forall (f : Bool -> Bool) (y : Bool)
  apply f y ~> f y
}

main :L Pair ~>
  P
    (apply not   (true False))
    (apply false (true False)).
