data Bool : Type {
  True : Bool,
  False : Bool
}

-- T is a type that contains an irrelevant Boolean.
-- Change to (pf :E Bool) to cause type error.
--
-- If you change it to (pf : Bool), inference will still make it irrelevant
-- since it is not necessary to make it relevant for the program to typecheck.
data T : Type {
    C : (pf :I Bool) -> T
}

-- U is indexed with T, which has an irrelevant constructor field,
-- but we want the index of U itself to be relevant.
postulate U : (t :E T) -> Type.

-- Function `g` takes an element of `U (C True)`,
-- (and needs it at runtime so it can't be erased).
--
-- Since `g` does not have a body, from which ITT could infer
-- that its argument should be retained, we need to assert it.
postulate g : (x :L U (C True)) -> Bool.

-- But we have only `d : U (C b)` for some unknown Boolean `b`.
postulate b : Bool.
postulate d : U (C b).

not : (x : Bool) -> Bool {
  not True ~> False,
  not False ~> True
}

id : (a : Type) -> (x : a) -> a {
  forall (a : Type) (x : a).
    id a x ~> x
}

-- Thanks to the irrelevance of C's argument, we *can* apply `g` to `d`
-- and it does not matter that `b` may or may not be equal to `True`.
--
-- We can even coerce `d` to `U (C False)`, and it'll still work.
--
main :L Bool {
  main ~> (\x : U (C False). g x) d
}

-- Also notice that we didn't use any unnecessary annotations above,
-- neither on binders, nor in applications.
--
-- The only three places with an annotation are exactly those
-- that choose the *meaning* of our program, and are therefore necessary.

-- In other words, by these three annotations,
-- we express that we choose to erase less than we could
-- in order to expose the effect of irrelevance.
-- 
-- All other annotations are inferred automatically.

-- vim: ft=ttstar
