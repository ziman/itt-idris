
#############
# Desugared #
#############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (_ : Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ : Nat) -> Type.
  
  constructor/1 FZ : (n : _) -> Fin (S n).
  
  constructor/2 FS : (n : _) -> (_ : Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ : Nat) -> (_ : Type) -> Type.
  
  constructor/1 Nil : (a : _) -> Vect Z a.
  
  constructor/4 Cons : (a : _) -> (n : _) -> (_ : a) -> (_ : Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem : (a : _) -> (n : _) -> (_ : a) -> (_ : Vect n a) -> Type.
  
  constructor/4 Here : (a : _) -> (n : _) -> (x : a) -> (xs : _) -> Elem a (S n) x (Cons a n x xs).
  
  constructor/6 There : (a : _) -> (n : _) -> (x : a) -> (y : a) -> (xs : _) -> (_ : Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
}

mutual {
  constructor/0 Typ : Type.
  
  constructor/2 TLam : (_ : Typ) -> (_ : Typ) -> Typ.
  
  constructor/0 TNat : Typ.
}

mutual {
  constructor/3 Term : (n : _) -> (_ : Typ) -> (_ : Vect n Typ) -> Type.
  
  constructor/4 Var : (a : _) -> (n : _) -> (ctx : _) -> (_ : Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam : (a : _) -> (n : _) -> (ctx : _) -> (b : _) -> (_ : Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix : (a : _) -> (n : _) -> (ctx : _) -> (_ : Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup : (n : _) -> (_ : Vect n Typ) -> (_ : Fin n) -> Typ {
  forall (a : _) (n : _) (ctx : _).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a : _) (n : _) (ctx : _) (i : _).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count : (n : _) -> (ctx : _) -> (i : _) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n : _) (ctx : _) (a : _).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n : _) (ctx : _) (a : _) (i : _).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main : Type {
  main  ~> Type
}

###############
# Elaboration #
###############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (_ :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ :L Nat) -> Type.
  
  constructor/1 FZ : (n :I _0) -> Fin (S n).
  
  constructor/2 FS : (n :I _1) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 Nil : (a :I _2) -> Vect Z a.
  
  constructor/4 Cons : (a :I _3) -> (n :I _4) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem : (a :I _5) -> (n :I _6) -> (_ :L a) -> (_ :L Vect n a) -> Type.
  
  constructor/4 Here : (a :I _7) -> (n :I _8) -> (x :L a) -> (xs :I _9) -> Elem a (S n) x (Cons a n x xs).
  
  constructor/6 There : (a :I _10) -> (n :I _11) -> (x :L a) -> (y :L a) -> (xs :I _12) -> (_ :L Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
}

mutual {
  constructor/0 Typ : Type.
  
  constructor/2 TLam : (_ :L Typ) -> (_ :L Typ) -> Typ.
  
  constructor/0 TNat : Typ.
}

mutual {
  constructor/3 Term : (n :I _13) -> (_ :L Typ) -> (_ :L Vect n Typ) -> Type.
  
  constructor/4 Var : (a :I _14) -> (n :I _15) -> (ctx :I _16) -> (_ :L Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam : (a :I _17) -> (n :I _18) -> (ctx :I _19) -> (b :I _20) -> (_ :L Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix : (a :I _21) -> (n :I _22) -> (ctx :I _23) -> (_ :L Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup : (n : _24) -> (_ : Vect n Typ) -> (_ : Fin n) -> Typ {
  forall (a : _27) (n : _26) (ctx : _25).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a : _31) (n : _30) (ctx : _29) (i : _28).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count : (n : _32) -> (ctx : _33) -> (i : _34) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n : _37) (ctx : _36) (a : _35).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n : _41) (ctx : _40) (a : _39) (i : _38).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main : Type {
  main  ~> Type
}

Equalities:
  _ty0 = Type
  _0 = Nat
  _ty1 = Type
  _1 = Nat
  _1 = Nat
  _ty2 = Type
  _2 = Type
  _ty3 = Type
  _ty4 = Type
  _3 = Type
  _4 = Nat
  _3 = Type
  _4 = Nat
  _3 = Type
  _ty5 = Type
  _ty6 = Type
  _5 = Type
  _6 = Nat
  _5 = Type
  _ty7 = Type
  _ty8 = Type
  _7 = Type
  _ty9 = Type
  _5 = _7
  _8 = Nat
  _6 = Nat
  _3 = _7
  _4 = _8
  _9 = Vect n a
  _ty10 = Type
  _ty11 = Type
  _10 = Type
  _10 = Type
  _ty12 = Type
  _5 = _10
  _6 = _11
  _12 = Vect n a
  _5 = _10
  _11 = Nat
  _6 = Nat
  _3 = _10
  _4 = _11
  _12 = Vect n a
  _ty13 = Type
  _13 = Nat
  _ty14 = Type
  _ty15 = Type
  _ty16 = Type
  _5 = Type
  _6 = _15
  _14 = Typ
  _16 = Vect n Typ
  _13 = _15
  _14 = Typ
  _16 = Vect n Typ
  _ty17 = Type
  _ty18 = Type
  _ty19 = Type
  _ty20 = Type
  _18 = Nat
  _13 = Nat
  _20 = Typ
  _3 = Type
  _4 = _18
  _17 = Typ
  _19 = Vect n Typ
  _13 = _18
  _17 = Typ
  _20 = Typ
  _19 = Vect n Typ
  _ty21 = Type
  _ty22 = Type
  _ty23 = Type
  _22 = Nat
  _13 = Nat
  _21 = Typ
  _3 = Type
  _4 = _22
  _21 = Typ
  _23 = Vect n Typ
  _13 = _22
  _21 = Typ
  _23 = Vect n Typ
  _ty24 = Type
  _24 = Nat
  _24 = Nat
  _ty27 = Type
  _ty26 = Type
  _ty25 = Type
  _26 = Nat
  _24 = Nat
  _3 = Type
  _4 = _26
  _27 = Typ
  _25 = Vect n Typ
  _0 = _26
  _27 = Typ
  _ty31 = Type
  _ty30 = Type
  _ty29 = Type
  _ty28 = Type
  _30 = Nat
  _24 = Nat
  _3 = Type
  _4 = _30
  _31 = Typ
  _29 = Vect n Typ
  _1 = _30
  _28 = Fin n
  _24 = _30
  _29 = Vect n Typ
  _28 = Fin n
  _ty32 = Type
  _ty33 = Type
  _ty34 = Type
  _5 = Type
  _6 = _32
  _24 = _32
  _33 = Vect n Typ
  _34 = Fin n
  _33 = Vect n Typ
  _ty37 = Type
  _ty36 = Type
  _ty35 = Type
  _37 = Nat
  _32 = Nat
  _3 = Type
  _4 = _37
  _35 = Typ
  _36 = Vect n Typ
  _33 = Vect (S n) Typ
  _0 = _37
  _34 = Fin (S n)
  _7 = Type
  _8 = _37
  _35 = Typ
  _9 = _36
  _ty41 = Type
  _ty40 = Type
  _ty39 = Type
  _ty38 = Type
  _41 = Nat
  _32 = Nat
  _3 = Type
  _4 = _41
  _39 = Typ
  _40 = Vect n Typ
  _33 = Vect (S n) Typ
  _1 = _41
  _38 = Fin n
  _34 = Fin (S n)
  _10 = Type
  _11 = _41
  _24 = _41
  _40 = Vect n Typ
  _38 = Fin n
  _39 = Typ
  _12 = _40
  _32 = _41
  _33 = _40
  _34 = _38

Solved metas: [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _ty0, _ty1, _ty2, _ty3, _ty4, _ty5, _ty6, _ty7, _ty8, _ty9, _ty10, _ty11, _ty12, _ty13, _ty14, _ty15, _ty16, _ty17, _ty18, _ty19, _ty20, _ty21, _ty22, _ty23, _ty24, _ty25, _ty26, _ty27, _ty28, _ty29, _ty30, _ty31, _ty32, _ty33, _ty34, _ty35, _ty36, _ty37, _ty38, _ty39, _ty40, _ty41]

##############
# Elaborated #
##############

mutual {
  constructor/0 Nat : Type.
  
  constructor/0 Z : Nat.
  
  constructor/1 S : (_ :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin : (_ :L Nat) -> Type.
  
  constructor/1 FZ : (n :I Nat) -> Fin (S n).
  
  constructor/2 FS : (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect : (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 Nil : (a :I Type) -> Vect Z a.
  
  constructor/4 Cons : (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem : (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Type.
  
  constructor/4 Here : (a :I Type) -> (n :I Nat) -> (x :L a) -> (xs :I Vect n a) -> Elem a (S n) x (Cons a n x xs).
  
  constructor/6 There : (a :I Type) -> (n :I Nat) -> (x :L a) -> (y :L a) -> (xs :I Vect n a) -> (_ :L Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
}

mutual {
  constructor/0 Typ : Type.
  
  constructor/2 TLam : (_ :L Typ) -> (_ :L Typ) -> Typ.
  
  constructor/0 TNat : Typ.
}

mutual {
  constructor/3 Term : (n :I Nat) -> (_ :L Typ) -> (_ :L Vect n Typ) -> Type.
  
  constructor/4 Var : (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam : (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (b :I Typ) -> (_ :L Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix : (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup : (n : Nat) -> (_ : Vect n Typ) -> (_ : Fin n) -> Typ {
  forall (a : Typ) (n : Nat) (ctx : Vect n Typ).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a : Typ) (n : Nat) (ctx : Vect n Typ) (i : Fin n).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count : (n : Nat) -> (ctx : Vect n Typ) -> (i : Fin n) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n : Nat) (ctx : Vect n Typ) (a : Typ).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n : Nat) (ctx : Vect n Typ) (a : Typ) (i : Fin n).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main : Type {
  main  ~> Type
}

#############
# Evarified #
#############

mutual {
  constructor/0 Nat :59 Type.
  
  constructor/0 Z :97 Nat.
  
  constructor/1 S :63 (_ :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :16 (_ :L Nat) -> Type.
  
  constructor/1 FZ :13 (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :9 (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :96 (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 Nil :60 (a :I Type) -> Vect Z a.
  
  constructor/4 Cons :0 (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem :6 (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Type.
  
  constructor/4 Here :31 (a :I Type) -> (n :I Nat) -> (x :L a) -> (xs :I Vect n a) -> Elem a (S n) x (Cons a n x xs).
  
  constructor/6 There :69 (a :I Type) -> (n :I Nat) -> (x :L a) -> (y :L a) -> (xs :I Vect n a) -> (_ :L Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
}

mutual {
  constructor/0 Typ :85 Type.
  
  constructor/2 TLam :64 (_ :L Typ) -> (_ :L Typ) -> Typ.
  
  constructor/0 TNat :65 Typ.
}

mutual {
  constructor/3 Term :66 (n :I Nat) -> (_ :L Typ) -> (_ :L Vect n Typ) -> Type.
  
  constructor/4 Var :86 (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam :43 (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (b :I Typ) -> (_ :L Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix :17 (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup :159 (n :160 Nat) -> (_ :161 Vect n Typ) -> (_ :164 Fin n) -> Typ {
  forall (a :170 Typ) (n :169 Nat) (ctx :166 Vect n Typ).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a :186 Typ) (n :185 Nat) (ctx :182 Vect n Typ) (i :180 Fin n).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count :98 (n :99 Nat) -> (ctx :100 Vect n Typ) -> (i :103 Fin n) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n :116 Nat) (ctx :113 Vect n Typ) (a :112 Typ).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n :136 Nat) (ctx :133 Vect n Typ) (a :132 Typ) (i :130 Fin n).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main :200 Type {
  main  ~> Type
}
inferring  mutual {
    constructor/0 Nat :59 Type.
    
    constructor/0 Z :97 Nat.
    
    constructor/1 S :63 (_ :L Nat) -> Nat.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Nat :I Type.
    
    constructor/0 Z :I Nat.
    
    constructor/1 S :I (_ :L Nat) -> Nat.
  }

inferring  mutual {
    constructor/1 Fin :16 (_ :L Nat) -> Type.
    
    constructor/1 FZ :13 (n :I Nat) -> Fin (S n).
    
    constructor/2 FS :9 (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

  inferred constraints: 
    L ~ 14
    L ~ 15
    L ~ 10
    L ~ 11
    L ~ 12
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/1 Fin :I (_ :L Nat) -> Type.
    
    constructor/1 FZ :I (n :I Nat) -> Fin (S n).
    
    constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
  }

inferring  mutual {
    constructor/2 Vect :96 (_ :L Nat) -> (_ :L Type) -> Type.
    
    constructor/1 Nil :60 (a :I Type) -> Vect Z a.
    
    constructor/4 Cons :0 (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

  inferred constraints: 
    L ~ 62
    L ~ 61
    L ~ 2
    L ~ 1
    L ~ 4
    L ~ 5
    L ~ 3
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
    
    constructor/1 Nil :I (a :I Type) -> Vect Z a.
    
    constructor/4 Cons :I (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
  }

inferring  mutual {
    constructor/4 Elem :6 (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Type.
    
    constructor/4 Here :31 (a :I Type) -> (n :I Nat) -> (x :L a) -> (xs :I Vect n a) -> Elem a (S n) x (Cons a n x xs).
    
    constructor/6 There :69 (a :I Type) -> (n :I Nat) -> (x :L a) -> (y :L a) -> (xs :I Vect n a) -> (_ :L Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
  }

  inferred constraints: 
    L ~ 8
    L ~ 7
    L ~ 33
    L ~ 32
    I ~ 37
    I ~ 36
    L ~ 38
    L ~ 35
    L ~ 34
    I ~ 42
    I ~ 41
    L ~ 40
    L ~ 39
    L ~ 32
    L ~ 33
    7 ~ L
    8 ~ L
    38 ~ L
    L ~ 71
    L ~ 70
    I ~ 75
    I ~ 74
    L ~ 73
    L ~ 72
    7 ~ 70
    8 ~ 71
    I ~ 79
    I ~ 78
    L ~ 80
    L ~ 77
    L ~ 76
    I ~ 84
    I ~ 83
    L ~ 82
    L ~ 81
    L ~ 70
    L ~ 71
    7 ~ L
    8 ~ L
    80 ~ L
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/4 Elem :I (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Type.
    
    constructor/4 Here :I (a :I Type) -> (n :I Nat) -> (x :L a) -> (xs :I Vect n a) -> Elem a (S n) x (Cons a n x xs).
    
    constructor/6 There :I (a :I Type) -> (n :I Nat) -> (x :L a) -> (y :L a) -> (xs :I Vect n a) -> (_ :L Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
  }

inferring  mutual {
    constructor/0 Typ :85 Type.
    
    constructor/2 TLam :64 (_ :L Typ) -> (_ :L Typ) -> Typ.
    
    constructor/0 TNat :65 Typ.
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/0 Typ :I Type.
    
    constructor/2 TLam :I (_ :L Typ) -> (_ :L Typ) -> Typ.
    
    constructor/0 TNat :I Typ.
  }

inferring  mutual {
    constructor/3 Term :66 (n :I Nat) -> (_ :L Typ) -> (_ :L Vect n Typ) -> Type.
    
    constructor/4 Var :86 (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Elem Typ n a ctx) -> Term n a ctx.
    
    constructor/5 Lam :43 (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (b :I Typ) -> (_ :L Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
    
    constructor/4 Fix :17 (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
  }

  inferred constraints: 
    L ~ 68
    L ~ 67
    L ~ 88
    L ~ 87
    I ~ 92
    I ~ 91
    L ~ 90
    L ~ 89
    L ~ 87
    L ~ 88
    I ~ 95
    L ~ 94
    L ~ 93
    67 ~ 87
    68 ~ 88
    L ~ 45
    L ~ 44
    I ~ 48
    L ~ 49
    L ~ 47
    L ~ 46
    I ~ 53
    I ~ 52
    L ~ 51
    L ~ 50
    L ~ 44
    L ~ 45
    67 ~ L
    68 ~ L
    49 ~ L
    I ~ 56
    L ~ 55
    L ~ 58
    L ~ 57
    L ~ 54
    67 ~ 44
    68 ~ 45
    L ~ 19
    L ~ 18
    I ~ 22
    L ~ 23
    L ~ 21
    L ~ 20
    I ~ 27
    I ~ 26
    L ~ 25
    L ~ 24
    L ~ 18
    L ~ 19
    67 ~ L
    68 ~ L
    23 ~ L
    I ~ 30
    L ~ 29
    L ~ 28
    67 ~ 18
    68 ~ 19
  
  
  variance of evars:
    covariant: []
    contravariant: []
  mutual {
    constructor/3 Term :I (n :I Nat) -> (_ :L Typ) -> (_ :L Vect n Typ) -> Type.
    
    constructor/4 Var :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Elem Typ n a ctx) -> Term n a ctx.
    
    constructor/5 Lam :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (b :I Typ) -> (_ :L Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
    
    constructor/4 Fix :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
  }

inferring  lookup :159 (n :160 Nat) -> (_ :161 Vect n Typ) -> (_ :164 Fin n) -> Typ {
    forall (a :170 Typ) (n :169 Nat) (ctx :166 Vect n Typ).
    lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
    
    forall (a :186 Typ) (n :185 Nat) (ctx :182 Vect n Typ) (i :180 Fin n).
    lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
  }

  inferred constraints: 
    L ~ 163
    L ~ 162
    L ~ 165
    L ~ 168
    L ~ 167
    170 ~ product [L, 161]
    169 ~ product [L, 160]
    166 ~ product [L, 161]
    160 ~ 171
    product [160] ≥ sum
      product [I]
    L ~ 172
    161 ~ 173
    product [161] ≥ sum
      product [I]
    I ~ 174
    I ~ 175
    L ~ 176
    L ~ 177
    L ~ 167
    L ~ 168
    162 ~ L
    163 ~ L
    172 ~ L
    164 ~ 178
    product [164] ≥ sum
      product [L]
    I ~ 179
    165 ~ L
    172 ~ L
    170 ≥ sum
      product []
    169 ≥ sum
    166 ≥ sum
    L ~ 184
    L ~ 183
    L ~ 181
    186 ~ product [L, 161]
    185 ~ product [L, 160]
    182 ~ product [L, 161]
    180 ~ product [L, 164]
    160 ~ 187
    product [160] ≥ sum
      product [I]
    L ~ 188
    161 ~ 189
    product [161] ≥ sum
      product [I]
    I ~ 190
    I ~ 191
    L ~ 192
    L ~ 193
    L ~ 183
    L ~ 184
    162 ~ L
    163 ~ L
    188 ~ L
    164 ~ 194
    product [164] ≥ sum
      product [L]
    I ~ 195
    L ~ 196
    L ~ 181
    165 ~ L
    188 ~ L
    186 ≥ sum
    185 ≥ sum
      product [160]
    182 ≥ sum
      product [161]
    180 ≥ sum
      product [164]
    160 ~ 199
    161 ~ 198
    162 ~ 183
    163 ~ 184
    164 ~ 197
    165 ~ 181
  
  
  variance of evars:
    covariant: []
    contravariant: [160, 161, 164]
  lookup :I (n :I Nat) -> (_ :R Vect n Typ) -> (_ :L Fin n) -> Typ {
    forall (a :R Typ) (n :I Nat) (ctx :R Vect n Typ).
    lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
    
    forall (a :R Typ) (n :I Nat) (ctx :R Vect n Typ) (i :L Fin n).
    lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
  }

inferring  count :98 (n :99 Nat) -> (ctx :100 Vect n Typ) -> (i :103 Fin n) -> Elem Typ n (lookup n ctx i) ctx {
    forall (n :116 Nat) (ctx :113 Vect n Typ) (a :112 Typ).
    count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
    
    forall (n :136 Nat) (ctx :133 Vect n Typ) (a :132 Typ) (i :130 Fin n).
    count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
  }

  inferred constraints: 
    L ~ 102
    L ~ 101
    L ~ 104
    I ~ 108
    I ~ 107
    L ~ 106
    I ~ 111
    R ~ 110
    L ~ 101
    L ~ 102
    L ~ 109
    L ~ 104
    L ~ 105
    L ~ 101
    L ~ 102
    L ~ 115
    L ~ 114
    116 ~ product [L, 99]
    113 ~ product [L, 100]
    112 ~ product [L, 100]
    99 ~ 117
    product [99] ≥ sum
      product [I]
    L ~ 118
    100 ~ 119
    product [100] ≥ sum
      product [I]
    I ~ 120
    I ~ 121
    L ~ 122
    L ~ 123
    L ~ 114
    L ~ 115
    101 ~ L
    102 ~ L
    118 ~ L
    103 ~ 124
    product [103] ≥ sum
      product [L]
    I ~ 125
    104 ~ L
    118 ~ L
    116 ≥ sum
      product [I]
    113 ≥ sum
      product [I]
    112 ≥ sum
      product [L]
    I ~ 129
    I ~ 128
    L ~ 127
    I ~ 126
    L ~ 114
    L ~ 115
    L ~ 105
    L ~ 106
    I ~ 107
    I ~ 108
    L ~ 135
    L ~ 134
    L ~ 131
    136 ~ product [L, 99]
    133 ~ product [L, 100]
    132 ~ product [L, 100]
    130 ~ product [L, 103]
    99 ~ 137
    product [99] ≥ sum
      product [I]
    L ~ 138
    100 ~ 139
    product [100] ≥ sum
      product [I]
    I ~ 140
    I ~ 141
    L ~ 142
    L ~ 143
    L ~ 134
    L ~ 135
    101 ~ L
    102 ~ L
    138 ~ L
    103 ~ 144
    product [103] ≥ sum
      product [L]
    I ~ 145
    L ~ 146
    L ~ 131
    104 ~ L
    138 ~ L
    136 ≥ sum
      product [I]
      product [I, L]
      product [99, L]
    133 ≥ sum
      product [R, L]
      product [I]
      product [100, L]
    132 ≥ sum
      product [L]
    130 ≥ sum
      product [L, L]
      product [103, L]
    I ~ 152
    I ~ 151
    L ~ 150
    I ~ 155
    R ~ 154
    L ~ 134
    L ~ 135
    L ~ 153
    L ~ 131
    L ~ 149
    I ~ 148
    L ~ 134
    L ~ 135
    L ~ 147
    99 ~ 158
    100 ~ 157
    101 ~ 134
    102 ~ 135
    103 ~ 156
    104 ~ 131
    L ~ 105
    L ~ 106
    I ~ 107
    I ~ 108
    L ~ 105
    L ~ 106
    I ~ 107
    I ~ 108
  
  deferred equalities: 
    107 -> S n ~ S n
    106 -> lookup (S n) (Cons Typ n a ctx) (FZ n) ~ a
    105 -> Cons Typ n a ctx ~ Cons Typ n a ctx
    106 -> lookup n ctx i ~ lookup n ctx i
    107 -> S n ~ S n
    106 -> lookup (S n) (Cons Typ n a ctx) (FS n i) ~ lookup n ctx i
    105 -> Cons Typ n a ctx ~ Cons Typ n a ctx
  
  variance of evars:
    covariant: []
    contravariant: [99, 100, 103]
  -> iteration 1
    lookup (S n) (Cons Typ n a ctx) (FZ n) ~ a
    Cons Typ n a ctx ~ Cons Typ n a ctx
    lookup n ctx i ~ lookup n ctx i
    lookup (S n) (Cons Typ n a ctx) (FS n i) ~ lookup n ctx i
    Cons Typ n a ctx ~ Cons Typ n a ctx

  count :I (n :I Nat) -> (ctx :R Vect n Typ) -> (i :R Fin n) -> Elem Typ n (lookup n ctx i) ctx {
    forall (n :I Nat) (ctx :R Vect n Typ) (a :R Typ).
    count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
    
    forall (n :I Nat) (ctx :R Vect n Typ) (a :R Typ) (i :R Fin n).
    count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
  }

inferring  main :200 Type {
    main  ~> Type
  }

  
  
  variance of evars:
    covariant: []
    contravariant: []
  main :I Type {
    main  ~> Type
  }


###################
# Final valuation #
###################

  0 -> I
  1 -> L
  2 -> L
  3 -> L
  4 -> L
  5 -> L
  6 -> I
  7 -> L
  8 -> L
  9 -> I
  10 -> L
  11 -> L
  12 -> L
  13 -> I
  14 -> L
  15 -> L
  16 -> I
  17 -> I
  18 -> L
  19 -> L
  20 -> L
  21 -> L
  22 -> I
  23 -> L
  24 -> L
  25 -> L
  26 -> I
  27 -> I
  28 -> L
  29 -> L
  30 -> I
  31 -> I
  32 -> L
  33 -> L
  34 -> L
  35 -> L
  36 -> I
  37 -> I
  38 -> L
  39 -> L
  40 -> L
  41 -> I
  42 -> I
  43 -> I
  44 -> L
  45 -> L
  46 -> L
  47 -> L
  48 -> I
  49 -> L
  50 -> L
  51 -> L
  52 -> I
  53 -> I
  54 -> L
  55 -> L
  56 -> I
  57 -> L
  58 -> L
  59 -> I
  60 -> I
  61 -> L
  62 -> L
  63 -> I
  64 -> I
  65 -> I
  66 -> I
  67 -> L
  68 -> L
  69 -> I
  70 -> L
  71 -> L
  72 -> L
  73 -> L
  74 -> I
  75 -> I
  76 -> L
  77 -> L
  78 -> I
  79 -> I
  80 -> L
  81 -> L
  82 -> L
  83 -> I
  84 -> I
  85 -> I
  86 -> I
  87 -> L
  88 -> L
  89 -> L
  90 -> L
  91 -> I
  92 -> I
  93 -> L
  94 -> L
  95 -> I
  96 -> I
  97 -> I
  98 -> I
  99 -> I
  100 -> R
  101 -> L
  102 -> L
  103 -> R
  104 -> L
  105 -> L
  106 -> L
  107 -> I
  108 -> I
  109 -> L
  110 -> R
  111 -> I
  112 -> R
  113 -> R
  114 -> L
  115 -> L
  116 -> I
  117 -> I
  118 -> L
  119 -> R
  120 -> I
  121 -> I
  122 -> L
  123 -> L
  124 -> R
  125 -> I
  126 -> I
  127 -> L
  128 -> I
  129 -> I
  130 -> R
  131 -> L
  132 -> R
  133 -> R
  134 -> L
  135 -> L
  136 -> I
  137 -> I
  138 -> L
  139 -> R
  140 -> I
  141 -> I
  142 -> L
  143 -> L
  144 -> R
  145 -> I
  146 -> L
  147 -> L
  148 -> I
  149 -> L
  150 -> L
  151 -> I
  152 -> I
  153 -> L
  154 -> R
  155 -> I
  156 -> R
  157 -> R
  158 -> I
  159 -> I
  160 -> I
  161 -> R
  162 -> L
  163 -> L
  164 -> L
  165 -> L
  166 -> R
  167 -> L
  168 -> L
  169 -> I
  170 -> R
  171 -> I
  172 -> L
  173 -> R
  174 -> I
  175 -> I
  176 -> L
  177 -> L
  178 -> L
  179 -> I
  180 -> L
  181 -> L
  182 -> R
  183 -> L
  184 -> L
  185 -> I
  186 -> R
  187 -> I
  188 -> L
  189 -> R
  190 -> I
  191 -> I
  192 -> L
  193 -> L
  194 -> L
  195 -> I
  196 -> L
  197 -> L
  198 -> R
  199 -> I
  200 -> L


#####################
# Annotated program #
#####################

mutual {
  constructor/0 Nat :I Type.
  
  constructor/0 Z :I Nat.
  
  constructor/1 S :I (_ :L Nat) -> Nat.
}

mutual {
  constructor/1 Fin :I (_ :L Nat) -> Type.
  
  constructor/1 FZ :I (n :I Nat) -> Fin (S n).
  
  constructor/2 FS :I (n :I Nat) -> (_ :L Fin n) -> Fin (S n).
}

mutual {
  constructor/2 Vect :I (_ :L Nat) -> (_ :L Type) -> Type.
  
  constructor/1 Nil :I (a :I Type) -> Vect Z a.
  
  constructor/4 Cons :I (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Vect (S n) a.
}

mutual {
  constructor/4 Elem :I (a :I Type) -> (n :I Nat) -> (_ :L a) -> (_ :L Vect n a) -> Type.
  
  constructor/4 Here :I (a :I Type) -> (n :I Nat) -> (x :L a) -> (xs :I Vect n a) -> Elem a (S n) x (Cons a n x xs).
  
  constructor/6 There :I (a :I Type) -> (n :I Nat) -> (x :L a) -> (y :L a) -> (xs :I Vect n a) -> (_ :L Elem a n x xs) -> Elem a (S n) x (Cons a n y xs).
}

mutual {
  constructor/0 Typ :I Type.
  
  constructor/2 TLam :I (_ :L Typ) -> (_ :L Typ) -> Typ.
  
  constructor/0 TNat :I Typ.
}

mutual {
  constructor/3 Term :I (n :I Nat) -> (_ :L Typ) -> (_ :L Vect n Typ) -> Type.
  
  constructor/4 Var :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Elem Typ n a ctx) -> Term n a ctx.
  
  constructor/5 Lam :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (b :I Typ) -> (_ :L Term (S n) b (Cons Typ n a ctx)) -> Term n (TLam a b) ctx.
  
  constructor/4 Fix :I (a :I Typ) -> (n :I Nat) -> (ctx :I Vect n Typ) -> (_ :L Term (S n) a (Cons Typ n a ctx)) -> Term n a ctx.
}

lookup :I (n :I Nat) -> (_ :R Vect n Typ) -> (_ :L Fin n) -> Typ {
  forall (a :R Typ) (n :I Nat) (ctx :R Vect n Typ).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> a
  
  forall (a :R Typ) (n :I Nat) (ctx :R Vect n Typ) (i :L Fin n).
  lookup ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> lookup n ctx i
}

count :I (n :I Nat) -> (ctx :R Vect n Typ) -> (i :R Fin n) -> Elem Typ n (lookup n ctx i) ctx {
  forall (n :I Nat) (ctx :R Vect n Typ) (a :R Typ).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FZ [n]) ~> Here Typ n a ctx
  
  forall (n :I Nat) (ctx :R Vect n Typ) (a :R Typ) (i :R Fin n).
  count ({S} n) ({Cons} [Typ] [n] a ctx) (FS [n] i) ~> There Typ n (lookup n ctx i) a ctx (count n ctx i)
}

main :L Type {
  main  ~> Type
}

##########
# Erased #
##########

main {
  main  ~> Type
}

################
# NF of `main` #
################

Unerased, reduced:
Type

Erased, reduced:
Type
