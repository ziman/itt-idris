constructor Bool : Type
constructor True : Bool
constructor False : Bool

function id : (b : Bool) -> Bool = \b : Bool. b

function not : (b : Bool) -> Bool = \b : Bool.
  match
    b : Bool = b
    -> Bool
  with
    case b
    | True => False
    | False => True
    end

constructor Id : (x : Bool) -> (y : Bool) -> Type
constructor Refl : (x : Bool) -> Id x x

function lemma : (b : Bool) -> Id b (not (not b)) = \b : Bool.
  match
    b : Bool = b
    -> Id b (not (not b))
  with
    case b
    | True  => Refl True
    | False => Refl False
    end

function main : Bool =
  match
    x : Bool = not True
    -> Bool
  with
    case x
    | True  => False
    | False => True
    end

-- vim: ft=idris
